{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Digitalhub SDK documentation","text":"<p>This is the Digitalhub SDK documentation.</p>"},{"location":"#table-of-contents","title":"Table of contents","text":"<ul> <li> <p>Installation</p> <p>Install <code>digitalhub</code> with <code>pip</code></p> <p>Installation</p> </li> <li> <p>Quickstart</p> <p>Get started with <code>digitalhub</code> SDK</p> <p>Quickstart</p> </li> <li> <p>Entities</p> <p>Describe entities with <code>digitalhub</code></p> <p>Entities</p> </li> <li> <p>Runtimes</p> <p>Runtimes documentation</p> <p>Runtimes</p> </li> </ul>"},{"location":"install/","title":"Installation","text":"<p>The Digitalhub SDK is distributed as a Python package and is hosted on PyPI so you can install them with <code>pip</code>.</p>"},{"location":"install/#installing-digitalhub-sdk","title":"Installing Digitalhub SDK","text":"<p>The most basic command to install the <code>digitalhub</code> package in your Python environment is:</p> <pre><code>python -m pip install digitalhub[full]\n</code></pre> <p>This command will install the SDK with all the dependencies.</p> <p>There are more options available:</p> <pre><code># Install SDK plus pandas for dataitems handling\npython -m pip install digitalhub[pandas]\n\n# Install SDK plus mlflow for mlflow model handling\npython -m pip install digitalhub[mlflow]\n</code></pre>"},{"location":"install/#installing-digitalhub-runtimes","title":"Installing Digitalhub Runtimes","text":"<p>The Digitalhub runtimes are installed in the same way as the SDK. We have distributed the following runtimes at the moment:</p> <ul> <li>digitalhub-runtime-python</li> <li>digitalhub-runtime-container</li> <li>digitalhub-runtime-dbt</li> <li>digitalhub-runtime-kfp</li> <li>digitalhub-runtime-modelserve</li> </ul> <p>You can install the runtime directly with pip. It will come with all the required SDK dependencies:</p> <pre><code># Install python runtime\npython -m pip install digitalhub-runtime-python\n\n# Install container runtime\npython -m pip install digitalhub-runtime-container\n\n# Install dbt runtime\npython -m pip install digitalhub-runtime-dbt\npython -m pip install digitalhub-runtime-dbt[local]\n\n# Install kfp runtime\npython -m pip install digitalhub-runtime-kfp\n\n# Install modelserve runtime\npython -m pip install digitalhub-runtime-modelserve\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":"<p>This is the quickstart guide for the Digitalhub SDK. It will walk you through how to use the SDK in the execution of a simple python function that produces some data as output.</p>"},{"location":"quickstart/#create-a-project","title":"Create a project","text":"<p>We can start creating a project with the following command:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\n    name=\"my-project\",\n    description=\"My project\"\n)\n</code></pre> <p>A project is the context in which you can run functions and manage data and artifacts.</p>"},{"location":"quickstart/#write-a-python-function","title":"Write a python function","text":"<p>First, write your function in a file called <code>downloader.py</code>:</p> <pre><code>from digitalhub_runtime_python import handler\n\n@handler(outputs=[\"df\"])\ndef downloader(url):\n    return url.as_df()\n</code></pre>"},{"location":"quickstart/#create-a-dataitem","title":"Create a dataitem","text":"<p>Second, create a dataitem to refernce a remote table containing the data we want:</p> <pre><code>url = \"https://gist.githubusercontent.com/kevin336/acbb2271e66c10a5b73aacf82ca82784/raw/e38afe62e088394d61ed30884dd50a6826eee0a8/employees.csv\"\ndi = project.new_dataitem(name=\"employees-table\", kind=\"table\", path=url)\n</code></pre>"},{"location":"quickstart/#create-a-function","title":"Create a function","text":"<p>Third, create a function with the following command:</p> <pre><code>func = project.new_function(\n    name=\"downloader\",\n    kind=\"python\",\n    code_src=\"downloader.py\",\n    handler=\"downloader\",\n    python_version=\"PYTHON3_9\",\n)\n</code></pre>"},{"location":"quickstart/#run-the-function","title":"Run the function","text":"<p>Run the function with the following command:</p> <pre><code>run = func.run(action=\"job\",\n               inputs={\"url\": di.key},\n               wait=True)\n</code></pre> <p>And finally get the output result:</p> <pre><code>run.output(\"df\").as_df()\n</code></pre>"},{"location":"objects/code_source/","title":"Code source","text":"<p>In several runtime objects, it is possible to execute a program (e.g. a function, a query or a workflow) written in a source. This source can be a single code file, a plain text string or a base64 encoded string, a zip archive or a git repository. Beside the source, you need also to define a <code>handler</code>, which is the entrypoint of the code.</p>"},{"location":"objects/code_source/#code-source-definition","title":"Code source definition","text":"<p>In the SDK, there are three different types of source code:</p> <ul> <li><code>code</code> which is a plain string source.</li> <li><code>base64</code> which is a base64 encoded string source.</li> <li><code>code_src</code> which is a code source URI.</li> </ul>"},{"location":"objects/code_source/#plain-text-source","title":"Plain text source","text":"<p>You can define a plain text source using the <code>code</code> parameter.</p> <p>Here follow an example of a plain text source with the Python runtime:</p> <pre><code>my_code = \"\"\"\nfrom digitalhub_runtime_python import handler\n\n@handler(outputs=[\"filtered\"])\ndef myfunction(di: Dataitem, col1: str):\n    df = di.as_df()\n    df = df[[\"col1\"]]\n    return df\n\"\"\"\n\nfunc = dh.new_function(project=\"my-project\",\n                       name=\"python-function\",\n                       kind=\"python\",\n                       python_version=\"PYTHON3_10\",\n                       code=my_code,\n                       handler=\"myfunction\")\n</code></pre> <p>In this case the function will execute the code in the <code>my_code</code> variable.</p>"},{"location":"objects/code_source/#base64-encoded-source","title":"Base64 encoded source","text":"<p>You can define a base64 encoded source using the <code>base64</code> parameter.</p> <p>Here follow an example of a base64 encoded source with the Python runtime:</p> <pre><code># Same function as above encoded in base64\nbase64_code = \"ZnJvbSBkaWdpdGFsaHViX3J1bnRpbWVfcHl0aG9uIGltcG9ydCBoYW5kbGVyCgpAaGFuZGxlcihvdXRwdXRzPVsiZmlsdGVyZWQiXSkKZGVmIG15ZnVuY3Rpb24oZGk6IERhdGFpdGVtLCBjb2wxOiBzdHIpOgogICAgZGYgPSBkaS5hc19kZigpCiAgICBkZiA9IGRmW1siY29sMSJdXQogICAgcmV0dXJuIGRm\"\n\nfunc = dh.new_function(project=\"my-project\",\n                       name=\"python-function\",\n                       kind=\"python\",\n                       python_version=\"PYTHON3_10\",\n                       base64=base64_code,\n                       handler=\"myfunction\")\n</code></pre> <p>In this case the function will execute the code in the <code>base64_code</code> variable.</p>"},{"location":"objects/code_source/#code-source-uri","title":"Code source URI","text":"<p>You can define a code source URI using the <code>code_src</code> parameter. We support the following types of URIs:</p> <ul> <li>Local file path</li> <li>Git repository</li> <li>S3 zip archive</li> <li>HTTP/HTTPS URL</li> <li>ZIP HTTP/HTTPS URL</li> </ul>"},{"location":"objects/code_source/#local-file-path","title":"Local file path","text":"<p>The local file path can be specified with the <code>path/to/file.ext</code> format.</p> <pre><code>my_code = \"src/my-func.py\"\n\nfunc = dh.new_function(project=\"my-project\",\n                       name=\"python-function\",\n                       kind=\"python\",\n                       python_version=\"PYTHON3_10\",\n                       code_src=my_code,\n                       handler=\"myfunction\")\n</code></pre> <p>In this case the function will import the code in the <code>src/my-func.py</code> file, encodes it in base64 and then executes it. If the file is not found, the function will raise an exception.</p>"},{"location":"objects/code_source/#remote-git-repository","title":"Remote git repository","text":"<p>The remote git repository can be specified with the <code>git+https://repo-host.com/some-user/some-repo</code> format. The anteposition <code>git+</code> is required, the rest of the URL is the repository URL.</p> <pre><code>my_repo = \"git+https://repo-host/some-user/some-repo\"\n\nfunc = dh.new_function(project=\"my-project\",\n                       name=\"python-function\",\n                       kind=\"python\",\n                       python_version=\"PYTHON3_10\",\n                       code_src=my_repo,\n                       handler=\"path:function\")\n</code></pre> <p>When a git repository is specified, the function try to clone the repository and execute the code specified in the <code>handler</code> entrypoint (See below). If the repository does not exist, the function will raise an exception.</p>"},{"location":"objects/code_source/#credentials","title":"Credentials","text":"<p>You may need credentials to access the repository. The credentials can be specified in three environment variables: <code>GIT_TOKEN</code>, <code>GIT_USER</code>and <code>GIT_PASSWORD</code>.</p> <p>Note</p> <p>You must set the env variable before defining the function. Token auth is recommended and takes precedence over basic auth. Please also verify that the repo provider supports basic auth.</p>"},{"location":"objects/code_source/#token","title":"Token","text":"<p>The token is a plain string. It will be passed in the URL according to the git provider.</p> <p>Example:</p> <pre><code># GitHub token\nos.environ[\"GIT_TOKEN\"] = \"github_pat_...\"\n\n# GitLab token\nos.environ[\"GIT_TOKEN\"] = \"glpat...\"\n\n# function definition\n</code></pre>"},{"location":"objects/code_source/#user-and-password","title":"User and password","text":"<p>User and password are plain strings.</p> <pre><code>os.environ[\"GIT_USER\"] = \"some-user\"\nos.environ[\"GIT_PASSWORD\"] = \"some-password\"\n\n# function definition\n</code></pre>"},{"location":"objects/code_source/#remote-zip-s3-archive","title":"Remote zip s3 archive","text":"<p>The remote zip s3 archive can be specified with the <code>zip+s3://some-bucket/some-key.zip</code> format. The anteposition <code>zip+</code> is required, the rest of the URL is an S3 URL in the form <code>s3://some-bucket/some-key.zip</code>. The code source is archived in a zip file, which is unpacked at runtime.</p> <pre><code>my_archive = \"zip+s3://some-bucket/some-key.zip\"\n\nfunc = dh.new_function(project=\"my-project\",\n                       name=\"python-function\",\n                       kind=\"python\",\n                       python_version=\"PYTHON3_10\",\n                       code_src=my_archive,\n                       handler=\"path:function\")\n</code></pre>"},{"location":"objects/code_source/#remote-http-https-url","title":"Remote http https URL","text":"<p>The remote http/https URL can be specified with the <code>http(s)://some-url</code> format.</p> <pre><code>my_url = \"http(s)://some-url\"\n\nfunc = dh.new_function(project=\"my-project\",\n                       name=\"python-function\",\n                       kind=\"python\",\n                       python_version=\"PYTHON3_10\",\n                       code_src=my_url,\n                       handler=\"path:function\")\n</code></pre>"},{"location":"objects/code_source/#remote-zip-http-https-url","title":"Remote zip http https URL","text":"<p>The remote zip http/https URL can be specified with the <code>zip+http(s)://some-url</code> format. The file at the URL must be a zip archive.</p> <pre><code>my_url = \"zip+http(s)://some-url\"\n\nfunc = dh.new_function(project=\"my-project\",\n                       name=\"python-function\",\n                       kind=\"python\",\n                       python_version=\"PYTHON3_10\",\n                       code_src=my_url,\n                       handler=\"path:function\")\n</code></pre>"},{"location":"objects/code_source/#handler","title":"Handler","text":"<p>The <code>handler</code> parameter is the entrypoint of the code. There are some rules to follow when defining it.</p> <p>If the source code is:</p> <ul> <li>Plain text</li> <li>Base64 encoded</li> <li>Local file path</li> </ul> <p>Then the entrypoint should be the function name.</p> <pre><code>my_code = \"\"\"\ndef myfunction():\n    ...\n\"\"\"\n\nfunc = dh.new_function(...,\n                       code=my_code,\n                       handler=\"myfunction\")\n</code></pre> <p>If the source code is:</p> <ul> <li>S3 zip archive</li> <li>Git repository</li> <li>ZIP HTTP/HTTPS URL</li> <li>HTTP/HTTPS URL</li> </ul> <p>Then the entrypoint should be the path to the file where the code is stored (expressed with <code>.</code> separator) and the name of the function separated by a <code>:</code>.</p> <pre><code>my_code = \"git+https://repo-host/some-user/some-repo\"\n\nfunc = dh.new_function(...,\n                       code_src=my_code,\n                       handler=\"src.subdir.etc:myfunction\")\n</code></pre>"},{"location":"objects/entities/","title":"Entities","text":"<p>In this section will be described the entities in the Digitalhub SDK.</p> <ul> <li>Projects</li> <li>Functions</li> <li>Workflows</li> <li>Runs</li> <li>Artifacts</li> <li>Dataitems</li> <li>Models</li> <li>Secrets</li> <li>Stores</li> </ul>"},{"location":"objects/stores/","title":"Stores","text":"<p>In SDK there is two types of stores: <code>Store</code> and <code>DataStore</code>. The first one is used to store/collect files, the second one is used to store/collect dataframes. Every <code>DataStore</code> has a <code>Store</code> as parent. We support natively the following stores:</p> <ul> <li><code>s3</code> for MinIO (default store)</li> <li><code>local</code> for local files</li> <li><code>remote</code> for remote http/https files</li> <li><code>sql</code> for PostgreSQL database tables</li> </ul>"},{"location":"objects/stores/#entity-paths","title":"Entity paths","text":"<p>When declaring an <code>Artifact</code>, a <code>Dataitem</code> or a <code>Model</code>, you must specify a <code>path</code> parameter to declare where the files are stored. There are some rules to follow when specifying the path:</p> <ol> <li>The <code>path</code> parameter is as <code>str</code>.</li> <li>It can have a scheme declared in the beginning of the path.</li> <li>Based on the scheme, the SDK will create a <code>Store</code> object to interact with the files/tables in the path.</li> <li>The path can point to a single file, a directory, a partition or a table. See below for more details.</li> </ol>"},{"location":"objects/stores/#supported-path-types","title":"Supported path types","text":""},{"location":"objects/stores/#local-paths","title":"Local paths","text":"<p>A local path is declared by not providing a scheme. For example:</p> <pre><code>local_dir = \"./my-path\"\nlocal_file = \"./my-path/my-file.csv\"\n</code></pre>"},{"location":"objects/stores/#s3-paths","title":"S3 paths","text":"<p>To declare an S3 path, you need to provide the scheme <code>s3://</code>. The first element of the path must be the bucket name and the second must be the key/partition. If you provide a partition path, you need to append a final <code>/</code> at the end. For example:</p> <pre><code>s3_path = \"s3://my-bucket/my-key.file\"\ns3_partition_path = \"s3://my-bucket/my-key/\"\n</code></pre>"},{"location":"objects/stores/#remote-paths","title":"Remote paths","text":"<p>To declare a remote path, you need to provide the scheme <code>http://</code> or <code>https://</code>. For example:</p> <pre><code>http_path = \"http://my-url.csv\"\nhttps_path = \"https://my-url.csv\"\n</code></pre>"},{"location":"objects/stores/#sql-paths","title":"SQL paths","text":"<p>To declare a SQL path, you need to provide the scheme <code>sql://</code>. An SQL path will always point to a single table. The path is composed by three parts, delimited by <code>/</code>. The first part is the database name, the second (optional) is the schema and the third is the table name. For example:</p> <pre><code>sql_path = \"sql://my-database/my-schema/my-table\"\n</code></pre>"},{"location":"objects/artifact/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete artifacts. There are two ways to use them. The first is through the SDK and the second is through the <code>Project</code> object. The syntax is the same for all CRUD methods. If you want to manage artifacts from the project, you can use the <code>Project</code> object and avoid to specify the <code>project</code> parameter. In this last case, you need to specify every parameter as keyword argument. In any case, you need to first import the SDK and instantiate a <code>Project</code> object that will be the context in which you can manage entities.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n\n# Use CRUD method on project\n\nartifact = project.new_artifact(name=\"my-artifact\",\n                                kind=\"artifact\",\n                                path=\"path-to-some-file\")\n\n# Use CRUD method from SDK\n\nartifact = dh.new_artifact(project=\"my-project\",\n                           name=\"my-artifact\",\n                           kind=\"artifact\",\n                           path=\"path-to-some-file\")\n</code></pre> <p>An <code>artifact</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_artifact</code></li> <li><code>log_artifact</code></li> </ul> <p>Read:</p> <ul> <li><code>get_artifact</code></li> <li><code>get_artifact_versions</code></li> <li><code>import_artifact</code></li> <li><code>list_artifacts</code></li> </ul> <p>Update:</p> <ul> <li><code>update_artifact</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_artifact</code></li> </ul>"},{"location":"objects/artifact/crud/#create","title":"Create","text":"<p>You can create an artifact with the <code>new_artifact()</code> or with <code>log_artifact()</code> method. The <code>kwargs</code> parameters are determined by the kind of the object, and are described in the kinds section. The <code>kwargs</code> parameters are the same for both new and log methods.</p>"},{"location":"objects/artifact/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"objects/artifact/crud/#digitalhub.entities.artifact.crud.new_artifact","title":"<code>new_artifact</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>embedded</code> <code>bool</code> <p>Flag to determine if object spec must be embedded in project spec.</p> <code>False</code> <code>path</code> <code>str</code> <p>Object path on local file system or remote storage. It is also the destination path of upload() method.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Artifact</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_artifact(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-artifact\",\n&gt;&gt;&gt;                    kind=\"artifact\",\n&gt;&gt;&gt;                    path=\"s3://my-bucket/my-key\")\n</code></pre>"},{"location":"objects/artifact/crud/#log","title":"Log","text":"<p>This function create a new entity into the backend and also upload a local file into an artifact store (eg. S3).</p>"},{"location":"objects/artifact/crud/#digitalhub.entities.artifact.crud.log_artifact","title":"<code>log_artifact</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>source</code> <code>str</code> <p>Artifact location on local path.</p> required <code>path</code> <code>str</code> <p>Destination path of the artifact. If not provided, it's generated.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>New artifact spec parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Artifact</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = log_artifact(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-artifact\",\n&gt;&gt;&gt;                    kind=\"artifact\",\n&gt;&gt;&gt;                    source=\"./local-path\")\n</code></pre>"},{"location":"objects/artifact/crud/#read","title":"Read","text":"<p>To read artifacts you can use the <code>get_artifact()</code>, <code>get_artifact_versions()</code>, <code>list_artifacts()</code> or <code>import_artifact()</code> functions.</p>"},{"location":"objects/artifact/crud/#get","title":"Get","text":"<p>This function searches for a single artifact into the backend. If you want to collect an artifact from the backend using <code>get_artifact()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-name&gt;:&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity name as <code>identifier</code>, the project name as <code>project</code> and the entity id as <code>entity_id</code> parameters. If you do not specify the entity id, you will get the latest version.</li> </ul>"},{"location":"objects/artifact/crud/#digitalhub.entities.artifact.crud.get_artifact","title":"<code>get_artifact</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Artifact</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_artifact(\"store://my-artifact-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_artifact(\"my-artifact-name\"\n&gt;&gt;&gt;                    project=\"my-project\",\n&gt;&gt;&gt;                    entity_id=\"my-artifact-id\")\n</code></pre>"},{"location":"objects/artifact/crud/#get-versions","title":"Get versions","text":"<p>This function returns all the versions of an artifact from the backend.</p>"},{"location":"objects/artifact/crud/#digitalhub.entities.artifact.crud.get_artifact_versions","title":"<code>get_artifact_versions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Artifact]</code> <p>List of object instances.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_artifact_versions(\"store://my-artifact-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_artifact_versions(\"my-artifact-name\"\n&gt;&gt;&gt;                             project=\"my-project\")\n</code></pre>"},{"location":"objects/artifact/crud/#list","title":"List","text":"<p>This function returns all the latest artifacts from the backend related to a project.</p>"},{"location":"objects/artifact/crud/#digitalhub.entities.artifact.crud.list_artifacts","title":"<code>list_artifacts</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Artifact]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_artifacts(project=\"my-project\")\n</code></pre>"},{"location":"objects/artifact/crud/#import","title":"Import","text":"<p>This function load the artifact from a local yaml file descriptor.</p>"},{"location":"objects/artifact/crud/#digitalhub.entities.artifact.crud.import_artifact","title":"<code>import_artifact</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Artifact</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_artifact(\"my-artifact.yaml\")\n</code></pre>"},{"location":"objects/artifact/crud/#update","title":"Update","text":"<p>To update an artifact you can use the <code>update_artifact()</code> method.</p>"},{"location":"objects/artifact/crud/#digitalhub.entities.artifact.crud.update_artifact","title":"<code>update_artifact</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Artifact</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Artifact</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_artifact(obj)\n</code></pre>"},{"location":"objects/artifact/crud/#delete","title":"Delete","text":"<p>To delete an artifact you can use the <code>delete_artifact()</code> method.</p>"},{"location":"objects/artifact/crud/#digitalhub.entities.artifact.crud.delete_artifact","title":"<code>delete_artifact</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>delete_all_versions</code> <code>bool</code> <p>Delete all versions of the named entity. If True, use entity name instead of entity key as identifier.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <p>If delete_all_versions is False:</p> <pre><code>&gt;&gt;&gt; delete_artifact(\"store://my-artifact-key\")\n</code></pre> <p>Otherwise:</p> <pre><code>&gt;&gt;&gt; delete_artifact(\"my-artifact-name\",\n&gt;&gt;&gt;                  project=\"my-project\",\n&gt;&gt;&gt;                  delete_all_versions=True)\n</code></pre>"},{"location":"objects/artifact/entity/","title":"Artifacts","text":"<p>Artifacts are (binary) objects stored in one of the artifact stores of the platform, and available to every process, module and component as files (or data streams).</p>"},{"location":"objects/artifact/entity/#managing-artifacts-with-sdk","title":"Managing artifacts with SDK","text":"<p>Artifacts can be created and managed as entities with the SDK CRUD methods. This can be done directly from the package or through the <code>Project</code> object. To manage artifacts, you need to have at least <code>digitalhub[core]</code> layer installed.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete artifacts.</li> <li>In the methods section, we will see what can be done with the <code>Artifact</code> object.</li> <li>In the kinds section, we will see what kinds are supported.</li> </ol>"},{"location":"objects/artifact/kinds/","title":"Artifact kinds","text":"<p>At the moment, we support the following kinds:</p> <ul> <li><code>artifact</code>: represents a generic artifact</li> </ul> <p>For each different kind, the <code>Artifact</code> object has its own subclass with different <code>spec</code> and <code>status</code> attributes.</p>"},{"location":"objects/artifact/kinds/#artifact","title":"Artifact","text":"<p>The <code>artifact</code> kind indicates that the artifact is a generic artifact. It's usefull if you intend to manipulate the artifact as a file, you can in fact download/upload it.</p>"},{"location":"objects/artifact/kinds/#artifact-spec-parameters","title":"Artifact spec parameters","text":"Parameter Type Description Default <code>path</code> str Path of the artifact, can be a local path or a remote path, a single filepath or a directory/partition. required"},{"location":"objects/artifact/kinds/#artifact-methods","title":"Artifact methods","text":"<p>The <code>artifact</code> kind has no additional methods.</p>"},{"location":"objects/artifact/methods/","title":"Artifact object","text":"<p>The <code>Artifact</code> object comes with three sets of methods: CRUD methods, I/O methods and kind specific methods.</p>"},{"location":"objects/artifact/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"objects/artifact/methods/#digitalhub.entities.artifact._base.entity.Artifact.save","title":"<code>save</code>","text":"<p>Save entity into backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>MaterialEntity</code> <p>Entity saved.</p>"},{"location":"objects/artifact/methods/#digitalhub.entities.artifact._base.entity.Artifact.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"objects/artifact/methods/#digitalhub.entities.artifact._base.entity.Artifact.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"objects/artifact/methods/#io-methods","title":"I/O methods","text":"<p>I/O methods are used to handle objects as files.</p> <ul> <li><code>as_file()</code>: Dowloads the artifact into a local temporary destination</li> <li><code>download()</code>: Downloads the artifact into a specified path</li> <li><code>upload()</code>: Uploads the artifact to artifact spec path</li> </ul>"},{"location":"objects/artifact/methods/#digitalhub.entities.artifact._base.entity.Artifact.as_file","title":"<code>as_file</code>","text":"<p>Get object as file(s). It downloads the object from storage in a temporary folder and returns the list of downloaded files paths.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of file paths.</p>"},{"location":"objects/artifact/methods/#digitalhub.entities.artifact._base.entity.Artifact.download","title":"<code>download</code>","text":"<p>This function downloads one or more file from storage on local machine. It looks inside the object's status for the file(s) path under files attribute. If it does not find it, it will try to download what it can from spec.path. The files are downloaded into a destination folder. If the destination is not specified, it will set by default under the context path as '/', e.g. './dataitem'. The overwrite flag allows to overwrite existing file(s) in the destination folder. <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>str</code> <p>Destination path as filename or directory.</p> <code>None</code> <code>overwrite</code> <code>bool</code> <p>Specify if overwrite existing file(s). If file(s) already exist and overwrite is False, it will raise an error.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Downloaded path.</p> <p>Examples:</p> <p>Download a single file:</p> <pre><code>&gt;&gt;&gt; entity.status.files[0]\n{\n    \"path \": \"data.csv\",\n    \"name \": \"data.csv\",\n    \"content_type \": \"text/csv;charset=utf-8 \"\n}\n&gt;&gt;&gt; path = entity.download()\n&gt;&gt;&gt; print(path)\ndataitem/data.csv\n</code></pre>"},{"location":"objects/artifact/methods/#digitalhub.entities.artifact._base.entity.Artifact.upload","title":"<code>upload</code>","text":"<p>Upload object from given local path to spec path destination. Source must be a local path. If the path is a folder, destination path (object's spec path) must be a folder or a partition ending with '/' (s3).</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str | list[str]</code> <p>Local filepath, directory or list of filepaths.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <p>Upload a single file:</p> <pre><code>&gt;&gt;&gt; entity.spec.path = 's3://bucket/data.csv'\n&gt;&gt;&gt; entity.upload('./data.csv')\n</code></pre> <p>Upload a folder:</p> <pre><code>&gt;&gt;&gt; entity.spec.path = 's3://bucket/data/'\n&gt;&gt;&gt; entity.upload('./data')\n</code></pre>"},{"location":"objects/artifact/methods/#kind-specific-methods","title":"Kind specific methods","text":"<p>Kind specific methods are used to express potential behaviors of different object kinds. See the kinds section for more information.</p>"},{"location":"objects/dataitem/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete dataitems. There are two ways to use them. The first is through the SDK and the second is through the <code>Project</code> object. The syntax is the same for all CRUD methods. If you want to manage dataitems from the project, you can use the <code>Project</code> object and avoid to specify the <code>project</code> parameter. In this last case, you need to specify every parameter as keyword argument. In any case, you need to first import the SDK and instantiate a <code>Project</code> object that will be the context in which you can manage entities.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n\n# Use CRUD method on project\n\ndataitem = project.new_dataitem(name=\"my-dataitem\",\n                                kind=\"table\",\n                                path=\"path-to-some-data\")\n\n# Use CRUD method from SDK\n\ndataitem = dh.new_dataitem(project=\"my-project\",\n                           name=\"my-dataitem\",\n                           kind=\"table\",\n                           path=\"path-to-some-data\")\n</code></pre> <p>A <code>dataitem</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_dataitem</code></li> <li><code>log_dataitem</code></li> </ul> <p>Read:</p> <ul> <li><code>get_dataitem</code></li> <li><code>get_dataitem_versions</code></li> <li><code>import_dataitem</code></li> <li><code>list_dataitems</code></li> </ul> <p>Update:</p> <ul> <li><code>update_dataitem</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_dataitem</code></li> </ul>"},{"location":"objects/dataitem/crud/#create","title":"Create","text":"<p>You can create a dataitem with the <code>new_dataitem()</code> or with <code>log_dataitem()</code> method. The <code>kwargs</code> parameters are determined by the kind of the object, and are described in the kinds section. The <code>kwargs</code> parameters are the same for both new and log methods.</p>"},{"location":"objects/dataitem/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"objects/dataitem/crud/#digitalhub.entities.dataitem.crud.new_dataitem","title":"<code>new_dataitem</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>embedded</code> <code>bool</code> <p>Flag to determine if object spec must be embedded in project spec.</p> <code>False</code> <code>path</code> <code>str</code> <p>Object path on local file system or remote storage. It is also the destination path of upload() method.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dataitem</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_dataitem(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-dataitem\",\n&gt;&gt;&gt;                    kind=\"dataitem\",\n&gt;&gt;&gt;                    path=\"s3://my-bucket/my-key\")\n</code></pre>"},{"location":"objects/dataitem/crud/#log","title":"Log","text":"<p>This function create a new entity into the backend and also upload a local file into a dataitem store (eg. S3).</p>"},{"location":"objects/dataitem/crud/#digitalhub.entities.dataitem.crud.log_dataitem","title":"<code>log_dataitem</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>source</code> <code>str</code> <p>Dataitem location on local path.</p> <code>None</code> <code>data</code> <code>Any</code> <p>Dataframe to log. Alternative to source.</p> <code>None</code> <code>path</code> <code>str</code> <p>Destination path of the dataitem. If not provided, it's generated.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>New dataitem spec parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dataitem</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = log_dataitem(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-dataitem\",\n&gt;&gt;&gt;                    kind=\"table\",\n&gt;&gt;&gt;                    data=df)\n</code></pre>"},{"location":"objects/dataitem/crud/#read","title":"Read","text":"<p>To read dataitems you can use the <code>get_dataitem()</code>, <code>get_dataitem_versions()</code>, <code>list_dataitems()</code> or <code>import_dataitem()</code> functions.</p>"},{"location":"objects/dataitem/crud/#get","title":"Get","text":"<p>This function searches for a single dataitem into the backend. If you want to collect a dataitem from the backend using <code>get_dataitem()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-name&gt;:&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity name as <code>identifier</code>, the project name as <code>project</code> and the entity id as <code>entity_id</code> parameters. If you do not specify the entity id, you will get the latest version.</li> </ul>"},{"location":"objects/dataitem/crud/#digitalhub.entities.dataitem.crud.get_dataitem","title":"<code>get_dataitem</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dataitem</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_dataitem(\"store://my-dataitem-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_dataitem(\"my-dataitem-name\"\n&gt;&gt;&gt;                    project=\"my-project\",\n&gt;&gt;&gt;                    entity_id=\"my-dataitem-id\")\n</code></pre>"},{"location":"objects/dataitem/crud/#get-versions","title":"Get versions","text":"<p>This function returns all the versions of a dataitem from the backend.</p>"},{"location":"objects/dataitem/crud/#digitalhub.entities.dataitem.crud.get_dataitem_versions","title":"<code>get_dataitem_versions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Dataitem]</code> <p>List of object instances.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; objs = get_dataitem_versions(\"store://my-dataitem-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; objs = get_dataitem_versions(\"my-dataitem-name\",\n&gt;&gt;&gt;                              project=\"my-project\")\n</code></pre>"},{"location":"objects/dataitem/crud/#list","title":"List","text":"<p>This function returns all the latest dataitems from the backend related to a project.</p>"},{"location":"objects/dataitem/crud/#digitalhub.entities.dataitem.crud.list_dataitems","title":"<code>list_dataitems</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Dataitem]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_dataitems(project=\"my-project\")\n</code></pre>"},{"location":"objects/dataitem/crud/#import","title":"Import","text":"<p>This function load the dataitem from a local yaml file descriptor.</p>"},{"location":"objects/dataitem/crud/#digitalhub.entities.dataitem.crud.import_dataitem","title":"<code>import_dataitem</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Dataitem</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_dataitem(\"my-dataitem.yaml\")\n</code></pre>"},{"location":"objects/dataitem/crud/#update","title":"Update","text":"<p>To update a dataitem you can use the <code>update_dataitem()</code> method.</p>"},{"location":"objects/dataitem/crud/#digitalhub.entities.dataitem.crud.update_dataitem","title":"<code>update_dataitem</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Dataitem</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Dataitem</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_dataitem(obj)\n</code></pre>"},{"location":"objects/dataitem/crud/#delete","title":"Delete","text":"<p>To delete a dataitem you can use the <code>delete_dataitem()</code> method.</p>"},{"location":"objects/dataitem/crud/#digitalhub.entities.dataitem.crud.delete_dataitem","title":"<code>delete_dataitem</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>delete_all_versions</code> <code>bool</code> <p>Delete all versions of the named entity. If True, use entity name instead of entity key as identifier.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <p>If delete_all_versions is False:</p> <pre><code>&gt;&gt;&gt; obj = delete_dataitem(\"store://my-dataitem-key\")\n</code></pre> <p>Otherwise:</p> <pre><code>&gt;&gt;&gt; obj = delete_dataitem(\"my-dataitem-name\",\n&gt;&gt;&gt;                       project=\"my-project\",\n&gt;&gt;&gt;                       delete_all_versions=True)\n</code></pre>"},{"location":"objects/dataitem/entity/","title":"Dataitems","text":"<p>Dataitems are data objects which contain a dataset of a given type, stored in an addressable repository and accessible to every component able to understand the type (kind) and the source (path). Do note that data items could be stored in the artifact store as artifacts, but that is not a dependency or a requirement.</p>"},{"location":"objects/dataitem/entity/#managing-dataitems-with-sdk","title":"Managing dataitems with SDK","text":"<p>Dataitems can be created and managed as entities with the SDK CRUD methods. This can be done directly from the package or through the <code>Project</code> object. To manage dataitems, you need to have at least <code>digitalhub[data]</code> layer installed.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete dataitems.</li> <li>In the methods section, we will see what can be done with the <code>Dataitem</code> object.</li> <li>In the kinds section, we will see what kinds are supported.</li> </ol>"},{"location":"objects/dataitem/kinds/","title":"Dataitem kinds","text":"<p>At the moment, we support the following kinds:</p> <ul> <li><code>table</code>: represents a table</li> </ul> <p>For each different kind, the <code>Dataitem</code> object has its own subclass with different <code>spec</code> and <code>status</code> attributes.</p>"},{"location":"objects/dataitem/kinds/#table","title":"Table","text":"<p>The <code>table</code> kind indicates that the dataitem is a generic table. It's usefull if you intend to manipulate the dataitem as a dataframe, infact it has some methods to do so. The default dataframe framework we use to represent a table as dataframe is <code>pandas</code>.</p>"},{"location":"objects/dataitem/kinds/#table-spec-parameters","title":"Table spec parameters","text":"Parameter Type Description Default <code>path</code> str Path of the dataitem, can be a local path or a remote path, a single filepath or a directory/partition. required <code>schema</code> TableSchema Frictionless table schema <code>None</code>"},{"location":"objects/dataitem/kinds/#table-methods","title":"Table methods","text":"<p>The <code>table</code> kind has the following additional methods:</p>"},{"location":"objects/dataitem/kinds/#digitalhub.entities.dataitem.table.entity.DataitemTable.as_df","title":"<code>as_df</code>","text":"<p>Read dataitem file (csv or parquet) as a DataFrame from spec.path. If the dataitem is not local, it will be downloaded to a temporary folder named tmp_dir in the project context folder. If clean_tmp_path is True, the temporary folder will be deleted after the method is executed. It's possible to pass additional arguments to the this function. These keyword arguments will be passed to the DataFrame reader function such as pandas's read_csv or read_parquet.</p> <p>Parameters:</p> Name Type Description Default <code>file_format</code> <code>str</code> <p>Format of the file. (Supported csv and parquet).</p> <code>None</code> <code>engine</code> <code>str</code> <p>Dataframe framework, by default pandas.</p> <code>None</code> <code>clean_tmp_path</code> <code>bool</code> <p>If True, the temporary folder will be deleted.</p> <code>True</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments passed to the read_df function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Any</code> <p>DataFrame.</p>"},{"location":"objects/dataitem/kinds/#digitalhub.entities.dataitem.table.entity.DataitemTable.write_df","title":"<code>write_df</code>","text":"<p>Write DataFrame as parquet/csv/table into dataitem spec.path. keyword arguments will be passed to the DataFrame reader function such as pandas's to_csv or to_parquet.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>Any</code> <p>DataFrame to write.</p> required <code>extension</code> <code>str</code> <p>Extension of the file.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments passed to the write_df function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>Path to the written dataframe.</p>"},{"location":"objects/dataitem/methods/","title":"Dataitem object","text":"<p>The <code>Dataitem</code> object comes with three sets of methods: CRUD methods, I/O methods and kind specific methods.</p>"},{"location":"objects/dataitem/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"objects/dataitem/methods/#digitalhub.entities.dataitem._base.entity.Dataitem.save","title":"<code>save</code>","text":"<p>Save entity into backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>MaterialEntity</code> <p>Entity saved.</p>"},{"location":"objects/dataitem/methods/#digitalhub.entities.dataitem._base.entity.Dataitem.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"objects/dataitem/methods/#digitalhub.entities.dataitem._base.entity.Dataitem.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"objects/dataitem/methods/#io-methods","title":"I/O methods","text":"<p>I/O methods are used to handle objects as files.</p> <ul> <li><code>as_file()</code>: Dowloads the dataitem into a local temporary destination</li> <li><code>download()</code>: Downloads the dataitem into a specified path</li> <li><code>upload()</code>: Uploads the dataitem to dataitem spec path</li> </ul>"},{"location":"objects/dataitem/methods/#digitalhub.entities.dataitem._base.entity.Dataitem.as_file","title":"<code>as_file</code>","text":"<p>Get object as file(s). It downloads the object from storage in a temporary folder and returns the list of downloaded files paths.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of file paths.</p>"},{"location":"objects/dataitem/methods/#digitalhub.entities.dataitem._base.entity.Dataitem.download","title":"<code>download</code>","text":"<p>This function downloads one or more file from storage on local machine. It looks inside the object's status for the file(s) path under files attribute. If it does not find it, it will try to download what it can from spec.path. The files are downloaded into a destination folder. If the destination is not specified, it will set by default under the context path as '/', e.g. './dataitem'. The overwrite flag allows to overwrite existing file(s) in the destination folder. <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>str</code> <p>Destination path as filename or directory.</p> <code>None</code> <code>overwrite</code> <code>bool</code> <p>Specify if overwrite existing file(s). If file(s) already exist and overwrite is False, it will raise an error.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Downloaded path.</p> <p>Examples:</p> <p>Download a single file:</p> <pre><code>&gt;&gt;&gt; entity.status.files[0]\n{\n    \"path \": \"data.csv\",\n    \"name \": \"data.csv\",\n    \"content_type \": \"text/csv;charset=utf-8 \"\n}\n&gt;&gt;&gt; path = entity.download()\n&gt;&gt;&gt; print(path)\ndataitem/data.csv\n</code></pre>"},{"location":"objects/dataitem/methods/#digitalhub.entities.dataitem._base.entity.Dataitem.upload","title":"<code>upload</code>","text":"<p>Upload object from given local path to spec path destination. Source must be a local path. If the path is a folder, destination path (object's spec path) must be a folder or a partition ending with '/' (s3).</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str | list[str]</code> <p>Local filepath, directory or list of filepaths.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <p>Upload a single file:</p> <pre><code>&gt;&gt;&gt; entity.spec.path = 's3://bucket/data.csv'\n&gt;&gt;&gt; entity.upload('./data.csv')\n</code></pre> <p>Upload a folder:</p> <pre><code>&gt;&gt;&gt; entity.spec.path = 's3://bucket/data/'\n&gt;&gt;&gt; entity.upload('./data')\n</code></pre>"},{"location":"objects/dataitem/methods/#kind-specific-methods","title":"Kind specific methods","text":"<p>Kind specific methods are used to express potential behaviors of different object kinds. See the kinds section for more information.</p>"},{"location":"objects/function/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete functions. There are two ways to use them. The first is through the SDK and the second is through the <code>Project</code> object. The syntax is the same for all CRUD methods. If you want to manage functions from the project, you can use the <code>Project</code> object and avoid to specify the <code>project</code> parameter. In this last case, you need to specify every parameter as keyword argument. In any case, you need to first import the SDK and instantiate a <code>Project</code> object that will be the context in which you can manage entities.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n\n# Use CRUD method on project\n\nfunction = project.new_function(name=\"my-function\",\n                                kind=\"python\",\n                                code_src=\"function.py\",\n                                handler=\"function-handler\")\n\n# Use CRUD method from SDK\n\nfunction = dh.new_function(project=\"my-project\",\n                           name=\"my-function\",\n                           kind=\"python\",\n                           code_src=\"function.py\",\n                           handler=\"function-handler\")\n</code></pre> <p>A <code>function</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_function</code></li> </ul> <p>Read:</p> <ul> <li><code>get_function</code></li> <li><code>get_function_versions</code></li> <li><code>import_function</code></li> <li><code>list_functions</code></li> </ul> <p>Update:</p> <ul> <li><code>update_function</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_function</code></li> </ul>"},{"location":"objects/function/crud/#create","title":"Create","text":"<p>You can create a function with the <code>new_function()</code>. The <code>kwargs</code> parameters are determined by the kind of the object, and are described in the kinds section.</p>"},{"location":"objects/function/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"objects/function/crud/#digitalhub.entities.function.crud.new_function","title":"<code>new_function</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>embedded</code> <code>bool</code> <p>Flag to determine if object spec must be embedded in project spec.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Function</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_function(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-function\",\n&gt;&gt;&gt;                    kind=\"python\",\n&gt;&gt;&gt;                    code_src=\"function.py\",\n&gt;&gt;&gt;                    handler=\"function-handler\")\n</code></pre>"},{"location":"objects/function/crud/#read","title":"Read","text":"<p>To read functions you can use the <code>get_function()</code>, <code>get_function_versions()</code>, <code>list_functions()</code> or <code>import_function()</code> functions.</p>"},{"location":"objects/function/crud/#get","title":"Get","text":"<p>This function searches for a single function into the backend. If you want to collect a function from the backend using <code>get_function()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-name&gt;:&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity name as <code>identifier</code>, the project name as <code>project</code> and the entity id as <code>entity_id</code> parameters. If you do not specify the entity id, you will get the latest version.</li> </ul>"},{"location":"objects/function/crud/#digitalhub.entities.function.crud.get_function","title":"<code>get_function</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Function</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_function(\"store://my-function-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_function(\"my-function-name\"\n&gt;&gt;&gt;                    project=\"my-project\",\n&gt;&gt;&gt;                    entity_id=\"my-function-id\")\n</code></pre>"},{"location":"objects/function/crud/#get-versions","title":"Get versions","text":"<p>This function returns all the versions of a function from the backend.</p>"},{"location":"objects/function/crud/#digitalhub.entities.function.crud.get_function_versions","title":"<code>get_function_versions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Function]</code> <p>List of object instances.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_function_versions(\"store://my-function-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_function_versions(\"my-function-name\"\n&gt;&gt;&gt;                             project=\"my-project\")\n</code></pre>"},{"location":"objects/function/crud/#list","title":"List","text":"<p>This function returns all the latest functions from the backend related to a project.</p>"},{"location":"objects/function/crud/#digitalhub.entities.function.crud.list_functions","title":"<code>list_functions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Function]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_functions(project=\"my-project\")\n</code></pre>"},{"location":"objects/function/crud/#import","title":"Import","text":"<p>This function load the function from a local yaml file descriptor.</p>"},{"location":"objects/function/crud/#digitalhub.entities.function.crud.import_function","title":"<code>import_function</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Function</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_function(\"my-function.yaml\")\n</code></pre>"},{"location":"objects/function/crud/#update","title":"Update","text":"<p>To update a function you can use the <code>update_function()</code> method.</p>"},{"location":"objects/function/crud/#digitalhub.entities.function.crud.update_function","title":"<code>update_function</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Function</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Function</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_function(obj)\n</code></pre>"},{"location":"objects/function/crud/#delete","title":"Delete","text":"<p>To delete a function you can use the <code>delete_function()</code> method.</p>"},{"location":"objects/function/crud/#digitalhub.entities.function.crud.delete_function","title":"<code>delete_function</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>delete_all_versions</code> <code>bool</code> <p>Delete all versions of the named entity. If True, use entity name instead of entity key as identifier.</p> <code>False</code> <code>cascade</code> <code>bool</code> <p>Cascade delete.</p> <code>True</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <p>If delete_all_versions is False:</p> <pre><code>&gt;&gt;&gt; obj = delete_function(\"store://my-function-key\")\n</code></pre> <p>Otherwise:</p> <pre><code>&gt;&gt;&gt; obj = delete_function(\"function-name\",\n&gt;&gt;&gt;                       project=\"my-project\",\n&gt;&gt;&gt;                       delete_all_versions=True)\n</code></pre>"},{"location":"objects/function/entity/","title":"Function","text":"<p>Functions are the logical description of something that the platform may execute and track for you. A function may represent code to run as a job, an ML function inference to be used as batch procedure or as a service, a data validation, etc.</p>"},{"location":"objects/function/entity/#managing-functions-with-sdk","title":"Managing functions with SDK","text":"<p>Functions can be created and managed as entities with the SDK CRUD methods. This can be done directly from the package or through the <code>Project</code> object. To manage functions, you need to have at least <code>digitalhub[core]</code> layer installed.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete functions.</li> <li>In the methods section, we will see what can be done with the <code>Function</code> object.</li> <li>In the kinds section, we will see what kinds are supported.</li> </ol>"},{"location":"objects/function/kinds/","title":"Function kinds","text":"<p>At the moment, we support the following kinds and the related runtime:</p> <ul> <li><code>python</code></li> <li><code>dbt</code></li> <li><code>container</code></li> <li><code>modelserve</code></li> </ul> <p>For each different kind, the <code>Function</code> object has its own subclass with different <code>spec</code> and <code>status</code> attributes.</p> <p>Please see the runtime documentation for more information on the related to the various <code>spec</code> arguments.</p>"},{"location":"objects/function/methods/","title":"Function object","text":"<p>The <code>Function</code> object comes with three sets of methods: CRUD methods, one run method and (eventual) kind specific methods.</p>"},{"location":"objects/function/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"objects/function/methods/#digitalhub.entities.function._base.entity.Function.save","title":"<code>save</code>","text":"<p>Save or update the entity into the backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity saved.</p>"},{"location":"objects/function/methods/#digitalhub.entities.function._base.entity.Function.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"objects/function/methods/#digitalhub.entities.function._base.entity.Function.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"objects/function/methods/#run-method","title":"Run method","text":"<p>The <code>run()</code> method is used to execute the function.</p>"},{"location":"objects/function/methods/#digitalhub.entities.function._base.entity.Function.run","title":"<code>run</code>","text":"<p>Run function. This method creates a new run and executes it.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>str</code> <p>Action to execute.</p> required <code>local_execution</code> <code>bool</code> <p>Flag to determine if object has local execution.</p> <code>False</code> <code>wait</code> <code>bool</code> <p>Flag to wait for execution.</p> <code>False</code> <code>log_info</code> <code>bool</code> <p>Flag to log information while waiting.</p> <code>True</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments passed to Run builder.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Run</code> <p>Run instance.</p>"},{"location":"objects/function/methods/#kind-specific-methods","title":"Kind specific methods","text":"<p>Kind specific methods are used to express potential behaviors of different object kinds. See the kinds section for more information.</p>"},{"location":"objects/model/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete models. There are two ways to use them. The first is through the SDK and the second is through the <code>Project</code> object. The syntax is the same for all CRUD methods. If you want to manage models from the project, you can use the <code>Project</code> object and avoid to specify the <code>project</code> parameter. In this last case, you need to specify every parameter as keyword argument. In any case, you need to first import the SDK and instantiate a <code>Project</code> object that will be the context in which you can manage entities.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n\n# Use CRUD method on project\n\nmodel = project.new_model(name=\"my-model\",\n                          kind=\"model\",\n                          path=\"path-to-some-model\")\n\n# Use CRUD method from SDK\n\nmodel = dh.new_model(project=\"my-project\",\n                     name=\"my-model\",\n                     kind=\"model\",\n                     path=\"path-to-some-model\")\n</code></pre> <p>A <code>model</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_model</code></li> <li><code>log_model</code></li> </ul> <p>Read:</p> <ul> <li><code>get_model</code></li> <li><code>get_model_versions</code></li> <li><code>import_model</code></li> <li><code>list_models</code></li> </ul> <p>Update:</p> <ul> <li><code>update_model</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_model</code></li> </ul>"},{"location":"objects/model/crud/#create","title":"Create","text":"<p>You can create a model with the <code>new_model()</code> or with <code>log_model()</code> method. The <code>kwargs</code> parameters are determined by the kind of the object, and are described in the kinds section. The <code>kwargs</code> parameters are the same for both new and log methods.</p>"},{"location":"objects/model/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"objects/model/crud/#digitalhub.entities.model.crud.new_model","title":"<code>new_model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>embedded</code> <code>bool</code> <p>Flag to determine if object spec must be embedded in project spec.</p> <code>False</code> <code>path</code> <code>str</code> <p>Object path on local file system or remote storage. It is also the destination path of upload() method.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Model</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_model(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-model\",\n&gt;&gt;&gt;                    kind=\"model\",\n&gt;&gt;&gt;                    path=\"s3://my-bucket/my-key\")\n</code></pre>"},{"location":"objects/model/crud/#log","title":"Log","text":"<p>This function create a new entity into the backend and also upload a local file into a model store (eg. S3).</p>"},{"location":"objects/model/crud/#digitalhub.entities.model.crud.log_model","title":"<code>log_model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>source</code> <code>str</code> <p>Model location on local path.</p> required <code>path</code> <code>str</code> <p>Destination path of the model. If not provided, it's generated.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>New model spec parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Model</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = log_model(project=\"my-project\",\n&gt;&gt;&gt;                 name=\"my-model\",\n&gt;&gt;&gt;                 kind=\"model\",\n&gt;&gt;&gt;                 source=\"./local-path\")\n</code></pre>"},{"location":"objects/model/crud/#read","title":"Read","text":"<p>To read models you can use the <code>get_model()</code>, <code>get_model_versions()</code>, <code>list_models()</code> or <code>import_model()</code> functions.</p>"},{"location":"objects/model/crud/#get","title":"Get","text":"<p>This function searches for a single model into the backend. If you want to collect a model from the backend using <code>get_model()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-name&gt;:&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity name as <code>identifier</code>, the project name as <code>project</code> and the entity id as <code>entity_id</code> parameters. If you do not specify the entity id, you will get the latest version.</li> </ul>"},{"location":"objects/model/crud/#digitalhub.entities.model.crud.get_model","title":"<code>get_model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Model</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_model(\"store://my-model-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_model(\"my-model-name\"\n&gt;&gt;&gt;                 project=\"my-project\",\n&gt;&gt;&gt;                 entity_id=\"my-model-id\")\n</code></pre>"},{"location":"objects/model/crud/#get-versions","title":"Get versions","text":"<p>This function returns all the versions of a model from the backend.</p>"},{"location":"objects/model/crud/#digitalhub.entities.model.crud.get_model_versions","title":"<code>get_model_versions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Model]</code> <p>List of object instances.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; objs = get_model_versions(\"store://my-model-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; objs = get_model_versions(\"my-model-name\",\n&gt;&gt;&gt;                           project=\"my-project\")\n</code></pre>"},{"location":"objects/model/crud/#list","title":"List","text":"<p>This function returns all the latest models from the backend related to a project.</p>"},{"location":"objects/model/crud/#digitalhub.entities.model.crud.list_models","title":"<code>list_models</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Model]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_models(project=\"my-project\")\n</code></pre>"},{"location":"objects/model/crud/#import","title":"Import","text":"<p>This function load the model from a local yaml file descriptor.</p>"},{"location":"objects/model/crud/#digitalhub.entities.model.crud.import_model","title":"<code>import_model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Model</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_model(\"my-model.yaml\")\n</code></pre>"},{"location":"objects/model/crud/#update","title":"Update","text":"<p>To update a model you can use the <code>update_model()</code> method.</p>"},{"location":"objects/model/crud/#digitalhub.entities.model.crud.update_model","title":"<code>update_model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Model</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Model</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = get_model(\"store://my-model-key\")\n</code></pre>"},{"location":"objects/model/crud/#delete","title":"Delete","text":"<p>To delete a model you can use the <code>delete_model()</code> method.</p>"},{"location":"objects/model/crud/#digitalhub.entities.model.crud.delete_model","title":"<code>delete_model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>delete_all_versions</code> <code>bool</code> <p>Delete all versions of the named entity. If True, use entity name instead of entity key as identifier.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <p>If delete_all_versions is False:</p> <pre><code>&gt;&gt;&gt; obj = delete_model(\"store://my-model-key\")\n</code></pre> <p>Otherwise:</p> <pre><code>&gt;&gt;&gt; obj = delete_model(\"my-model-name\",\n&gt;&gt;&gt;                    project=\"my-project\",\n&gt;&gt;&gt;                    delete_all_versions=True)\n</code></pre>"},{"location":"objects/model/entity/","title":"Models","text":"<p>Models are the representation of machine learning models stored as files in the artifact store.</p>"},{"location":"objects/model/entity/#managing-models-with-sdk","title":"Managing models with SDK","text":"<p>Models can be created and managed as entities with the SDK CRUD methods. This can be done directly from the package or through the <code>Project</code> object. To manage models, you need to have at least <code>digitalhub[ml]</code> layer installed.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete models.</li> <li>In the methods section, we will see what can be done with the <code>Model</code> object.</li> <li>In the kinds section, we will see what kinds are supported.</li> </ol>"},{"location":"objects/model/kinds/","title":"Model kinds","text":"<p>At the moment, we support the following kinds:</p> <ul> <li><code>model</code>: represents a generic ML model</li> <li><code>mlflow</code>: represents a MLflow model</li> <li><code>sklearn</code>: represents a scikit-learn model</li> <li><code>huggingface</code>: represents a HuggingFace model</li> </ul> <p>For each different kind, the <code>Model</code> object has its own subclass with different <code>spec</code> and <code>status</code> attributes.</p>"},{"location":"objects/model/kinds/#model","title":"Model","text":"<p>The <code>model</code> kind indicates that the model is a generic ML model. It's usefull to represent a generic ML model as a <code>Model</code> object.</p>"},{"location":"objects/model/kinds/#model-spec-parameters","title":"Model spec parameters","text":"Parameter Type Description Default <code>path</code> str Path of the model, can be a local path or a remote path, a single filepath or a directory/partition. required <code>framework</code> str Model framework (e.g. 'pytorch'). <code>None</code> <code>algorithm</code> str Model algorithm (e.g. 'resnet'). <code>None</code> <code>base_model</code> str Base model. <code>None</code> <code>parameters</code> dict Model parameters. <code>None</code> <code>metrics</code> dict Model metrics. <code>None</code>"},{"location":"objects/model/kinds/#model-methods","title":"Model methods","text":"<p>The <code>model</code> kind has no additional methods.</p>"},{"location":"objects/model/kinds/#mlflow","title":"Mlflow","text":"<p>The <code>mlflow</code> kind indicates that the model is an MLflow model. It's usefull to represent an MLflow model as a <code>Model</code> object.</p>"},{"location":"objects/model/kinds/#mlflow-spec-parameters","title":"Mlflow spec parameters","text":"Parameter Type Description Default <code>path</code> str Path of the model, can be a local path or a remote path, a single filepath or a directory/partition. required <code>framework</code> str Model framework (e.g. 'pytorch'). <code>None</code> <code>algorithm</code> str Model algorithm (e.g. 'resnet'). <code>None</code> <code>base_model</code> str Base model. <code>None</code> <code>parameters</code> dict Model parameters. <code>None</code> <code>metrics</code> dict Model metrics. <code>None</code> <code>flavor</code> str Mlflow model flavor. <code>None</code> <code>model_config</code> dict Mlflow model config. <code>None</code> <code>input_datasets</code> list[Dataset] Mlflow input datasets (see below). <code>None</code> <code>signature</code> Signature Mlflow model signature (see below). <code>None</code>"},{"location":"objects/model/kinds/#dataset","title":"Dataset","text":"Parameter Type Description Default <code>name</code> str Dataset name. <code>None</code> <code>digest</code> str Dataset digest. <code>None</code> <code>profile</code> str Dataset profile. <code>None</code> <code>schema</code> str Dataset schema. <code>None</code> <code>source</code> str Dataset source. <code>None</code> <code>source_type</code> str Dataset source type. <code>None</code>"},{"location":"objects/model/kinds/#signature","title":"Signature","text":"Parameter Type Description Default <code>inputs</code> str Signature inputs. <code>None</code> <code>outputs</code> str Signature outputs. <code>None</code> <code>parameters</code> str Signature parameters. <code>None</code>"},{"location":"objects/model/kinds/#mlflow-methods","title":"Mlflow methods","text":"<p>The <code>mlflow</code> kind has no additional methods.</p>"},{"location":"objects/model/kinds/#sklearn","title":"Sklearn","text":"<p>The <code>sklearn</code> kind indicates that the model is an Sklearn model. It's usefull to represent an Sklearn model as a <code>Model</code> object.</p>"},{"location":"objects/model/kinds/#sklearn-spec-parameters","title":"Sklearn spec parameters","text":"Parameter Type Description Default <code>path</code> str Path of the model, can be a local path or a remote path, a single filepath or a directory/partition. required <code>framework</code> str Model framework (e.g. 'pytorch'). <code>None</code> <code>algorithm</code> str Model algorithm (e.g. 'resnet'). <code>None</code> <code>base_model</code> str Base model. <code>None</code> <code>parameters</code> dict Model parameters. <code>None</code> <code>metrics</code> dict Model metrics. <code>None</code>"},{"location":"objects/model/kinds/#sklearn-methods","title":"Sklearn methods","text":"<p>The <code>sklearn</code> kind has no additional methods.</p>"},{"location":"objects/model/kinds/#huggingface","title":"Huggingface","text":"<p>The <code>huggingface</code> kind indicates that the model is an Huggingface model. It's usefull to represent an Huggingface model as a <code>Model</code> object.</p>"},{"location":"objects/model/kinds/#huggingface-spec-parameters","title":"Huggingface spec parameters","text":"Parameter Type Description Default <code>path</code> str Path of the model, can be a local path or a remote path, a single filepath or a directory/partition. required <code>framework</code> str Model framework (e.g. 'pytorch'). <code>None</code> <code>algorithm</code> str Model algorithm (e.g. 'resnet'). <code>None</code> <code>base_model</code> str Base model. <code>None</code> <code>parameters</code> dict Model parameters. <code>None</code> <code>metrics</code> dict Model metrics. <code>None</code> <code>model_id</code> str Huggingface model id. If not specified, the model is loaded from the model path <code>None</code> <code>model_revision</code> str Huggingface model revision. <code>None</code>"},{"location":"objects/model/kinds/#huggingface-methods","title":"Huggingface methods","text":"<p>The <code>huggingface</code> kind has no additional methods.</p>"},{"location":"objects/model/methods/","title":"Model object","text":"<p>The <code>Model</code> object comes with three sets of methods: CRUD methods, I/O methods and kind specific methods.</p>"},{"location":"objects/model/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"objects/model/methods/#digitalhub.entities.model._base.entity.Model.save","title":"<code>save</code>","text":"<p>Save entity into backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>Model</code> <p>Entity saved.</p>"},{"location":"objects/model/methods/#digitalhub.entities.model._base.entity.Model.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"objects/model/methods/#digitalhub.entities.model._base.entity.Model.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"objects/model/methods/#io-methods","title":"I/O methods","text":"<p>I/O methods are used to handle objects as files.</p> <ul> <li><code>as_file()</code>: Dowloads the model into a local temporary destination</li> <li><code>download()</code>: Downloads the model into a specified path</li> <li><code>upload()</code>: Uploads the model to model spec path</li> </ul>"},{"location":"objects/model/methods/#digitalhub.entities.model._base.entity.Model.as_file","title":"<code>as_file</code>","text":"<p>Get object as file(s). It downloads the object from storage in a temporary folder and returns the list of downloaded files paths.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of file paths.</p>"},{"location":"objects/model/methods/#digitalhub.entities.model._base.entity.Model.download","title":"<code>download</code>","text":"<p>This function downloads one or more file from storage on local machine. It looks inside the object's status for the file(s) path under files attribute. If it does not find it, it will try to download what it can from spec.path. The files are downloaded into a destination folder. If the destination is not specified, it will set by default under the context path as '/', e.g. './dataitem'. The overwrite flag allows to overwrite existing file(s) in the destination folder. <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>str</code> <p>Destination path as filename or directory.</p> <code>None</code> <code>overwrite</code> <code>bool</code> <p>Specify if overwrite existing file(s). If file(s) already exist and overwrite is False, it will raise an error.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Downloaded path.</p> <p>Examples:</p> <p>Download a single file:</p> <pre><code>&gt;&gt;&gt; entity.status.files[0]\n{\n    \"path \": \"data.csv\",\n    \"name \": \"data.csv\",\n    \"content_type \": \"text/csv;charset=utf-8 \"\n}\n&gt;&gt;&gt; path = entity.download()\n&gt;&gt;&gt; print(path)\ndataitem/data.csv\n</code></pre>"},{"location":"objects/model/methods/#digitalhub.entities.model._base.entity.Model.upload","title":"<code>upload</code>","text":"<p>Upload object from given local path to spec path destination. Source must be a local path. If the path is a folder, destination path (object's spec path) must be a folder or a partition ending with '/' (s3).</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str | list[str]</code> <p>Local filepath, directory or list of filepaths.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <p>Upload a single file:</p> <pre><code>&gt;&gt;&gt; entity.spec.path = 's3://bucket/data.csv'\n&gt;&gt;&gt; entity.upload('./data.csv')\n</code></pre> <p>Upload a folder:</p> <pre><code>&gt;&gt;&gt; entity.spec.path = 's3://bucket/data/'\n&gt;&gt;&gt; entity.upload('./data')\n</code></pre>"},{"location":"objects/model/methods/#model-specific-methods","title":"Model specific methods","text":"<p>There are several generic model methods on the <code>Model</code> object.</p> <ul> <li><code>log_metric</code>: Log a metric in the model.</li> </ul>"},{"location":"objects/model/methods/#digitalhub.entities.model._base.entity.Model.log_metric","title":"<code>log_metric</code>","text":"<p>Log metric into entity status. A metric is named by a key and value (single number or list of numbers). The metric by default is put in a list or appended to an existing list. If single_value is True, the value will be a single number.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Key of the metric.</p> required <code>value</code> <code>list[float | int] | float | int</code> <p>Value of the metric.</p> required <code>overwrite</code> <code>bool</code> <p>If True, overwrite existing metric.</p> <code>False</code> <code>single_value</code> <code>bool</code> <p>If True, value is a single value.</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <p>Log a new value in a list</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"loss\", 0.002)\n</code></pre> <p>Append a new value in a list</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"loss\", 0.0019)\n</code></pre> <p>Log a list of values and append them to existing metric:</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"loss\", [0.0018, 0.0015])\n</code></pre> <p>Log a single value (not represented as list):</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"accuracy\", 0.9, single_value=True)\n</code></pre> <p>Log a list of values and overwrite existing metric:</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"accuracy\", [0.8, 0.9], overwrite=True)\n</code></pre>"},{"location":"objects/model/methods/#kind-specific-methods","title":"Kind specific methods","text":"<p>Kind specific methods are used to express potential behaviors of different object kinds. See the kinds section for more information.</p>"},{"location":"objects/project/config/","title":"Config","text":"<p>The <code>config</code> parameter can be used to provide a dictionary containing the project configuration like user and password for basic auth or a bearer token.</p>"},{"location":"objects/project/config/#basic-auth","title":"Basic auth","text":"<p>The format of the dictionary for basic auth must be as this:</p> <pre><code>{\n    \"user\": \"user\",\n    \"password\": \"password\"\n}\n</code></pre>"},{"location":"objects/project/config/#oauth-token","title":"OAuth token","text":"<p>The format of the dictionary for bearer token must be as this:</p> <pre><code>{\n    \"client_id\": \"id\",\n    \"access_token\": \"token\",\n    \"refresh_token\": \"token\"\n}\n</code></pre>"},{"location":"objects/project/config/#set-manually-credentials","title":"Set manually credentials","text":"<p>In case you try to get a project without from the backend with invalid credentials, an exception will be raised. Because the backend client is a Singleton object, it will autoconfigure credentials at startup, so the only way to setup proper credentials once it fails to connect is to use the SDK method <code>set_dhcore_env()</code>.</p> <p>Example:</p> <pre><code>dh.set_dhcore_env(\n    endpoint=\"https://some-digitalhub:8080\",\n    access_token=\"token\"\n)\n</code></pre> <p>Note that the <code>set_dhcore_env()</code> method ovverrides the environment variables and (if already instantiated) the credentials attributes of the backend client.</p>"},{"location":"objects/project/config/#digitalhub.client.dhcore.utils.set_dhcore_env","title":"<code>set_dhcore_env</code>","text":"<p>Function to set environment variables for DHCore config. Note that if the environment variable is already set, it will be overwritten.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint of DHCore.</p> <code>None</code> <code>user</code> <code>str</code> <p>The user of DHCore.</p> <code>None</code> <code>password</code> <code>str</code> <p>The password of DHCore.</p> <code>None</code> <code>access_token</code> <code>str</code> <p>The access token of DHCore.</p> <code>None</code> <code>refresh_token</code> <code>str</code> <p>The refresh token of DHCore.</p> <code>None</code> <code>client_id</code> <code>str</code> <p>The client id of DHCore.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code>"},{"location":"objects/project/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete projects.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n</code></pre> <p>A <code>project</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_project</code></li> </ul> <p>Read:</p> <ul> <li><code>get_project</code></li> <li><code>import_project</code></li> <li><code>load_project</code></li> </ul> <p>Read or create:</p> <ul> <li><code>get_or_create_project</code></li> </ul> <p>Update:</p> <ul> <li><code>update_project</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_project</code></li> </ul> <p>For project configuration options, please refer to the Config section, and the Setup section.</p>"},{"location":"objects/project/crud/#create","title":"Create","text":"<p>You can create a project with the <code>new_project()</code> or with <code>log_project()</code> method.</p>"},{"location":"objects/project/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"objects/project/crud/#digitalhub.entities.project.crud.new_project","title":"<code>new_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Object name.</p> required <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>local</code> <code>bool</code> <p>If True, use local backend, if False use DHCore backend. Default to False.</p> <code>False</code> <code>config</code> <code>dict</code> <p>DHCore environment configuration.</p> <code>None</code> <code>context</code> <code>str</code> <p>The context local folder of the project.</p> <code>None</code> <code>setup_kwargs</code> <code>dict</code> <p>Setup keyword arguments passed to setup_project() function.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Project</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_project(\"my-project\")\n</code></pre>"},{"location":"objects/project/crud/#read","title":"Read","text":"<p>To read projects you can use the <code>get_project()</code>, <code>import_project()</code> or <code>load_project()</code>.</p>"},{"location":"objects/project/crud/#get","title":"Get","text":"<p>This function searches for a single project into the backend.</p>"},{"location":"objects/project/crud/#digitalhub.entities.project.crud.get_project","title":"<code>get_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The Project name.</p> required <code>local</code> <code>bool</code> <p>Flag to determine if backend is local.</p> <code>False</code> <code>config</code> <code>dict</code> <p>DHCore environment configuration.</p> <code>None</code> <code>setup_kwargs</code> <code>dict</code> <p>Setup keyword arguments passed to setup_project() function.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Project</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = get_project(\"my-project\")\n</code></pre>"},{"location":"objects/project/crud/#import","title":"Import","text":"<p>This function load the project from a local yaml file descriptor.</p>"},{"location":"objects/project/crud/#digitalhub.entities.project.crud.import_project","title":"<code>import_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <code>local</code> <code>bool</code> <p>Flag to determine if backend is local.</p> <code>False</code> <code>config</code> <code>dict</code> <p>DHCore environment configuration.</p> <code>None</code> <code>setup_kwargs</code> <code>dict</code> <p>Setup keyword arguments passed to setup_project() function.</p> <code>None</code> <p>Returns:</p> Type Description <code>Project</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_project(\"my-project.yaml\")\n</code></pre>"},{"location":"objects/project/crud/#load","title":"Load","text":"<p>This function returns a projects from the backend or from a local file according to the parameter passed to the function. If the parameter is <code>name</code>, the function will try to load the project from the backend. If the parameter is <code>file</code>, the function will try to load the project from the local file.</p>"},{"location":"objects/project/crud/#digitalhub.entities.project.crud.load_project","title":"<code>load_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <code>local</code> <code>bool</code> <p>Flag to determine if backend is local.</p> <code>False</code> <code>config</code> <code>dict</code> <p>DHCore environment configuration.</p> <code>None</code> <code>setup_kwargs</code> <code>dict</code> <p>Setup keyword arguments passed to setup_project() function.</p> <code>None</code> <p>Returns:</p> Type Description <code>Project</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = load_project(\"my-project.yaml\")\n</code></pre>"},{"location":"objects/project/crud/#read-or-create","title":"Read or create","text":"<p>You can read or create a project with the <code>get_or_create_project()</code> method.</p>"},{"location":"objects/project/crud/#digitalhub.entities.project.crud.get_or_create_project","title":"<code>get_or_create_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Project name.</p> required <code>local</code> <code>bool</code> <p>Flag to determine if backend is local.</p> <code>False</code> <code>config</code> <code>dict</code> <p>DHCore environment configuration.</p> <code>None</code> <code>context</code> <code>str</code> <p>Folder where the project will saves its context locally.</p> <code>None</code> <code>setup_kwargs</code> <code>dict</code> <p>Setup keyword arguments passed to setup_project() function.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Project</code> <p>Object instance.</p>"},{"location":"objects/project/crud/#update","title":"Update","text":"<p>To update a project you can use the <code>update_project()</code> method.</p>"},{"location":"objects/project/crud/#digitalhub.entities.project.crud.update_project","title":"<code>update_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Project</code> <p>Object to update.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Project</code> <p>The updated object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_project(obj)\n</code></pre>"},{"location":"objects/project/crud/#delete","title":"Delete","text":"<p>To delete a project you can use the <code>delete_project()</code> method.</p>"},{"location":"objects/project/crud/#digitalhub.entities.project.crud.delete_project","title":"<code>delete_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Project name.</p> required <code>cascade</code> <code>bool</code> <p>Flag to determine if delete is cascading.</p> <code>True</code> <code>clean_context</code> <code>bool</code> <p>Flag to determine if context will be deleted.</p> <code>True</code> <code>local</code> <code>bool</code> <p>Flag to determine if backend is local.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; delete_project(\"my-project\")\n</code></pre>"},{"location":"objects/project/entity/","title":"Project","text":"<p>A <code>project</code> represents a data and AI application and is a container for different entities (code, assets, configuration, ...) that form the application. It is the context in which you can run functions and manage models, data, and artifacts.</p>"},{"location":"objects/project/entity/#managing-projects-with-sdk","title":"Managing projects with SDK","text":"<p>Projects can be created and managed as entities with the SDK CRUD methods. To manage projects, you need to have at least <code>digitalhub[core]</code> layer installed.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete projects.</li> <li>In the methods section, we will see what can be done with the <code>Project</code> object.</li> </ol>"},{"location":"objects/project/methods/","title":"Project methods","text":"<p>The <code>Project</code> object comes with three sets of methods: CRUD methods, entity specific CRUD methods and project specific methods.</p>"},{"location":"objects/project/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"objects/project/methods/#digitalhub.entities.project._base.entity.Project.save","title":"<code>save</code>","text":"<p>Save entity into backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>If True, the object will be updated.</p> <code>False</code> <p>Returns:</p> Type Description <code>Project</code> <p>Entity saved.</p>"},{"location":"objects/project/methods/#digitalhub.entities.project._base.entity.Project.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder. If the objects are not embedded, the objects are exported as a YAML file.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"objects/project/methods/#digitalhub.entities.project._base.entity.Project.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>Project</code> <p>Project object.</p>"},{"location":"objects/project/methods/#entity-crud","title":"Entity CRUD","text":"<p>The project acts as context for other entities as mentioned in the introduction. With a <code>Project</code> object, you can create, read, update and delete these entities. The methods exposed are basically the same as the CRUD entities, the only difference is that on the project object you omit the project name as parameter. The available methods and are:</p> <ul> <li><code>new</code>: create a new entity</li> <li><code>log</code>: create and upload an entity</li> <li><code>get</code>: get an entity from backend</li> <li><code>get_versions</code>: get all version for a named entity</li> <li><code>list</code>: list entities related to the project</li> <li><code>import</code>: import an entity</li> <li><code>update</code>: update an entity</li> <li><code>delete</code>: delete an entity</li> </ul> <p>For more information about the entity methods, see the rekative entity documentation:</p> <ul> <li><code>artifacts</code></li> <li><code>dataitems</code></li> <li><code>models</code></li> <li><code>functions</code></li> <li><code>workflows</code></li> <li><code>runs</code></li> <li><code>secrets</code></li> </ul>"},{"location":"objects/project/methods/#project-specific-methods","title":"Project specific methods","text":"<p>The project object exposes the following methods:</p> <ul> <li><code>run</code>: execute a workflow from the project</li> </ul>"},{"location":"objects/project/methods/#digitalhub.entities.project._base.entity.Project.run","title":"<code>run</code>","text":"<p>Run workflow project.</p> <p>Parameters:</p> Name Type Description Default <code>workflow</code> <code>str</code> <p>Workflow name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments passed to workflow.run().</p> <code>{}</code> <p>Returns:</p> Type Description <code>Run</code> <p>Run instance.</p>"},{"location":"objects/project/setup/","title":"Setup kwargs","text":"<p>The <code>setup_kwargs</code> parameter can be used to provide a dictionary containing the project hook setup arguments. The concept behind this parameter is that at the beginning of the project lifecycle, the project can be configured with an hook script that will be executed when the project is created / got. First of all, the configuration script MUST comply with the following format:</p> <ul> <li>It must be a Python script named <code>setup_project.py</code> inside the project context directory.</li> <li>It must contain an handler (a python function) named <code>setup</code> as entrypoint.</li> <li>The <code>setup</code> function must accept a <code>Project</code> instance as the only positional argument.</li> <li><code>setup_kwargs</code> must be passed as keyword arguments to the <code>setup</code> function.</li> </ul> <p>The project setup will create a <code>.CHECK</code> file at the end of the <code>setup</code> function execution. This sentinel file is used to indicate that the project is set up and new executions will be ready.</p> <p>A use case scenario can be the instantiation of entities used by the user like artifacts or functions.</p> <p>Example:</p> <pre><code>setup_kwargs = {\n    \"some_arg1\": \"arg1\",\n    \"some_arg2\": \"arg2\"\n}\n\n# Setup script\n\ndef setup(project, some_arg1=None, some_arg2=None):\n    # Do something with project and args\n</code></pre>"},{"location":"objects/run/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete runs. There are two ways to use them. The first is through the SDK and the second is through the <code>Project</code> object. The syntax is the same for all CRUD methods. If you want to manage runs from the project, you can use the <code>Project</code> object and avoid to specify the <code>project</code> parameter. In this last case, you need to specify every parameter as keyword argument. In any case, you need to first import the SDK and instantiate a <code>Project</code> object that will be the context in which you can manage entities.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n\n# Use CRUD method on project\n\nrun = project.new_run(kind=\"python+run\",\n                      task=\"task-string\")\n\n# Use CRUD method from SDK\n\nrun = dh.new_run(project=\"my-project\",\n                 kind=\"python+run\",\n                 task=\"task-string\")\n</code></pre> <p>A <code>run</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_run</code></li> </ul> <p>Read:</p> <ul> <li><code>get_run</code></li> <li><code>import_run</code></li> <li><code>list_runs</code></li> </ul> <p>Update:</p> <ul> <li><code>update_run</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_run</code></li> </ul>"},{"location":"objects/run/crud/#create","title":"Create","text":"<p>You can create a run with the <code>new_run()</code>. The <code>kwargs</code> parameters are determined by the kind of the object, and are described in the kinds section.</p>"},{"location":"objects/run/crud/#new","title":"New","text":"<p>This run create a new entity and saves it into the backend.</p>"},{"location":"objects/run/crud/#digitalhub.entities.run.crud.new_run","title":"<code>new_run</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>task</code> <code>str</code> <p>Name of the task associated with the run.</p> <code>None</code> <code>local_execution</code> <code>bool</code> <p>Flag to determine if object has local execution.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Run</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_run(project=\"my-project\",\n&gt;&gt;&gt;               kind=\"python+run\",\n&gt;&gt;&gt;               task=\"task-string\")\n</code></pre>"},{"location":"objects/run/crud/#read","title":"Read","text":"<p>To read runs you can use the <code>get_run()</code>, <code>list_runs()</code> or <code>import_run()</code> runs.</p>"},{"location":"objects/run/crud/#get","title":"Get","text":"<p>This run searches for a single run into the backend. If you want to collect a run from the backend using <code>get_run()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity id as <code>identifier</code>, the project name as <code>project</code>.</li> </ul>"},{"location":"objects/run/crud/#digitalhub.entities.run.crud.get_run","title":"<code>get_run</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity ID.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Run</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_run(\"store://my-run-key\")\n</code></pre> <p>Using entity ID:</p> <pre><code>&gt;&gt;&gt; obj = get_run(\"my-run-id\"\n&gt;&gt;&gt;               project=\"my-project\")\n</code></pre>"},{"location":"objects/run/crud/#list","title":"List","text":"<p>This run returns all the latest runs from the backend related to a project.</p>"},{"location":"objects/run/crud/#digitalhub.entities.run.crud.list_runs","title":"<code>list_runs</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Run]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_runs(project=\"my-project\")\n</code></pre>"},{"location":"objects/run/crud/#import","title":"Import","text":"<p>This run load the run from a local yaml file descriptor.</p>"},{"location":"objects/run/crud/#digitalhub.entities.run.crud.import_run","title":"<code>import_run</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Run</code> <p>Object instance.</p>"},{"location":"objects/run/crud/#update","title":"Update","text":"<p>To update a run you can use the <code>update_run()</code> method.</p>"},{"location":"objects/run/crud/#digitalhub.entities.run.crud.update_run","title":"<code>update_run</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Run</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Run</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_run(obj)\n</code></pre>"},{"location":"objects/run/crud/#delete","title":"Delete","text":"<p>To delete a run you can use the <code>delete_run()</code> method.</p>"},{"location":"objects/run/crud/#digitalhub.entities.run.crud.delete_run","title":"<code>delete_run</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity ID.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = delete_run(\"store://my-run-key\")\n&gt;&gt;&gt; obj = delete_run(\"my-run-id\", project=\"my-project\")\n</code></pre>"},{"location":"objects/run/entity/","title":"Runs","text":"<p>Runs are the representation of the execution of a task through a function.</p>"},{"location":"objects/run/entity/#managing-runs-with-sdk","title":"Managing runs with SDK","text":"<p>Runs are created with a <code>Function</code> or <code>Workflow</code> object through the <code>run</code> method. They can be managed as entities. To manage runs, you need to have at least <code>digitalhub[core]</code> layer installed.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete runs.</li> <li>In the methods section, we will see what can be done with the <code>Run</code> object.</li> <li>In the kinds section, we will see what kinds are supported.</li> </ol>"},{"location":"objects/run/kinds/","title":"Run kinds","text":"<p>At the moment, we support the following kinds and the related runtime:</p> <ul> <li><code>python</code></li> <li><code>dbt</code></li> <li><code>container</code></li> <li><code>modelserve</code></li> <li><code>kfp</code></li> </ul> <p>For each different kind, the <code>Run</code> object has its own subclass with different <code>spec</code> and <code>status</code> attributes.</p> <p>Please see the runtime documentation for more information on the related to the various <code>spec</code> arguments.</p>"},{"location":"objects/run/methods/","title":"Run object","text":"<p>The <code>Run</code> object comes with three sets of methods: CRUD methods, generic run methods and (eventual) kind specific methods.</p>"},{"location":"objects/run/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"objects/run/methods/#digitalhub.entities.run._base.entity.Run.save","title":"<code>save</code>","text":"<p>Save or update the entity into the backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity saved.</p>"},{"location":"objects/run/methods/#digitalhub.entities.run._base.entity.Run.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"objects/run/methods/#digitalhub.entities.run._base.entity.Run.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"objects/run/methods/#run-methods","title":"Run methods","text":"<p>There are several generic run methods on the <code>Run</code> object.</p> <ul> <li><code>wait</code>: Wait for the run to finish.</li> <li><code>stop</code>: Stop the run.</li> <li><code>resume</code>: Resume the run.</li> <li><code>log_metric</code>: Log a metric in the run.</li> </ul>"},{"location":"objects/run/methods/#digitalhub.entities.run._base.entity.Run.wait","title":"<code>wait</code>","text":"<p>Wait for run to finish.</p> <p>Parameters:</p> Name Type Description Default <code>log_info</code> <code>bool</code> <p>If True, log information.</p> <code>True</code> <p>Returns:</p> Type Description <code>Run</code> <p>Run object.</p>"},{"location":"objects/run/methods/#digitalhub.entities.run._base.entity.Run.stop","title":"<code>stop</code>","text":"<p>Stop run.</p> <p>Returns:</p> Type Description <code>None</code>"},{"location":"objects/run/methods/#digitalhub.entities.run._base.entity.Run.resume","title":"<code>resume</code>","text":"<p>Resume run.</p> <p>Returns:</p> Type Description <code>None</code>"},{"location":"objects/run/methods/#digitalhub.entities.run._base.entity.Run.log_metric","title":"<code>log_metric</code>","text":"<p>Log metric into entity status. A metric is named by a key and value (single number or list of numbers). The metric by default is put in a list or appended to an existing list. If single_value is True, the value will be a single number.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Key of the metric.</p> required <code>value</code> <code>list[float | int] | float | int</code> <p>Value of the metric.</p> required <code>overwrite</code> <code>bool</code> <p>If True, overwrite existing metric.</p> <code>False</code> <code>single_value</code> <code>bool</code> <p>If True, value is a single value.</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <p>Log a new value in a list</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"loss\", 0.002)\n</code></pre> <p>Append a new value in a list</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"loss\", 0.0019)\n</code></pre> <p>Log a list of values and append them to existing metric:</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"loss\", [0.0018, 0.0015])\n</code></pre> <p>Log a single value (not represented as list):</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"accuracy\", 0.9, single_value=True)\n</code></pre> <p>Log a list of values and overwrite existing metric:</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"accuracy\", [0.8, 0.9], overwrite=True)\n</code></pre>"},{"location":"objects/run/methods/#kind-specific-methods","title":"Kind specific methods","text":"<p>Kind specific methods are used to express potential behaviors of different object kinds. See the kinds section for more information.</p>"},{"location":"objects/secret/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete secrets. There are two ways to use them. The first is through the SDK and the second is through the <code>Project</code> object. The syntax is the same for all CRUD methods. If you want to manage secrets from the project, you can use the <code>Project</code> object and avoid to specify the <code>project</code> parameter. In this last case, you need to specify every parameter as keyword argument. In any case, you need to first import the SDK and instantiate a <code>Project</code> object that will be the context in which you can manage entities.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n\n# Use CRUD method on project\n\nsecret = project.new_secret(name=\"my-secret\",\n                            secret_value=\"some-value\")\n\n# Use CRUD method from SDK\n\nsecret = dh.new_secret(project=\"my-project\",\n                       name=\"my-secret\",\n                       secret_value=\"some-value\")\n</code></pre> <p>A <code>secret</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_secret</code></li> </ul> <p>Read:</p> <ul> <li><code>get_secret</code></li> <li><code>get_secret_versions</code></li> <li><code>import_secret</code></li> <li><code>list_secrets</code></li> </ul> <p>Update:</p> <ul> <li><code>update_secret</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_secret</code></li> </ul>"},{"location":"objects/secret/crud/#create","title":"Create","text":"<p>You can create a secret with the <code>new_secret()</code>.</p>"},{"location":"objects/secret/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"objects/secret/crud/#digitalhub.entities.secret.crud.new_secret","title":"<code>new_secret</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>embedded</code> <code>bool</code> <p>Flag to determine if object spec must be embedded in project spec.</p> <code>False</code> <code>secret_value</code> <code>str</code> <p>Value of the secret.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Secret</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_secret(project=\"my-project\",\n&gt;&gt;&gt;                  name=\"my-secret\",\n&gt;&gt;&gt;                  secret_value=\"my-secret-value\")\n</code></pre>"},{"location":"objects/secret/crud/#read","title":"Read","text":"<p>To read secrets you can use the <code>get_secret()</code>, <code>get_secret_versions()</code>, <code>list_secrets()</code> or <code>import_secret()</code> functions.</p>"},{"location":"objects/secret/crud/#get","title":"Get","text":"<p>This function searches for a single secret into the backend. If you want to collect a secret from the backend using <code>get_secret()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-name&gt;:&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity name as <code>identifier</code>, the project name as <code>project</code> and the entity id as <code>entity_id</code> parameters. If you do not specify the entity id, you will get the latest version.</li> </ul>"},{"location":"objects/secret/crud/#digitalhub.entities.secret.crud.get_secret","title":"<code>get_secret</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Secret</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_secret(\"store://my-secret-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_secret(\"my-secret-name\"\n&gt;&gt;&gt;                  project=\"my-project\",\n&gt;&gt;&gt;                  entity_id=\"my-secret-id\")\n</code></pre>"},{"location":"objects/secret/crud/#get-versions","title":"Get versions","text":"<p>This function returns all the versions of a secret from the backend.</p>"},{"location":"objects/secret/crud/#digitalhub.entities.secret.crud.get_secret_versions","title":"<code>get_secret_versions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Secret]</code> <p>List of object instances.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; objs = get_secret_versions(\"store://my-secret-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; objs = get_secret_versions(\"my-secret-name\",\n&gt;&gt;&gt;                            project=\"my-project\")\n</code></pre>"},{"location":"objects/secret/crud/#list","title":"List","text":"<p>This function returns all the latest secrets from the backend related to a project.</p>"},{"location":"objects/secret/crud/#digitalhub.entities.secret.crud.list_secrets","title":"<code>list_secrets</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Secret]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_secrets(project=\"my-project\")\n</code></pre>"},{"location":"objects/secret/crud/#import","title":"Import","text":"<p>This function load the secret from a local yaml file descriptor.</p>"},{"location":"objects/secret/crud/#digitalhub.entities.secret.crud.import_secret","title":"<code>import_secret</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Secret</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_secret(\"my-secret.yaml\")\n</code></pre>"},{"location":"objects/secret/crud/#update","title":"Update","text":"<p>To update a secret you can use the <code>update_secret()</code> method.</p>"},{"location":"objects/secret/crud/#digitalhub.entities.secret.crud.update_secret","title":"<code>update_secret</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Secret</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Secret</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_secret(obj)\n</code></pre>"},{"location":"objects/secret/crud/#delete","title":"Delete","text":"<p>To delete a secret you can use the <code>delete_secret()</code> method.</p>"},{"location":"objects/secret/crud/#digitalhub.entities.secret.crud.delete_secret","title":"<code>delete_secret</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>delete_all_versions</code> <code>bool</code> <p>Delete all versions of the named entity. If True, use entity name instead of entity key as identifier.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <p>If delete_all_versions is False:</p> <pre><code>&gt;&gt;&gt; obj = delete_secret(\"store://my-secret-key\")\n</code></pre> <p>Otherwise:</p> <pre><code>&gt;&gt;&gt; obj = delete_secret(\"my-secret-name\"\n&gt;&gt;&gt;                     project=\"my-project\",\n&gt;&gt;&gt;                     delete_all_versions=True)\n</code></pre>"},{"location":"objects/secret/entity/","title":"Secrets","text":"<p>Working with different operations may imply the usage of a sensitive values, such as external API credentials, storage credentials, etc. In order to avoid embedding the credentials in the code of functions, you can explicitly manage credentials as secrets. This operation exploits the underlying secret management subsystem, such as Kubernetes Secret Manager.</p> <p>It is possible to define custom secrets at the level of a single project. The project secrets are managed as any other project-related entities, such as functions, dataitems, etc.</p> <p>At the level of the project the secrets are represented as key-value pairs. The management of secrets is delegated to a secret provider, and currently only Kubernetes Secret Manager is supported. Each project has its own Kubernetes secret, where all the key-value pairs are stored.</p>"},{"location":"objects/secret/entity/#managing-secrets-with-sdk","title":"Managing secrets with SDK","text":"<p>Secrets can be created and managed as entities with the SDK CRUD methods. This can be done directly from the package or through the <code>Project</code> object. To manage secrets, you need to have at least <code>digitalhub[core]</code> layer installed.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete secrets.</li> <li>In the methods section, we will see what can be done with the <code>Secret</code> object.</li> </ol>"},{"location":"objects/secret/methods/","title":"Secret object","text":"<p>The <code>Secret</code> object comes with two sets of methods: CRUD methods and read/write methods.</p>"},{"location":"objects/secret/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"objects/secret/methods/#digitalhub.entities.secret._base.entity.Secret.save","title":"<code>save</code>","text":"<p>Save or update the entity into the backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity saved.</p>"},{"location":"objects/secret/methods/#digitalhub.entities.secret._base.entity.Secret.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"objects/secret/methods/#digitalhub.entities.secret._base.entity.Secret.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"objects/secret/methods/#io-methods","title":"I/O methods","text":"<p>I/O methods are used to handle objects as files.</p> <ul> <li><code>set_secret_value()</code>: Set (update) the secret value</li> <li><code>read_secret_value()</code>: Read the secret value</li> </ul>"},{"location":"objects/secret/methods/#digitalhub.entities.secret._base.entity.Secret.set_secret_value","title":"<code>set_secret_value</code>","text":"<p>Update the secret value with a new one.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>Value of the secret.</p> required <p>Returns:</p> Type Description <code>None</code>"},{"location":"objects/secret/methods/#digitalhub.entities.secret._base.entity.Secret.read_secret_value","title":"<code>read_secret_value</code>","text":"<p>Read the secret value from backend.</p> <p>Returns:</p> Type Description <code>str</code> <p>Value of the secret.</p>"},{"location":"objects/workflow/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete workflows. There are two ways to use them. The first is through the SDK and the second is through the <code>Project</code> object. The syntax is the same for all CRUD methods. If you want to manage workflows from the project, you can use the <code>Project</code> object and avoid to specify the <code>project</code> parameter. In this last case, you need to specify every parameter as keyword argument. In any case, you need to first import the SDK and instantiate a <code>Project</code> object that will be the context in which you can manage entities.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n\n# Use CRUD method on project\n\nworkflow = project.new_workflow(name=\"my-workflow\",\n                                kind=\"kfp\",\n                                code_src=\"pipeline.py\",\n                                handler=\"pipeline-handler\")\n\n# Use CRUD method from SDK\n\nworkflow = dh.new_workflow(project=\"my-project\",\n                           name=\"my-function\",\n                           kind=\"kfp\",\n                           code_src=\"pipeline.py\",\n                           handler=\"pipeline-handler\")\n</code></pre> <p>A <code>workflow</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_workflow</code></li> </ul> <p>Read:</p> <ul> <li><code>get_workflow</code></li> <li><code>get_workflow_versions</code></li> <li><code>import_workflow</code></li> <li><code>list_workflows</code></li> </ul> <p>Update:</p> <ul> <li><code>update_workflow</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_workflow</code></li> </ul>"},{"location":"objects/workflow/crud/#create","title":"Create","text":"<p>You can create a workflow with the <code>new_workflow()</code>. The <code>kwargs</code> parameters are determined by the kind of the object, and are described in the kinds section.</p>"},{"location":"objects/workflow/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"objects/workflow/crud/#digitalhub.entities.workflow.crud.new_workflow","title":"<code>new_workflow</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>embedded</code> <code>bool</code> <p>Flag to determine if object spec must be embedded in project spec.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Workflow</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_function(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-workflow\",\n&gt;&gt;&gt;                    kind=\"kfp\",\n&gt;&gt;&gt;                    code_src=\"pipeline.py\",\n&gt;&gt;&gt;                    handler=\"pipeline-handler\")\n</code></pre>"},{"location":"objects/workflow/crud/#read","title":"Read","text":"<p>To read workflows you can use the <code>get_workflow()</code>, <code>get_workflow_versions()</code>, <code>list_workflows()</code> or <code>import_workflow()</code> workflows.</p>"},{"location":"objects/workflow/crud/#get","title":"Get","text":"<p>This function searches for a single workflow into the backend. If you want to collect a workflow from the backend using <code>get_workflow()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-name&gt;:&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity name as <code>identifier</code>, the project name as <code>project</code> and the entity id as <code>entity_id</code> parameters. If you do not specify the entity id, you will get the latest version.</li> </ul>"},{"location":"objects/workflow/crud/#digitalhub.entities.workflow.crud.get_workflow","title":"<code>get_workflow</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Workflow</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_workflow(\"store://my-workflow-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_workflow(\"my-workflow-name\"\n&gt;&gt;&gt;                    project=\"my-project\",\n&gt;&gt;&gt;                    entity_id=\"my-workflow-id\")\n</code></pre>"},{"location":"objects/workflow/crud/#get-versions","title":"Get versions","text":"<p>This function returns all the versions of a workflow from the backend.</p>"},{"location":"objects/workflow/crud/#digitalhub.entities.workflow.crud.get_workflow_versions","title":"<code>get_workflow_versions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Workflow]</code> <p>List of object instances.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_workflow_versions(\"store://my-workflow-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_workflow_versions(\"my-workflow-name\"\n&gt;&gt;&gt;                             project=\"my-project\")\n</code></pre>"},{"location":"objects/workflow/crud/#list","title":"List","text":"<p>This function returns all the latest workflows from the backend related to a project.</p>"},{"location":"objects/workflow/crud/#digitalhub.entities.workflow.crud.list_workflows","title":"<code>list_workflows</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Workflow]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_workflows(project=\"my-project\")\n</code></pre>"},{"location":"objects/workflow/crud/#import","title":"Import","text":"<p>This function load the workflow from a local yaml file descriptor.</p>"},{"location":"objects/workflow/crud/#digitalhub.entities.workflow.crud.import_workflow","title":"<code>import_workflow</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Workflow</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_workflow(\"my-workflow.yaml\")\n</code></pre>"},{"location":"objects/workflow/crud/#update","title":"Update","text":"<p>To update a workflow you can use the <code>update_workflow()</code> method.</p>"},{"location":"objects/workflow/crud/#digitalhub.entities.workflow.crud.update_workflow","title":"<code>update_workflow</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Workflow</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Workflow</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_workflow(obj)\n</code></pre>"},{"location":"objects/workflow/crud/#delete","title":"Delete","text":"<p>To delete a workflow you can use the <code>delete_workflow()</code> method.</p>"},{"location":"objects/workflow/crud/#digitalhub.entities.workflow.crud.delete_workflow","title":"<code>delete_workflow</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>delete_all_versions</code> <code>bool</code> <p>Delete all versions of the named entity. If True, use entity name instead of entity key as identifier.</p> <code>False</code> <code>cascade</code> <code>bool</code> <p>Cascade delete.</p> <code>True</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <p>If delete_all_versions is False:</p> <pre><code>&gt;&gt;&gt; obj = delete_workflow(\"store://my-workflow-key\")\n</code></pre> <p>Otherwise:</p> <pre><code>&gt;&gt;&gt; obj = delete_workflow(\"workflow-name\",\n&gt;&gt;&gt;                       project=\"my-project\",\n&gt;&gt;&gt;                       delete_all_versions=True)\n</code></pre>"},{"location":"objects/workflow/entity/","title":"Workflow","text":"<p>Workflows allow for organizing the single operations in a advanced management pipelines, to perform a series operation of data processing, ML model training and serving, etc. Workflows represent long-running procedures defined as Directed Acyclic Graphs (DAGs) where each node is a single unit of work performed by the platform (e.g., as a Kubernetes Job).</p>"},{"location":"objects/workflow/entity/#managing-workflows-with-sdk","title":"Managing workflows with SDK","text":"<p>Workflows can be created and managed as entities with the SDK CRUD methods. This can be done directly from the package or through the <code>Project</code> object. To manage workflows, you need to have at least <code>digitalhub[core]</code> layer installed.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete workflows.</li> <li>In the methods section, we will see what can be done with the <code>Workflow</code> object.</li> <li>In the kinds section, we will see what kinds are supported.</li> </ol>"},{"location":"objects/workflow/kinds/","title":"Workflow kinds","text":"<p>At the moment, we support the following kinds and the related runtime:</p> <ul> <li><code>kfp</code></li> </ul> <p>For each different kind, the <code>Workflow</code> object has its own subclass with different <code>spec</code> and <code>status</code> attributes.</p> <p>Please see the runtime documentation for more information on the related to the various <code>spec</code> arguments.</p>"},{"location":"objects/workflow/methods/","title":"Workflow object","text":"<p>The <code>Workflow</code> object comes with three sets of methods: CRUD methods, one run method and (eventual) kind specific methods.</p>"},{"location":"objects/workflow/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"objects/workflow/methods/#digitalhub.entities.workflow._base.entity.Workflow.save","title":"<code>save</code>","text":"<p>Save or update the entity into the backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity saved.</p>"},{"location":"objects/workflow/methods/#digitalhub.entities.workflow._base.entity.Workflow.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"objects/workflow/methods/#digitalhub.entities.workflow._base.entity.Workflow.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"objects/workflow/methods/#run-method","title":"Run method","text":"<p>The <code>run()</code> method is used to execute the workflow.</p>"},{"location":"objects/workflow/methods/#digitalhub.entities.workflow._base.entity.Workflow.run","title":"<code>run</code>","text":"<p>Run workflow.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>str</code> <p>Action to execute.</p> required <code>wait</code> <code>bool</code> <p>Flag to wait for execution to finish.</p> <code>False</code> <code>log_info</code> <code>bool</code> <p>Flag to log information while waiting.</p> <code>True</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments passed to Run builder.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Run</code> <p>Run instance.</p>"},{"location":"objects/workflow/methods/#kind-specific-methods","title":"Kind specific methods","text":"<p>Kind specific methods are used to express potential behaviors of different object kinds. See the kinds section for more information.</p>"},{"location":"runtimes/container/","title":"Container runtime","text":"<p>The Container runtime allows you to create deployments, jobs and services on Kubernetes.</p>"},{"location":"runtimes/container/#prerequisites","title":"Prerequisites","text":"<p>Python version and libraries:</p> <ul> <li><code>python &gt;= 3.9</code></li> <li><code>digitalhub-runtime-container</code></li> </ul> <p>The package is available on PyPI:</p> <pre><code>python -m pip install digitalhub-runtime-container\n</code></pre>"},{"location":"runtimes/container/#how-to","title":"HOW TO","text":"<p>With the Container runtime you can launch pods and services on Kubernetes. It is built having remote online execution capabilities.</p>"},{"location":"runtimes/container/#function","title":"Function","text":"<p>The Container runtime introduces a function of kind <code>container</code> that allows you to deploy deployments, jobs and services on Kubernetes.</p>"},{"location":"runtimes/container/#function-parameters","title":"Function parameters","text":"Name Type Description Default project str Project name. Required only if creating from library, otherwise MUST NOT be set name str Name that identifies the object required kind str Function kind required uuid str ID of the object in form of UUID4 None description str Description of the object None labels list[str] List of labels None embedded bool Flag to determine if object must be embedded in project True code_src str URI pointer to source code None code str Source code (plain text) None base64 str Source code (base64 encoded) None handler str Function entrypoint None lang str Source code language (hint) None image str The image to use None base_image str The base container image None (required if task is <code>build</code>) command str The command to run inside the container None args list[str] The arguments to pass to the command None"},{"location":"runtimes/container/#function-kinds","title":"Function kinds","text":"<p>The <code>kind</code> parameter must be:</p> <ul> <li><code>container</code></li> </ul>"},{"location":"runtimes/container/#function-example","title":"Function example","text":"<pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project('my_project')\nfunction = dh.new_function(\n    kind='container',\n    name='my_function',\n    image=\"hello-world:latest\"\n)\n</code></pre>"},{"location":"runtimes/container/#task","title":"Task","text":"<p>The container runtime introduces four tasks of kind <code>job</code>, <code>serve</code>, <code>build</code> and <code>deploy</code> that allows you to run a Kubernetes job, create a service or a deployment and build an image. A <code>Task</code> is created with the <code>run()</code> method, so it's not managed directly by the user. The parameters for the task creation are passed directly to the <code>run()</code> method, and may vary depending on the kind of task.</p>"},{"location":"runtimes/container/#task-parameters","title":"Task parameters","text":"Name Type Description Default Kind specific action str Task action required node_selector list[dict] Node selector None volumes list[dict] List of volumes None resources dict Resources restrictions None affinity dict Affinity None tolerations list[dict] Tolerations None envs list[dict] Env variables None secrets list[str] List of secret names None profile str Profile template None backoff_limit int Backoff limit None <code>job</code> schedule str Schedule for the job None <code>job</code> fs_group int File system group ID None <code>deploy</code>, <code>job</code> replicas int Number of replicas None <code>deploy</code>, <code>serve</code> service_ports list[dict] Service port where to expose the service <code>NodePort</code> <code>serve</code> service_type str Service type <code>NodePort</code> <code>serve</code> instructions list[str] Build instructions to be executed as RUN instructions in Dockerfile None <code>build</code>"},{"location":"runtimes/container/#task-actions","title":"Task actions","text":"<p>Actions must be one of the following:</p> <ul> <li><code>job</code></li> <li><code>build</code></li> <li><code>serve</code></li> <li><code>deploy</code></li> </ul>"},{"location":"runtimes/container/#task-example","title":"Task example","text":"<pre><code>run = function.run(\n    action=\"job\",\n    instructions=[\"apt install git -y\"],\n)\n</code></pre>"},{"location":"runtimes/container/#run","title":"Run","text":"<p>The <code>Run</code> object is, similar to the <code>Task</code>, created with the <code>run()</code> method. The run's parameters are passed alongside the task's ones.</p>"},{"location":"runtimes/container/#run-parameters","title":"Run parameters","text":"<p>There are no parameters for the <code>run</code> spec.</p>"},{"location":"runtimes/container/#run-example","title":"Run example","text":"<pre><code>run = function.run(action=\"job\")\n</code></pre>"},{"location":"runtimes/container/#run-methods","title":"Run methods","text":"<p>There are no specific methods for the <code>run</code> container.</p>"},{"location":"runtimes/dbt/","title":"DBT runtime","text":"<p>The DBT runtime allows you to run DBT transformations on your data. It is a wrapper around the DBT CLI tool. The runtime introduces a function of kind <code>dbt</code> and a task of kind <code>transform</code>.</p>"},{"location":"runtimes/dbt/#prerequisites","title":"Prerequisites","text":"<p>Python version and libraries:</p> <ul> <li><code>python &gt;= 3.9</code></li> <li><code>digitalhub-runtime-dbt</code></li> </ul> <p>The package is available on PyPI:</p> <pre><code>python -m pip install digitalhub-runtime-dbt # for remote execution only\npython -m pip install digitalhub-runtime-dbt[local] # for local execution\n</code></pre>"},{"location":"runtimes/dbt/#how-to","title":"HOW TO","text":"<p>With the DBT runtime you can use the function's <code>run()</code> method to execute a DBT query you have defined. The DBT runtime execution workflow follows roughly these steps:</p> <ol> <li>The runtime fetches the input dataitems by downloading them locally. The runtime tries to get the file from the <code>path</code> attribute in the dataitem specification. At the moment, we support the following path types:<ul> <li><code>http(s)://&lt;url&gt;</code></li> <li><code>s3://&lt;bucket&gt;/&lt;path&gt;</code></li> <li><code>sql://&lt;database&gt;(/&lt;schema-optional&gt;)/&lt;table&gt;</code></li> <li><code>&lt;local-path&gt;</code></li> </ul> </li> <li>The runtime inserts the data into a temporary versioned table in the default postgres database. These tables are named <code>&lt;dataitem-name&gt;_v&lt;dataitem-id&gt;</code>, and will be deleted at the end of the execution.</li> <li>The runtime collect the source code of the DBT query and creates all the necessary DBT artifacts (profiles.yml, dbt_project.yml, etc.) and runs the DBT transformation.</li> <li>The runtime stores the output table into the default postgres database as result of the DBT execution. The table name is built from the <code>outputs</code> parameter. Then, the runtime creates a dataitem with the <code>outputs</code> name parameter and saves it into the Core backend. You can retrieve the dataitem with the <code>run.outputs()</code> method. In general, the output table versioned is named <code>&lt;dataitem-output-name&gt;_v&lt;dataitem-output-id&gt;</code> and is stored in the default postgres database passed to the runtime via env variable.</li> </ol>"},{"location":"runtimes/dbt/#function","title":"Function","text":"<p>The DBT runtime introduces a function of kind <code>dbt</code> that allows you to execute sql dbt queries on your data.</p>"},{"location":"runtimes/dbt/#function-parameters","title":"Function parameters","text":"Name Type Description Default project str Project name. Required only if creating from library, otherwise MUST NOT be set name str Name that identifies the object required kind str Function kind required uuid str ID of the object in form of UUID4 None description str Description of the object None labels list[str] List of labels None embedded bool Flag to determine if object must be embedded in project True code_src str URI pointer to source code None code str Source code (plain text) None base64 str Source code (base64 encoded) None handler str Function entrypoint None lang str Source code language (hint) None"},{"location":"runtimes/dbt/#function-kinds","title":"Function kinds","text":"<p>The <code>kind</code> parameter must be:</p> <ul> <li><code>dbt</code></li> </ul>"},{"location":"runtimes/dbt/#function-example","title":"Function example","text":"<pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my_project\")\n\nsql = \"\"\"\nSELECT * FROM {{ ref(\"my_table\") }}\n\"\"\"\n\ndataitem = project.new_dataitem(\"my_dataitem\", kind=\"table\", path=\"path-to-some-data\")\n\nfunction = dh.new_function(\n    kind=\"dbt\",\n    name=\"my_function\",\n    code=sql\n)\n</code></pre>"},{"location":"runtimes/dbt/#task","title":"Task","text":"<p>The DBT runtime introduces a task of kind <code>transform</code> that allows you to run a DBT transformation on your data. A <code>Task</code> is created with the <code>run()</code> method, so it's not managed directly by the user. The parameters for the task creation are passed directly to the <code>run()</code> method, and may vary depending on the kind of task.</p>"},{"location":"runtimes/dbt/#task-parameters","title":"Task parameters","text":"Name Type Description Default Kind specific action str Task action required node_selector list[dict] Node selector None volumes list[dict] List of volumes None resources dict Resources restrictions None affinity dict Affinity None tolerations list[dict] Tolerations None envs list[dict] Env variables None secrets list[str] List of secret names None profile str Profile template None"},{"location":"runtimes/dbt/#task-actions","title":"Task actions","text":"<p>Actions must be one of the following:</p> <ul> <li><code>serve</code>: to deploy a service</li> </ul>"},{"location":"runtimes/dbt/#task-example","title":"Task example","text":"<pre><code>run = function.run(\n    action=\"transform\",\n    inputs={\"my_table\": my_dataitem.key},\n    outputs={\"output_table\": \"my_output_table\"},\n)\n</code></pre>"},{"location":"runtimes/dbt/#run","title":"Run","text":"<p>The <code>Run</code> object is, similar to the <code>Task</code>, created with the <code>run()</code> method. The run's parameters are passed alongside the task's ones.</p>"},{"location":"runtimes/dbt/#run-parameters","title":"Run parameters","text":"Name Type Description Default loacal_execution bool Flag to indicate if the run will be executed locally False inputs dict Input entity key. None outputs dict Outputs mapped. None parameters dict Extra parameters for a function. None"},{"location":"runtimes/dbt/#run-example","title":"Run example","text":"<pre><code>run = function.run(\n    action=\"job\",\n    inputs={\n        \"dataitem\": dataitem.key\n    },\n    outputs={\n        \"dataitem\": \"mapped-name\",\n        \"label\": \"some-label\"\n    }\n)\n</code></pre>"},{"location":"runtimes/dbt/#run-methods","title":"Run methods","text":""},{"location":"runtimes/dbt/#digitalhub_runtime_dbt.entities.run.dbt_run.entity.RunDbtRun.output","title":"<code>output</code>","text":"<p>Get run's output by name.</p> <p>Parameters:</p> Name Type Description Default <code>output_name</code> <code>str</code> <p>Key of the result.</p> required <code>as_key</code> <code>bool</code> <p>If True, return result as key.</p> <code>False</code> <code>as_dict</code> <code>bool</code> <p>If True, return result as dictionary.</p> <code>False</code> <p>Returns:</p> Type Description <code>Entity | dict | str | None</code> <p>Result.</p>"},{"location":"runtimes/dbt/#digitalhub_runtime_dbt.entities.run.dbt_run.entity.RunDbtRun.outputs","title":"<code>outputs</code>","text":"<p>Get run's outputs.</p> <p>Parameters:</p> Name Type Description Default <code>as_key</code> <code>bool</code> <p>If True, return results as keys.</p> <code>False</code> <code>as_dict</code> <code>bool</code> <p>If True, return results as dictionaries.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict</code> <p>List of output objects.</p>"},{"location":"runtimes/kfp/","title":"KFP Pipelines Runtime","text":"<p>The kfp runtime allows you to run workflows within the platform. The runtime introduces a function of kind <code>kfp</code> and a task of kind <code>pipeline</code>.</p>"},{"location":"runtimes/kfp/#prerequisites","title":"Prerequisites","text":"<p>Python version and libraries:</p> <ul> <li><code>python &gt;= 3.9</code></li> <li><code>digitalhub-runtime-kfp</code></li> </ul> <p>The package is available on PyPI:</p> <pre><code>python -m pip install digitalhub-runtime-kfp\n</code></pre>"},{"location":"runtimes/kfp/#how-to","title":"HOW TO","text":"<p>With the kfp runtime you can use the function's <code>run()</code> method to execute a workflow you have defined. The kfp runtime execution workflow follows roughly these steps:</p> <ol> <li>Define one or more functions to be executed. These functions can be from other runtimes.</li> <li>Define somewhere a pipeline.</li> <li>Build the pipeline with the <code>run(action=\"build\")</code> method. (Mandatory step!)</li> <li>Execute the pipeline with <code>run(action=\"pipeline\")</code> method. This calls a stepper that executes various KFP ContainerOP.</li> </ol>"},{"location":"runtimes/kfp/#pipeline-definition","title":"Pipeline definition","text":"<p>To define a pipeline you need to define function with the <code>def</code> keyword. You can give the function a name and declare its arguments as usual. From <code>digitalhub_runtime_kfp.dsl</code> you must import <code>pipeline_context</code>. Its a context manager object that allows you to order the various steps of execution and chain them together with inputs and outputs. Once you write the pipeline function, store it in a file .py. When you define the steps inside the pipeline, you specify also inputs, outputs, parameters and values for the steps.</p>"},{"location":"runtimes/kfp/#step-parameters","title":"Step parameters","text":"Parameter Type Example Description name str \"download\" Name of the step function str \"downloader-funct\" Name of the dh function to execute. It must exists in the dh project context action str \"job\" Action to execute inputs dict {\"url\": \"dataitem_key\", \"dataset\": previous_step.outputs[\"some_key\"]} Input dh parameters keys (dataitems, artifacts, models). The syntax for the inputs is the same as in the <code>kfp</code> package when it comes to link an output step to an input. outputs dict {\"dataset\": \"dataset\"} Dh outputs mapped parameters dict {\"param\": \"value\"} Function generic parameters values list [\"val1\", \"val2\"] List of non dh outputs referenced as strings"},{"location":"runtimes/kfp/#workflow-definition-example","title":"Workflow definition example","text":"<pre><code>from digitalhub_runtime_kfp.dsl import pipeline_context\n\ndef myhandler(url):\n   # Use pipeline_context() manager\n   with pipeline_context() as pc:\n\n      # Defaine first step\n      step1 = pc.step(name=\"download\",                         # Name of the step 1\n                      function=\"downloader-funct\",              # Name of the dh function to execute\n                      action=\"job\",                             # Action to execute\n                      inputs={\"url\": url},                      # Input parameters\n                      outputs={\"dataset\": \"dataset\"})           # Mapped outputs\n\n      step2 = pc.step(name=\"extract_parking\",                  # Name of the step 2\n                      function=\"extract-parkings\",              # Name of the dh function to execute\n                      action=\"job\",                             # Action to execute\n                      inputs={\"di\": step1.outputs['dataset']},  # Input parameters from previous step\n                      outputs={\"parkings\": \"parkings\"})         # Mapped outputs\n</code></pre>"},{"location":"runtimes/kfp/#workflow","title":"Workflow","text":"<p>The kfp runtime introduces a function of kind <code>kfp</code>.</p>"},{"location":"runtimes/kfp/#workflow-parameters","title":"Workflow parameters","text":"Name Type Description Default project str Project name. Required only if creating from library, otherwise MUST NOT be set name str Name that identifies the object required kind str Workflow kind required uuid str ID of the object in form of UUID4 None description str Description of the object None labels list[str] List of labels None embedded bool Flag to determine if object must be embedded in project True code_src str URI pointer to source code None code str Source code (plain text) None base64 str Source code (base64 encoded) None handler str Function entrypoint None lang str Source code language (hint) None image str Image where the workflow will be executed None tag str Tag of the image where the workflow will be executed None"},{"location":"runtimes/kfp/#workflow-kinds","title":"Workflow kinds","text":"<p>The <code>kind</code> parameter must be one of the following:</p> <ul> <li><code>kfp</code></li> </ul>"},{"location":"runtimes/kfp/#workflow-example","title":"Workflow example","text":"<pre><code># From project ...\n\nworkflow = project.new_workflow(name=\"workflow\",\n                                kind=\"kfp\",\n                                code_src=\"pipeline.py\",\n                                handler=\"handler\")\n\n# .. or from sdk\n\nworkflow = dh.new_workflow(project=\"my-project\",\n                           name=\"workflow\",\n                           kind=\"kfp\",\n                           code_src=\"pipeline.py\",\n                           handler=\"handler\")\n</code></pre>"},{"location":"runtimes/kfp/#task","title":"Task","text":"<p>The KFP runtime introduces a task of kind <code>pipeline</code> that allows you to run a workflow. A <code>Task</code> is created with the <code>run()</code> method, so it's not managed directly by the user. The parameters for the task creation are passed directly to the <code>run()</code> method, and may vary depending on the kind of task.</p>"},{"location":"runtimes/kfp/#task-parameters","title":"Task parameters","text":"Name Type Description Default Kind specific action str Task action required node_selector list[dict] Node selector None volumes list[dict] List of volumes None resources dict Resources restrictions None affinity dict Affinity None tolerations list[dict] Tolerations None envs list[dict] Env variables None secrets list[str] List of secret names None profile str Profile template None schedule str Schedule for the job None"},{"location":"runtimes/kfp/#task-actions","title":"Task actions","text":"<p>Actions must be one of the following:</p> <ul> <li><code>build</code></li> <li><code>pipeline</code></li> </ul>"},{"location":"runtimes/kfp/#task-example","title":"Task example","text":"<pre><code>run_build = workflow.run(action=\"build\")\n\nrun_pipeline = workflow.run(action=\"pipeline\")\n</code></pre>"},{"location":"runtimes/kfp/#run","title":"Run","text":"<p>The <code>Run</code> object is, similar to the <code>Task</code>, created with the <code>run()</code> method. The run's parameters are passed alongside the task's ones.</p>"},{"location":"runtimes/kfp/#run-parameters","title":"Run parameters","text":"Name Type Description Default inputs dict Inputs for the pipeline function. None"},{"location":"runtimes/kfp/#run-example","title":"Run example","text":"<pre><code>run_build = workflow.run(action=\"build\")\n\nrun = workflow.run(\n    action=\"pipeline\",\n    parameters={\"dataitem\": dataitem.key}\n)\n</code></pre>"},{"location":"runtimes/kfp/#run-methods","title":"Run methods","text":""},{"location":"runtimes/kfp/#digitalhub_runtime_kfp.entities.run.kfp_run.entity.RunKfpRun.output","title":"<code>output</code>","text":"<p>Get run's output by name.</p> <p>Parameters:</p> Name Type Description Default <code>output_name</code> <code>str</code> <p>Key of the result.</p> required <code>as_key</code> <code>bool</code> <p>If True, return result as key.</p> <code>False</code> <code>as_dict</code> <code>bool</code> <p>If True, return result as dictionary.</p> <code>False</code> <p>Returns:</p> Type Description <code>Entity | dict | str | None</code> <p>Result.</p>"},{"location":"runtimes/kfp/#digitalhub_runtime_kfp.entities.run.kfp_run.entity.RunKfpRun.outputs","title":"<code>outputs</code>","text":"<p>Get run's outputs.</p> <p>Parameters:</p> Name Type Description Default <code>as_key</code> <code>bool</code> <p>If True, return results as keys.</p> <code>False</code> <code>as_dict</code> <code>bool</code> <p>If True, return results as dictionaries.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict</code> <p>List of output objects.</p>"},{"location":"runtimes/kfp/#digitalhub_runtime_kfp.entities.run.kfp_run.entity.RunKfpRun.result","title":"<code>result</code>","text":"<p>Get result by name.</p> <p>Parameters:</p> Name Type Description Default <code>result_name</code> <code>str</code> <p>Name of the result.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The result.</p>"},{"location":"runtimes/kfp/#digitalhub_runtime_kfp.entities.run.kfp_run.entity.RunKfpRun.results","title":"<code>results</code>","text":"<p>Get results.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The results.</p>"},{"location":"runtimes/kfp/#digitalhub_runtime_kfp.entities.run.kfp_run.entity.RunKfpRun.values","title":"<code>values</code>","text":"<p>Get values.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The values.</p>"},{"location":"runtimes/kubernetes-resources/","title":"Using Kubernetes Resources for Runs","text":"<p>With SDK you can manage Kubernetes resources for your tasks. When you run a function you can require some Kubernetes resources for the task. Resources and data are specified in the <code>function.run()</code> method. Here follows a description of the resources you can request with the <code>function.run()</code> method.</p>"},{"location":"runtimes/kubernetes-resources/#node-selector","title":"Node selector","text":"<p>You can request a node selector for the container being launched by the task by passing the selector as a dictionary with the <code>node_selector</code> task parameters.</p> <pre><code>node_selector = {\n    \"key\": \"Node selector key.\",\n    \"value\": \"Node selector value.\"\n}\n</code></pre>"},{"location":"runtimes/kubernetes-resources/#volumes","title":"Volumes","text":"<p>With SDK you can request the following types of volumes:</p> <ul> <li>Persistent volume claims (PVC)</li> <li>ConfigMap</li> </ul>"},{"location":"runtimes/kubernetes-resources/#persistent-volume-claims-pvc","title":"Persistent volume claims (PVC)","text":"<p>You can ask for a persistent volume claim (pvc) to be mounted on the container being launched by the task. You need to declare the volume type as <code>persistent_volume_claim</code>, a name for the PVC for the user (e.g., <code>my-pvc</code>), the mount path on the container and a spec with the name of the PVC on Kubernetes (e.g., <code>pvc-name-on-k8s</code>).</p> <pre><code>volumes = [{\n        \"volume_type\": \"persistent_volume_claim\",\n        \"name\": \"my-pvc\",\n        \"mount_path\": \"/data\",\n        \"spec\": {\n            \"claim_name\": \"pvc-name-on-k8s\",\n            }\n}]\n</code></pre>"},{"location":"runtimes/kubernetes-resources/#configmap","title":"ConfigMap","text":"<p>You can ask for a configmap to be mounted on the container being launched by the task. You need to declare the volume type as <code>config_map</code>, a name for the ConfigMap for the user (e.g., <code>my-config-map</code>), the mount path on the container and a spec with the name of the ConfigMap on Kubernetes (e.g., <code>config-map-name-on-k8s</code>).</p> <pre><code>volumes = [{\n        \"volume_type\": \"config_map\",\n        \"name\": \"my-config-map\",\n        \"mount_path\": \"/data\",\n        \"spec\": {\n            \"name\": \"config-map-name-on-k8s\"\n        }\n}]\n</code></pre>"},{"location":"runtimes/kubernetes-resources/#resources","title":"Resources","text":"<p>You can request a specific amount of hardware resources (cpu, memory, gpu) for the task, declared thorugh the <code>resources</code> task parameter; <code>resources</code> must be a map of Resource objects represented as a dictionary. At the moment Digitalhub SDK supports:</p> <ul> <li>CPU</li> <li>RAM memory</li> <li>GPU</li> </ul>"},{"location":"runtimes/kubernetes-resources/#cpu","title":"CPU","text":"<p>You can request a specific amount of CPU for the task. You need to declare the resource type as <code>cpu</code>, request and/or limit specifications.</p> <pre><code>resources = {\n    \"cpu\": {\n        \"requests\": \"12\",\n        \"limits\": \"16\"\n    }\n}\n</code></pre>"},{"location":"runtimes/kubernetes-resources/#ram-memory","title":"RAM memory","text":"<p>You can request a specific amount of RAM memory for the task. You need to declare the resource type as <code>mem</code>, request and/or limit specifications.</p> <pre><code>resources = {\n    \"mem\": {\n        \"requests\": \"64Gi\",\n    }\n}\n</code></pre>"},{"location":"runtimes/kubernetes-resources/#gpu","title":"GPU","text":"<p>Please see Profile documentation.</p>"},{"location":"runtimes/kubernetes-resources/#secrets","title":"Secrets","text":"<p>You can request a secret injection into the container being launched by the task by passing the reference to the backend with the <code>secrets</code> task parameters.</p> <pre><code>secrets = [\"my-secret\"]\n</code></pre>"},{"location":"runtimes/kubernetes-resources/#envs","title":"Envs","text":"<p>You can request an environment variable injection into the container being launched by the task by passing the reference to the backend with the <code>envs</code> task parameters.</p> <pre><code>envs = [{\n    \"name\": \"env-name\",\n    \"value\": \"value\"\n}]\n</code></pre>"},{"location":"runtimes/kubernetes-resources/#tolerations","title":"Tolerations","text":"<p>Please see Kubernetes documentation.</p>"},{"location":"runtimes/kubernetes-resources/#affinity","title":"Affinity","text":"<p>Please see Kubernetes documentation.</p>"},{"location":"runtimes/kubernetes-resources/#profile","title":"Profile","text":"<p>Profile template.</p>"},{"location":"runtimes/kubernetes-resources/#schedule","title":"Schedule","text":"<p>Schedule for the job. It accepts a cron expression.</p> <pre><code>schedule = \"0 0 * * *\"\n</code></pre>"},{"location":"runtimes/kubernetes-resources/#replicas","title":"Replicas","text":"<p>Number of replicas for the pod/deployment. It accepts an integer value.</p> <pre><code>replicas = 3\n</code></pre>"},{"location":"runtimes/kubernetes-resources/#backoff-limit","title":"Backoff limit","text":"<p>Backoff limit for the job. It accepts an integer value.</p> <pre><code>backoff_limit = 3\n</code></pre>"},{"location":"runtimes/kubernetes-resources/#fs-group","title":"FS group","text":"<p>File system group ID. It accepts an integer value.</p> <pre><code>fs_group = 1000\n</code></pre>"},{"location":"runtimes/kubernetes-resources/#service-port","title":"Service port","text":"<p>Service port(s) where to expose the service. Must be: [{port: port, target_port: target_port}, ...].</p> <pre><code>service_ports = [{\n    \"port\": 80,\n    \"target_port\": 80\n}]\n</code></pre>"},{"location":"runtimes/kubernetes-resources/#service-type","title":"Service type","text":"<p>Service type to expose. Must be a <code>str</code> of one of the following:</p> <ul> <li><code>ClusterIP</code></li> <li><code>LoadBalancer</code></li> <li><code>NodePort</code></li> </ul> <pre><code>service_type = \"NodePort\"\n</code></pre>"},{"location":"runtimes/modelserve/","title":"Modelserve runtime","text":"<p>The Modelserve runtime allows you to deploy ML models on Kubernetes or locally.</p>"},{"location":"runtimes/modelserve/#prerequisites","title":"Prerequisites","text":"<p>Python version and libraries:</p> <ul> <li><code>python &gt;= 3.9</code></li> <li><code>digitalhub-runtime-modelserve</code></li> </ul> <p>The package is available on PyPI:</p> <pre><code>python -m pip install digitalhub-runtime-modelserve\n</code></pre> <p>The package comes with optional dependencies:</p> <ul> <li><code>sklearn</code></li> <li><code>mlflow</code></li> </ul> <p>For installation of thw optional dependencies, you can use the following command:</p> <pre><code>python -m pip install digitalhub-runtime-modelserve[sklearn]\npython -m pip install digitalhub-runtime-modelserve[mlflow]\npython -m pip install digitalhub-runtime-modelserve[sklearn,mlflow]\n</code></pre>"},{"location":"runtimes/modelserve/#how-to","title":"HOW TO","text":"<p>The modelserve runtime introduces several functions of kind <code>sklearnserve</code>, <code>mlflowserve</code>, <code>huggingfaceserve</code> that allows you to serve different ML models flavours and a task of kind <code>serve</code>. The usage of the runtime is similar to the others:</p> <ol> <li>Create a <code>Function</code> object of the desired model and execute it's <code>run()</code> method.</li> <li>The runtime collects (if in remote execution), loads and exposes the model as a service.</li> <li>With the run's <code>invoke()</code> method you can call the v2 inference API specifying the json payload you want (passed as keyword arguments).</li> <li>You can stop the service with the run's <code>stop()</code> method.</li> </ol> <p>The modelserve runtime launches a mlserver inference server is deployed on Kubernetes as deployment and exposed as a service.</p> <p>Service responsiveness</p> <p>It takes a while for the service to be ready and notified to the client. You can use the <code>refresh()</code> method and access the <code>status</code> attribute of the run object. When the service is ready, you can see a <code>service</code> attribute in the <code>status</code>.</p> <pre><code>run.refresh()\nrun.status\n</code></pre> <p>Once the service is ready, you can use the <code>run.invoke()</code> method to call the inference server. The <code>invoke</code> method accept <code>requests.request</code> parameters as kwargs. The <code>url</code> parameter is by default collected from the <code>run</code> object. In case you need to override it, you can use the <code>url</code> parameter.</p> <p>Note</p> <p>In case you passed <code>model_name</code> in the function spec, and you execute the run in remote execution, you need to pass the <code>model_name</code> to the invoke method. This is because the <code>model_name</code> is used to identify the model in the inference server. <code>\"http://{url-from-k8s}/v2/models/{model_name}/infer\"</code>.</p> <pre><code>data = [[...]] #some array\njson = {\n    \"inputs\": [\n        {\n        \"name\": \"input-0\",\n        \"shape\": [x, y],\n        \"datatype\": \"FP32\",\n        \"data\": data #data-array goes here\n        }\n    ]\n}\n\nrun.invoke(json=json)\n</code></pre>"},{"location":"runtimes/modelserve/#function","title":"Function","text":"<p>There are different modelserve functions (<code>sklearnserve</code>, <code>mlflowserve</code> and <code>huggingfaceserve</code>), each one representing a different ML model flavour.</p>"},{"location":"runtimes/modelserve/#function-parameters","title":"Function parameters","text":"<p>A modelserve function has the following <code>spec</code> parameters to pass to the <code>new_function()</code> method:</p> Name Type Description Default project str Project name. Required only if creating from library, otherwise MUST NOT be set name str Name that identifies the object required kind str Function kind required uuid str ID of the object in form of UUID4 None description str Description of the object None labels list[str] List of labels None embedded bool Flag to determine if object must be embedded in project True path str Path to the model files None model_name str Name of the model None image str Docker image where to serve the model None"},{"location":"runtimes/modelserve/#function-kinds","title":"Function kinds","text":"<p>The <code>kind</code> parameter must be one of the following:</p> <ul> <li><code>sklearnserve</code></li> <li><code>mlflowserve</code></li> <li><code>huggingfaceserve</code></li> </ul>"},{"location":"runtimes/modelserve/#model-path","title":"Model path","text":"<p>The model path is the path to the model files. In remote execution, the path is a remote s3 path (for example: <code>s3://my-bucket/path-to-model</code>). In local execution, the path is a local path (for example: <code>./my-path</code> or <code>my-path</code>). According to the kind of modelserve function, the path must follow a specific pattern:</p> <ul> <li><code>sklearnserve</code>: <code>s3://my-bucket/path-to-model/model.pkl</code> or <code>./path-to-model/model.pkl</code>. The remote path is the partition with the model file, the local path is the model file.</li> <li><code>mlflowserve</code>: <code>s3://my-bucket/path-to-model-files</code> or <code>./path-to-model-files</code>. The remote path is the partition with all the model files, the local path is the folder containing the MLmodel file according to MLFlow specification.</li> </ul>"},{"location":"runtimes/modelserve/#function-example","title":"Function example","text":"<pre><code># Example remote model mlflow\n\nfunction = project.new_function(name=\"mlflow-serve-function\",\n                                kind=\"mlflowserve\",\n                                path=model.spec.path + \"model\")\n\n# Example local model mlflow\n\nfunction = project.new_function(name=\"mlflow-serve-function\",\n                                kind=\"mlflowserve\",\n                                path=\"./my-path/model\")\n\n# Example remote model sklearn\n\nfunction = project.new_function(name=\"sklearn-serve-function\",\n                                kind=\"sklearnserve\",\n                                path=model.spec.path)\n\n# Example local model sklearn\n\nfunction = project.new_function(name=\"sklearn-serve-function\",\n                                kind=\"sklearnserve\",\n                                path=\"./my-path/model.pkl\")\n</code></pre>"},{"location":"runtimes/modelserve/#task","title":"Task","text":"<p>The modelserve runtime introduces one tasks of kind <code>serve</code> that allows you to deploy ML models on Kubernetes or locally. A <code>Task</code> is created with the <code>run()</code> method, so it's not managed directly by the user. The parameters for the task creation are passed directly to the <code>run()</code> method, and may vary depending on the kind of task.</p>"},{"location":"runtimes/modelserve/#task-parameters","title":"Task parameters","text":"Name Type Description Default action str Task action required node_selector list[dict] Node selector None volumes list[dict] List of volumes None resources dict Resources restrictions None affinity dict Affinity None tolerations list[dict] Tolerations None envs list[dict] Env variables None secrets list[str] List of secret names None profile str Profile template None replicas int Number of replicas None service_type str Service type <code>NodePort</code>"},{"location":"runtimes/modelserve/#task-actions","title":"Task actions","text":"<p>Actions must be one of the following:</p> <ul> <li><code>serve</code>: to deploy a service</li> </ul>"},{"location":"runtimes/modelserve/#task-example","title":"Task example","text":"<pre><code>run = function.run(\n    action=\"serve\",\n    backoff_limit=1,\n)\n</code></pre>"},{"location":"runtimes/modelserve/#run","title":"Run","text":"<p>The <code>Run</code> object is, similar to the <code>Task</code>, created with the <code>run()</code> method. The run's parameters are passed alongside the task's ones.</p>"},{"location":"runtimes/modelserve/#run-parameters","title":"Run parameters","text":"Name Type Description Default local_execution bool Flag to determine if the run must be executed locally False"},{"location":"runtimes/modelserve/#run-example","title":"Run example","text":"<pre><code>run = function.run(\n    action=\"serve\",\n    local_execution=True,\n)\n</code></pre>"},{"location":"runtimes/modelserve/#run-methods","title":"Run methods","text":"<p>Once the run is created, you can access some of its attributes and methods through the <code>run</code> object.</p>"},{"location":"runtimes/modelserve/#digitalhub_runtime_modelserve.entities.run.modelserve_run.entity.RunModelserveRun.invoke","title":"<code>invoke</code>","text":"<p>Invoke served model. By default it exposes infer v2 endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model.</p> <code>None</code> <code>method</code> <code>str</code> <p>Method of the request.</p> <code>'POST'</code> <code>url</code> <code>str</code> <p>URL of the request.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments to pass to the request.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response from the request.</p>"},{"location":"runtimes/python/","title":"Python","text":"<p>The python runtime allows you to run generic python function. The runtime introduces a function of kind <code>python</code> and three task of kind <code>job</code>, <code>serve</code> and <code>build</code>.</p>"},{"location":"runtimes/python/#prerequisites","title":"Prerequisites","text":"<p>Python version and libraries:</p> <ul> <li><code>python &gt;= 3.9</code></li> <li><code>digitalhub-runtime-python</code></li> </ul> <p>The package is available on PyPI:</p> <pre><code>python -m pip install digitalhub-runtime-python\n</code></pre>"},{"location":"runtimes/python/#how-to","title":"HOW TO","text":"<p>With the python runtime you can use the function's <code>run()</code> method to execute a python function you have defined. The python runtime execution workflow follows roughly these steps:</p> <ol> <li>Define somewhere a python function.</li> <li>Create a <code>Function</code> object in the platform and execute the function's <code>run()</code> method.</li> <li>The runtime collects the inputs specified in the function as SDK objects (<code>Dataitem</code>, <code>Artifact</code>, <code>Model</code>).</li> <li>It fetches the function source code and import the function handler.</li> <li>It composes the parameters for the handler function.</li> <li>It executes the function and map the outputs as SDK objects or as simple results.</li> </ol>"},{"location":"runtimes/python/#python-function-definition","title":"Python function definition","text":"<p>You can declare a generic python function as usual with the <code>def</code> keyword. There are some restriction that must be applied when defining the function:</p> <ol> <li>The argument <code>project</code> is reserved. The runtime overrides the function parameters and assign to the <code>project</code> argument a <code>Project</code> object, used as SDK context. With the <code>Project</code> object you can manipulate entities like <code>Artifact</code>, <code>Dataitem</code>, etc. If you provide a <code>project</code> argument into the function and use it as a non <code>Project</code> object, you will probably get an error. If you define the <code>project</code> argument into your functions signature, you can use the <code>project</code> variable as <code>Project</code> object.</li> <li>The arguments <code>context</code> and <code>events</code> are reserved in remote execution. These arguments are reserved for <code>nuclio</code> <code>context</code> and <code>events</code> function parameters. If you define these arguments into your functions signature, you can use the <code>context</code> and <code>events</code> variables as <code>nuclio</code> <code>context</code> and <code>events</code> objects.</li> <li>If some arguments of the function refer to some SDK objects, they must be mapped inside the run's <code>inputs</code> parameter. Other arguments of the function can be mapped inside the run's <code>parameter</code> parameter. More on that on the Parameters composition section.</li> <li>You may or may not decorate your function with the <code>@handler</code> decorator you can import from the <code>digitalhub_runtime_python</code> package. If you decorate your function and return something, you need to map the outputs in the decorator to collect named outputs/results. More on that on the Parameters composition section.</li> </ol>"},{"location":"runtimes/python/#function-definition-example","title":"Function definition example","text":"<pre><code>from digitalhub_runtime_python import handler\n\n# 1. Simple function that returns a string\n\ndef func1():\n   return \"hello world\"\n\n# 2. Decorated function that returns a string\n\n# If you decorate your function and return something, you need to map the outputs\n# in the decorator\n@handler(outputs=[\"result\"])\ndef func2():\n   return \"hello world\"\n\n\n# 3. Function with project argument\ndef func3(project):\n   # allowed use of project variable\n   project.log_artifact(name=\"example\",\n                        kind=\"artifact\",\n                        source_path=\"/path/to/file\")\n\n   # not allowed use of project variable\n   project.some_method_not_from_sdk() # Probably there will be an error\n\n\n# 4. Function with context and events arguments\ndef func4(context, events):\n   # allowed use of context and events variables in remote execution\n   context.logger.info(\"Some log\")\n\n# 5. Function with mixed input arguments\ndef func5(di: Dataitem, param1: str):\n   # di refers to a Dataitem object, so it must be mapped into runs inputs paramaters\n   # param1 is a string, it must be mapped into runs input parameters\n</code></pre>"},{"location":"runtimes/python/#parameters-composition","title":"Parameters composition","text":""},{"location":"runtimes/python/#inputs","title":"Inputs","text":"<p>To properly pass the parameters you need to your function, you must map them in the <code>function.run()</code> method. Ther are some rules you need to follow:</p> <ul> <li>If you expect one of your arguments to be a <code>Dataitem</code>/<code>Artifact</code>/<code>Model</code> object, you need to explicit the reference to the object into the run's <code>inputs</code> parameter using the argument name as key and the object key as value.</li> </ul> <pre><code># Define your function and declare di argument as Dataitem\ndef func(di: Dataitem):\n   # do something with di\n\n\n# Create a dataitem\nsdk_dataitem = sdk.new_dataitem(...)\n\n# Reference the di argument as key and the dataitem key as value\nsdk_function.run(inputs={\"di\": sdk_dataitem.key})\n</code></pre> <ul> <li>Other function arguments must be mapped inside the run's <code>parameters</code> parameter.</li> </ul> <pre><code># Define your function and declare di argument as Dataitem\ndef func(di: Dataitem, param1: str):\n   # do something with di\n\n\n# Create a dataitem\nsdk_dataitem = sdk.new_dataitem(...)\n\n# Reference the di argument as key and the dataitem key as value\nsdk_function.run(inputs={\"di\": sdk_dataitem.key},\n                 parameters={\"param1\": \"some value\"})\n</code></pre>"},{"location":"runtimes/python/#outputs","title":"Outputs","text":"<p>If the function return something, it is possible to collect two kinds of outputs from the <code>Run</code> object:</p> <ul> <li>SDK <code>outputs</code>, represented as <code>Dataitems</code> (if the rerurn value are Dataframe, eg. <code>pandas.DataFrame</code>) or <code>Artifacts</code> (if the return value are \"non primitive\" python object, like user defined class)</li> <li>Function <code>results</code> consisting of python \"primitives\" (str, int, float, etc.).</li> </ul> <p>To collect outputs and results with named keys, you need to map them in the <code>handler</code> decorator.</p> <pre><code>from digitalhub_runtime_python import handler\n\n@handler(outputs=[\"data\", \"string\"])\ndef func(di: Dataitem, param1: str):\n   # do something with di\n   return pd.DataFrame, \"some value\"\n\n\nsdk_function.run(inputs={\"di\": sdk_dataitem.key},\n                 parameters={\"param1\": \"some value\"})\n</code></pre> <p>In this example, the <code>Run</code> object will collect an output and a result. The output is a <code>Dataitem</code> object and the result is a <code>str</code>. To access the output from the run you can call <code>run.output(\"data\")</code>, to collect the result you can call <code>run.result(\"string\")</code>.</p>"},{"location":"runtimes/python/#serving","title":"Serving","text":"<p>You can run a using <code>serve</code> action. This action deploys a service on Kubernetes.</p> <p>Service responsiveness</p> <p>It takes a while for the service to be ready and notified to the client. You can use the <code>refresh()</code> method and access the <code>status</code> attribute of the run object. When the service is ready, you can see a <code>service</code> attribute in the <code>status</code>.</p> <pre><code>run.refresh()\nrun.status\n</code></pre> <p>Once the service is ready, you can use the <code>run.invoke()</code> method to call the inference server. The <code>invoke</code> method accept <code>requests.request</code> parameters as kwargs. The <code>url</code> parameter is by default collected from the <code>run</code> object. In case you need to override it, you can use the <code>url</code> parameter.</p> <pre><code>json = {\n    \"some-func-param\": data\n}\n\nrun.invoke(method=\"POST\", json=json)\n</code></pre>"},{"location":"runtimes/python/#function","title":"Function","text":"<p>The python runtime introduces a function of kind <code>python</code>.</p>"},{"location":"runtimes/python/#function-parameters","title":"Function parameters","text":"Name Type Description Default project str Project name. Required only if creating from library, otherwise MUST NOT be set name str Name that identifies the object required kind str Function kind required uuid str ID of the object in form of UUID4 None description str Description of the object None labels list[str] List of labels None embedded bool Flag to determine if object must be embedded in project True code_src str URI pointer to source code None code str Source code (plain text) None base64 str Source code (base64 encoded) None handler str Function entrypoint None init_function str Init function for remote nuclio execution None python_version str Python version to use required lang str Source code language (hint) None image str Image where the function will be executed None base_image str Base image used to build the image where the function will be executed None requirements list Requirements list to be installed in the image where the function will be executed None"},{"location":"runtimes/python/#function-kinds","title":"Function kinds","text":"<p>The <code>kind</code> parameter must be:</p> <ul> <li><code>python</code></li> </ul>"},{"location":"runtimes/python/#python-versions","title":"Python versions","text":"<p>The python runtime supports Python versions 3.9, 3.10 and 3.11, expressed respectively as:</p> <ul> <li><code>PYTHON3_9</code></li> <li><code>PYTHON3_10</code></li> <li><code>PYTHON3_11</code></li> </ul>"},{"location":"runtimes/python/#init-function","title":"Init function","text":"<p>The init function is the entrypoint of the nuclio init function. It follows the same rules as the <code>handler</code> parameter. The init function must be defined in the source code and should follow the example 4 (event and context in signature).</p>"},{"location":"runtimes/python/#base-image","title":"Base image","text":"<p>The base image is a string that represents the image (name:tag) used to build the image where the function will be executed.</p> <p>Warning</p> <p>It is possible that the platform where you deploy a job after a <code>build</code> action with a root image will not work because of security policy. Please check with the cluster administrator what policy are in place.</p>"},{"location":"runtimes/python/#requirements","title":"Requirements","text":"<p>Requirements are a list of <code>str</code> representing packages to be installed by <code>pip</code> in the image where the function will be executed.</p> <pre><code>requirements = [\"numpy\", 'pandas&gt;1, &lt;3', \"scikit-learn==1.2.0\"]\n</code></pre>"},{"location":"runtimes/python/#function-example","title":"Function example","text":"<pre><code># From project ...\n\nfunction = project.new_function(name=\"python-function\",\n                                kind=\"python\",\n                                code_src=\"main.py\",\n                                handler=\"function\",\n                                python_version=\"PYTHON3_9\")\n\n# .. or from sdk\n\nfunction = dh.new_function(project=\"my-project\",\n                           name=\"python-function\",\n                           kind=\"python\",\n                           code_src=\"main.py\",\n                           handler=\"function\",\n                           python_version=\"PYTHON3_9\")\n</code></pre>"},{"location":"runtimes/python/#task","title":"Task","text":"<p>The python runtime introduces three tasks of kind <code>job</code>, <code>serve</code> and <code>build</code> that allows you to run a python function execution, serving a function as a service or build a docker image where the function is executed. A <code>Task</code> is created with the <code>run()</code> method, so it's not managed directly by the user. The parameters for the task creation are passed directly to the <code>run()</code> method, and may vary depending on the kind of task.</p>"},{"location":"runtimes/python/#task-parameters","title":"Task parameters","text":"Name Type Description Default Kind specific action str Task action required node_selector list[dict] Node selector None volumes list[dict] List of volumes None resources dict Resources restrictions None affinity dict Affinity None tolerations list[dict] Tolerations None envs list[dict] Env variables None secrets list[str] List of secret names None profile str Profile template None backoff_limit int Backoff limit None <code>job</code> replicas int Number of replicas None <code>serve</code> service_type str Service type <code>NodePort</code> <code>serve</code> instructions list[str] Build instructions to be executed as RUN instructions in Dockerfile None <code>build</code>"},{"location":"runtimes/python/#task-actions","title":"Task actions","text":"<p>Actions must be one of the following:</p> <ul> <li><code>job</code></li> <li><code>build</code></li> <li><code>serve</code></li> </ul>"},{"location":"runtimes/python/#instructions","title":"Instructions","text":"<p>List of <code>str</code> representing the instructions to be executed as RUN instructions in Dockerfile.</p> <pre><code>instructions = [\"apt-get install -y git\"]\n</code></pre>"},{"location":"runtimes/python/#task-example","title":"Task example","text":"<pre><code>run = function.run(\n    action=\"build\",\n    instructions=[\"apt-get install -y git\"]\n)\n</code></pre>"},{"location":"runtimes/python/#run","title":"Run","text":"<p>The <code>Run</code> object is, similar to the <code>Task</code>, created with the <code>run()</code> method. The run's parameters are passed alongside the task's ones.</p>"},{"location":"runtimes/python/#run-parameters","title":"Run parameters","text":"Name Type Description Default loacal_execution bool Flag to indicate if the run will be executed locally False inputs dict Input entity key. None parameters dict Extra parameters for a function. None"},{"location":"runtimes/python/#run-example","title":"Run example","text":"<pre><code>run = function.run(\n    action=\"job\",\n    inputs={\n        \"dataitem\": dataitem.key\n    }\n)\n</code></pre>"},{"location":"runtimes/python/#run-methods","title":"Run methods","text":"<p>Once the run is created, you can access some of its attributes and methods through the <code>run</code> object.</p>"},{"location":"runtimes/python/#digitalhub_runtime_python.entities.run.python_run.entity.RunPythonRun.output","title":"<code>output</code>","text":"<p>Get run's output by name.</p> <p>Parameters:</p> Name Type Description Default <code>output_name</code> <code>str</code> <p>Key of the result.</p> required <code>as_key</code> <code>bool</code> <p>If True, return result as key.</p> <code>False</code> <code>as_dict</code> <code>bool</code> <p>If True, return result as dictionary.</p> <code>False</code> <p>Returns:</p> Type Description <code>Entity | dict | str | None</code> <p>Result.</p>"},{"location":"runtimes/python/#digitalhub_runtime_python.entities.run.python_run.entity.RunPythonRun.outputs","title":"<code>outputs</code>","text":"<p>Get run's outputs.</p> <p>Parameters:</p> Name Type Description Default <code>as_key</code> <code>bool</code> <p>If True, return results as keys.</p> <code>False</code> <code>as_dict</code> <code>bool</code> <p>If True, return results as dictionaries.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict</code> <p>List of output objects.</p>"},{"location":"runtimes/python/#digitalhub_runtime_python.entities.run.python_run.entity.RunPythonRun.result","title":"<code>result</code>","text":"<p>Get result by name.</p> <p>Parameters:</p> Name Type Description Default <code>result_name</code> <code>str</code> <p>Name of the result.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The result.</p>"},{"location":"runtimes/python/#digitalhub_runtime_python.entities.run.python_run.entity.RunPythonRun.results","title":"<code>results</code>","text":"<p>Get results.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The results.</p>"},{"location":"runtimes/python/#digitalhub_runtime_python.entities.run.python_run.entity.RunPythonRun.invoke","title":"<code>invoke</code>","text":"<p>Invoke run.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>Method of the request.</p> <code>'POST'</code> <code>url</code> <code>str</code> <p>URL of the request.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments to pass to the request.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response from service.</p>"},{"location":"runtimes/runtimes/","title":"Runtimes","text":"<p>Functions are the logical description of something that the platform may execute and track for you. A function may represent code to run as a job, an ML model inference to be used as batch procedure or as a service, a data validation, etc.</p> <p>In the platform we perform actions over functions (also referred to as \"tasks\"), such as job execution, deploy, container image build. A single action execution is called run, and the platform keeps track of these runs, with metadata about function version, operation parameters, and runtime parameters for a single execution.</p> <p>They are associated with a given runtime, which implements the actual execution and determines which actions are available. Examples are DBT, Container, Python, etc. Runtimes are highly specialized components which can translate the representation of a given execution, as expressed in the run, into an actual execution operation performed via libraries, code, external tools etc.</p> <p>Runtimes define the key point of extension of the platform: new runtimes may be added in order to implement the low-level logic of \"translating\" the high level operation definition into an executable run. For example, DBT runtime allows for defining the transformation as a task that, given the input table reference, produces a dataset appyling the function defined as SQL code. The runtime in this case is responsible for converting the specification and the references to a dedicated Kubernetes Job that runs DBT transformation and stores the corresponding dataset.</p>"},{"location":"runtimes/runtimes/#supported-runtimes","title":"Supported runtimes","text":"<ul> <li>Python</li> <li>Container</li> <li>DBT</li> <li>KFP</li> <li>ModelServe</li> </ul>"}]}