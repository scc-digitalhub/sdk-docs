{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Digitalhub SDK Documentation","text":"<p>Welcome to the documentation for the Digitalhub SDK, a Python package for interacting with the Digitalhub platform.</p> <p>The SDK is open source under Apache License 2.0 and is available on Github and PyPI.</p>"},{"location":"#get-started","title":"\ud83d\ude80 Get Started","text":"<p>New to DigitalHub? Follow these steps to get up and running:</p> <ul> <li>What can I do? \u2014 Explore the capabilities of the SDK</li> <li>Installation Guide \u2014 Set up the SDK and required runtimes</li> <li>Quickstart Tutorial \u2014 Your first \"Hello World\" example</li> <li>Runtime Guide \u2014 Choose the perfect runtime for your use case</li> <li>Environment Setup \u2014 Configure credentials and connections</li> </ul>"},{"location":"#contents","title":"Contents","text":"<ul> <li> <p>Tutorials</p> <p>Learning-oriented guides that take you through a series of steps to complete a project. Perfect for building foundational skills.</p> <p>Tutorials</p> </li> <li> <p>How-to Guides</p> <p>Task-oriented guides for solving specific problems. Focused on practical steps to achieve concrete goals.</p> <p>How to guides</p> </li> <li> <p>Reference</p> <p>Information-oriented documentation providing technical details about the SDK's API, parameters, and configuration options.</p> <p>Reference Overview</p> </li> <li> <p>Explanation</p> <p>Understanding-oriented content that explains concepts, background, and design rationale behind the platform.</p> <p>Concepts &amp; Background</p> </li> </ul>"},{"location":"explanations/","title":"Platform Documentation","text":"<p>For a deeper understanding of the Digitalhub platform, visit the official documentation:</p> <p>Digitalhub Platform Documentation</p>"},{"location":"how-to/","title":"How-to Guides","text":"<p>This section provides quick links to common tasks.</p> <ul> <li>Installation Guide \u2014 Set up the SDK and required runtimes</li> <li>Quickstart Tutorial \u2014 Your first \"Hello World\" example</li> <li>Runtime Guide \u2014 Choose the perfect runtime for your use case</li> </ul>"},{"location":"how-to/installation/","title":"Installation","text":"<p>The Digitalhub SDK is distributed as a Python package and is hosted on PyPI so you can install it with <code>pip</code> or <code>uv</code> or any other Python package manager.</p>"},{"location":"how-to/installation/#installing-digitalhub-sdk","title":"Installing Digitalhub SDK","text":"<p>The most basic command to install the <code>digitalhub</code> package in your Python environment is:</p> <pre><code>python -m pip install digitalhub[full]\n</code></pre> <p>This command will install the SDK with all the dependencies.</p> <p>There are more options available:</p> <pre><code># Install SDK plus pandas for dataitems handling\npython -m pip install digitalhub[pandas]\n\n# Install SDK plus mlflow for mlflow model handling\npython -m pip install digitalhub[mlflow]\n</code></pre>"},{"location":"how-to/installation/#installing-digitalhub-runtimes","title":"Installing Digitalhub Runtimes","text":"<p>The Digitalhub runtimes are installed in the same way as the SDK. We have distributed the following runtimes at the moment:</p> <ul> <li>digitalhub-runtime-python</li> <li>digitalhub-runtime-container</li> <li>digitalhub-runtime-dbt</li> <li>digitalhub-runtime-hera</li> <li>digitalhub-runtime-kfp</li> <li>digitalhub-runtime-modelserve</li> </ul> <p>You can install the runtime directly with pip. It will come with all the required SDK dependencies:</p> <pre><code># Install python runtime\npython -m pip install digitalhub-runtime-python\n\n# Install container runtime\npython -m pip install digitalhub-runtime-container\n\n# Install dbt runtime\npython -m pip install digitalhub-runtime-dbt[local]\n\n# Install hera runtime\npython -m pip install digitalhub-runtime-hera\n\n# Install kfp runtime\npython -m pip install digitalhub-runtime-kfp\n\n# Install modelserve runtime\npython -m pip install digitalhub-runtime-modelserve\n</code></pre>"},{"location":"how-to/quickstart/","title":"Quickstart","text":"<p>This quickstart shows a minimal, copy-paste Python example. It creates a handler that returns a greeting, registers it with a project, runs it, and prints the result.</p> <p>Prerequisite: an environment where the SDK is available (installed into the active virtualenv).</p> <ul> <li>Create a file named <code>hello.py</code> with the handler:</li> </ul> <pre><code>from digitalhub_runtime_python import handler\n\n@handler(outputs=[\"message\"])\ndef hello(name: str = \"world\"):\n    return f\"Hello, {name}!\"\n</code></pre> <ul> <li>Create a short script <code>run_hello.py</code> that registers the function and runs it:</li> </ul> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(name=\"hello-quickstart\", description=\"Quickstart project\")\n\nfunc = project.new_function(\n    name=\"hello\",\n    kind=\"python\",\n    code_src=\"hello.py\",\n    handler=\"hello\",\n    python_version=\"PYTHON3_10\",\n)\n\nrun = func.run(action=\"job\", inputs={\"name\": \"World\"}, wait=True)\n\nprint(run.output(\"message\"))\n</code></pre>"},{"location":"how-to/runtime-guide/","title":"Runtime Guide","text":"<p>This guide helps you choose the right runtime for your use case. The DigitalHub platform provides several specialized runtimes, each designed for different types of workloads and execution patterns.</p>"},{"location":"how-to/runtime-guide/#quick-runtime-selection","title":"Quick Runtime Selection","text":"If you need to... Use this runtime Best for Execute Python code Python Runtime General-purpose Python execution Run containerized applications Container Runtime Custom containers, complex dependencies Orchestrate multiple steps Hera Runtime Workflow orchestration, DAGs Serve ML models ModelServe Runtime Model inference, API serving Transform tabular data DBT Runtime Data transformation, SQL workflows"},{"location":"how-to/runtime-guide/#runtime-capabilities-matrix","title":"Runtime Capabilities Matrix","text":"Runtime Local Execution Remote Execution Multi-step Workflows Model Serving Data Processing Python \u2705 \u2705 \u274c \u2705 \u2705 Container \u274c \u2705 \u274c \u274c \u2705 Hera \u274c \u2705 \u2705 \u274c \u2705 ModelServe \u274c \u2705 \u274c \u2705 \u274c DBT \u2705 \u2705 \u274c \u274c \u2705"},{"location":"how-to/runtime-guide/#detailed-selection-guide","title":"Detailed Selection Guide","text":""},{"location":"how-to/runtime-guide/#python-runtime","title":"Python Runtime","text":"<p>Choose when:</p> <ul> <li>You have Python code that needs to run</li> <li>You want simple job execution or model training</li> <li>Your workload fits within Python's ecosystem</li> </ul>"},{"location":"how-to/runtime-guide/#container-runtime","title":"Container Runtime","text":"<p>Choose when:</p> <ul> <li>Your application requires complex dependencies</li> <li>You want to run existing containerized applications</li> <li>Python runtime isn't sufficient for your environment needs</li> </ul>"},{"location":"how-to/runtime-guide/#hera-runtime","title":"Hera Runtime","text":"<p>Choose when:</p> <ul> <li>You have multiple steps to execute in sequence</li> <li>You want to build DAGs (Directed Acyclic Graphs)</li> <li>You need conditional execution or parallel processing</li> </ul>"},{"location":"how-to/runtime-guide/#modelserve-runtime","title":"ModelServe Runtime","text":"<p>Choose when:</p> <ul> <li>You need to serve machine learning models</li> <li>You want to expose models as REST APIs</li> <li>You need scalable model inference</li> <li>You work with various ML frameworks (scikit-learn, MLflow, HuggingFace, etc.)</li> </ul>"},{"location":"how-to/runtime-guide/#dbt-runtime","title":"DBT Runtime","text":"<p>Choose when:</p> <ul> <li>You work with tabular data</li> <li>You need SQL-based data transformations</li> </ul>"},{"location":"how-to/runtime-guide/#getting-started-with-your-chosen-runtime","title":"Getting Started with Your Chosen Runtime","text":"<p>Once you've selected a runtime, follow these steps:</p> <ol> <li>Read the overview for your chosen runtime</li> <li>Check the examples to see common usage patterns</li> <li>Review the execution guide for detailed parameter information</li> <li>Explore the entity documentation for complete API reference</li> </ol>"},{"location":"how-to/runtime-guide/#need-help-choosing","title":"Need Help Choosing?","text":"<p>If you're still unsure which runtime to use, consider:</p> <ul> <li>Start with Python Runtime if you're new to the platform</li> <li>Use Container Runtime if you have complex dependencies</li> <li>Use Hera Runtime if you have multiple coordinated steps</li> <li>Use ModelServe Runtime if you need to serve ML models</li> <li>Use DBT Runtime if you work primarily with SQL and tabular data</li> </ul>"},{"location":"how-to/what-can-i-do/","title":"What can I do?","text":"<p>A compact, skimmable list of common tasks you can perform with the Digitalhub SDK and where to find short examples or deeper docs.</p>"},{"location":"how-to/what-can-i-do/#projects","title":"Projects","text":"<p>Create or get a project to group runs, functions, data, and artifacts.</p> <p>Quickstart \u00b7 Project setup</p>"},{"location":"how-to/what-can-i-do/#functions","title":"Functions","text":"<p>Execute Python functions, serve ML models or create containerized tasks. Run them as jobs, and fetch outputs or expose them as services.</p> <p>Quickstart \u00b7 Runtime guide</p>"},{"location":"how-to/what-can-i-do/#dataitems-artifacts","title":"Dataitems &amp; Artifacts","text":"<p>Register data sources as dataitems or files as artifacts. Use them as function inputs or as abstractions for data management.</p> <p>Dataitem reference \u00b7 Artifact reference</p>"},{"location":"how-to/what-can-i-do/#runs-results","title":"Runs &amp; results","text":"<p>Execute functions, monitor status, wait for completion, and retrieve outputs and logs.</p> <p>Run methods</p>"},{"location":"how-to/what-can-i-do/#workflows-orchestration","title":"Workflows &amp; orchestration","text":"<p>Compose tasks into workflows, schedule or trigger them, and inspect executions.</p> <p>Workflow reference \u00b7 Hera runtime overview</p>"},{"location":"how-to/what-can-i-do/#secrets-credentials","title":"Secrets &amp; credentials","text":"<p>Store credentials and secrets securely and reference them from runtimes.</p> <p>Credentials overview</p>"},{"location":"how-to/what-can-i-do/#integrations-runtimes","title":"Integrations &amp; runtimes","text":"<p>Run jobs on Kubernetes or locally. Choose the runtime that fits your use case.</p> <p>Runtime guide \u00b7 browse the <code>runtimes/</code> folder</p>"},{"location":"how-to/what-can-i-do/#where-to-go-next","title":"Where to go next","text":"<ul> <li>Quick: follow the Quickstart example to run a hello-world handler.</li> <li>Install: follow the Installation Guide to set up your environment.</li> <li>Examples: check the Tutorials for step-by-step projects.</li> <li>API: browse the Reference for object and method details.</li> </ul>"},{"location":"reference/","title":"Reference Overview","text":"<p>A compact map to the SDK reference: core topics and where to find them.</p> <ul> <li>Entities \u2014 core objects (projects, functions, workflows, runs, artifacts, dataitems, models).</li> <li>Stores \u2014 storage types and path schemes (s3, local, http, sql).</li> <li>Code source \u2014 how to provide code: plain, base64, code_src and handler rules.</li> <li>Kubernetes resources \u2014 volumes, resources, affinity, service/port conventions.</li> <li>Environment configuration \u2014 runtime and platform environment variables.</li> <li>Runtimes \u2014 per-runtime docs (python, dbt, container, hera, kfp).</li> </ul> <p>Use the sidebar for full API details and examples.</p>"},{"location":"reference/configuration/code_src/git/","title":"Code source \u2014 Git repository","text":"<p>Use a Git repository as a code source by prefixing the URL with <code>git+</code>. This points the runtime to a remote repository that will be cloned at execution time.</p>"},{"location":"reference/configuration/code_src/git/#quick-checklist","title":"Quick checklist","text":"<ul> <li>Prefix the URL with <code>git+</code> (required).</li> <li>Provide a <code>handler</code> that points to the module and callable (e.g. <code>pkg.module:func</code>).</li> <li>Set authentication env vars or create secrets before creating the function (token recommended) to access private repos.</li> </ul>"},{"location":"reference/configuration/code_src/git/#format","title":"Format","text":"<ul> <li><code>git+https://github.com/user/repo(#branch-or-tag-or-commit)</code></li> </ul> <p>The <code>(#branch-or-tag-or-commit)</code> and will be used to checkout the specific reference after cloning.</p>"},{"location":"reference/configuration/code_src/git/#behavior","title":"Behavior","text":"<ul> <li>The runtime clones the repository at run/build time.</li> <li>After cloning, it imports the module/file indicated by the <code>handler</code>.</li> <li>The <code>handler</code> typically follows <code>module.submodule:function</code> or <code>path.to.file:callable</code> syntax depending on the runtime.</li> </ul>"},{"location":"reference/configuration/code_src/git/#examples","title":"Examples","text":"<pre><code># Git repository (specific branch)\nfunc = dh.new_function(\n    name='worker',\n    kind='python',\n    code_src='git+https://github.com/my/repo#main',\n    handler='src.app:handler',\n)\n</code></pre>"},{"location":"reference/configuration/code_src/git/#credentials","title":"Credentials","text":"<p>To read Git private repositories, the runtime needs appropriate permissions. Check the Git credential section for details on configuring access.</p>"},{"location":"reference/configuration/code_src/http/","title":"Code source \u2014 HTTP(S) file or ZIP","text":"<p>Use an HTTP(S) URL to point the runtime at either a single Python source file or a ZIP archive containing a package.</p>"},{"location":"reference/configuration/code_src/http/#quick-checklist","title":"Quick checklist","text":"<ul> <li>Is the URL reachable from the runtime environment?</li> <li>Is the content a single Python file or a ZIP archive? Use <code>zip+https://...</code> for archives.</li> </ul>"},{"location":"reference/configuration/code_src/http/#supported-formats","title":"Supported formats","text":"<ul> <li>Plain file: <code>https://host/path/file.py</code></li> <li>ZIP archive: <code>zip+https://host/path/archive.zip</code></li> </ul>"},{"location":"reference/configuration/code_src/http/#behavior","title":"Behavior","text":"<ul> <li>Plain file: the runtime fetches the file and imports the top-level handler name you provide (for example <code>handler='main'</code>).</li> <li>ZIP archive: the runtime extracts the archive and imports the handler in the form <code>module:callable</code> (for example <code>handler='pkg.module:func'</code>).</li> </ul>"},{"location":"reference/configuration/code_src/http/#examples","title":"Examples","text":"<pre><code># Plain file (single module)\nfunc = dh.new_function(\n    name='hello',\n    kind='python',\n    code_src='https://example.com/my_function.py',\n    handler='main',\n)\n\n# ZIP archive (package inside archive)\nfunc = dh.new_function(\n    name='worker',\n    kind='python',\n    code_src='zip+https://example.com/code_bundle.zip',\n    handler='pkg.handlers:process',\n)\n</code></pre>"},{"location":"reference/configuration/code_src/local/","title":"Code source \u2014 Local file","text":"<p>Reference a single local file that contains the code you want to run.</p>"},{"location":"reference/configuration/code_src/local/#quick-checklist","title":"Quick checklist","text":"<ul> <li>Does your codebase fit within a single file?</li> <li>For multi-file codebase, use a git repository or a S3 zip archive to package the code and its dependencies.</li> </ul>"},{"location":"reference/configuration/code_src/local/#supported-formats","title":"Supported formats","text":"<ul> <li><code>path/to/file.py</code></li> </ul>"},{"location":"reference/configuration/code_src/local/#behavior","title":"Behavior","text":"<ul> <li>The runtime reads the local file, encodes it, and runs the specified handler.</li> </ul>"},{"location":"reference/configuration/code_src/local/#examples","title":"Examples","text":"<p>Minimal handler file (file: <code>main.py</code>):</p> <pre><code>from digitalhub_runtime_python import handler\n\n@handler(outputs=[\"out\"])\ndef myfunction(di):\n    return di\n</code></pre> <p>Create the Function using the SDK:</p> <pre><code># SDK usage\nfunc = dh.new_function(\n    name=\"python-f\",\n    kind=\"python\",\n    code_src=\"main.py\",\n    handler=\"myfunction\",\n)\n</code></pre>"},{"location":"reference/configuration/code_src/overview/","title":"Code source \u2014 overview","text":"<p>A code source tells the runtime where to find executable code for a Function or Workflow.</p>"},{"location":"reference/configuration/code_src/overview/#quick-types","title":"Quick types","text":"<ul> <li><code>code</code> \u2014 inline plain-text source (short scripts). See Plain text.</li> <li><code>code_src</code> \u2014 URI to a source (local file, git repo, S3 ZIP, HTTP/HTTPS). See Code source URI.</li> </ul>"},{"location":"reference/configuration/code_src/overview/#quick-checklist","title":"Quick checklist","text":"<ul> <li>Small snippet? use <code>code</code>.</li> <li>Files or archives stored remotely or in VCS? use <code>code_src</code> and pick the appropriate scheme.</li> </ul>"},{"location":"reference/configuration/code_src/overview/#plain-text-source","title":"Plain text source","text":"<p>Provide <code>code</code> as a string containing the source code.</p> <p>Example</p> <pre><code>my_code = \"\"\"\ndef myfunction(di):\n    return di\n\"\"\"\n\nfunc = dh.new_function(name=\"python-function\", kind=\"python\", code=my_code, handler=\"myfunction\")\n</code></pre>"},{"location":"reference/configuration/code_src/overview/#code-source-uri","title":"Code source URI","text":"<p><code>code_src</code> points to a file or archive. Pick the scheme that matches where your code lives:</p> <ul> <li>Local single file \u2014 <code>path/to/file.py</code> \u2014 details: Local file</li> <li>Git repo \u2014 <code>git+https://...</code> \u2014 details: Git repository</li> <li>S3 ZIP \u2014 <code>zip+s3://bucket/key.zip</code> \u2014 details: S3 zip archive</li> <li>HTTP(S) file or ZIP \u2014 <code>https://...</code> / <code>zip+https://...</code> \u2014 details: HTTP(S)</li> </ul>"},{"location":"reference/configuration/code_src/overview/#handler","title":"Handler","text":"<p>The <code>handler</code> defines the function entrypoint. Rules:</p> <ul> <li>For inline (<code>code</code>), base64 and local files: use the function name (e.g. <code>myfunction</code>).</li> <li>For repos/archives/remote ZIPs: use <code>module.path:func</code> or <code>path.to.file:func</code> depending on runtime.</li> </ul> <p>Example (git repo)</p> <p><code>handler=\"src.pipeline:main\"</code> \u2014 runtime imports <code>src/pipeline.py</code> and calls <code>main</code>.</p>"},{"location":"reference/configuration/code_src/s3/","title":"Code source \u2014 S3 ZIP archive","text":"<p>Use <code>zip+s3://bucket/key.zip</code> to point the runtime at a ZIP archive stored on S3 (or S3\u2011compatible object storage).</p> <p>Quick checklist</p> <ul> <li>Is the bucket and key reachable from the runtime environment?</li> <li>Is the content a ZIP archive containing a Python package/module layout?</li> <li>Will the runtime have credentials to read the object?</li> </ul>"},{"location":"reference/configuration/code_src/s3/#format","title":"Format","text":"<ul> <li><code>zip+s3://bucket/path/to/archive.zip</code></li> </ul>"},{"location":"reference/configuration/code_src/s3/#behavior","title":"Behavior","text":"<ul> <li>The runtime downloads the ZIP archive, extracts it, and imports the module/file referenced in <code>handler</code>.</li> <li>Handler must reference a module and a callable using <code>module:callable</code> (for example <code>pkg.module:func</code>).</li> </ul>"},{"location":"reference/configuration/code_src/s3/#examples","title":"Examples","text":"<pre><code># S3 ZIP archive (package inside archive)\nfunc = dh.new_function(\n    name='worker',\n    kind='python',\n    code_src='zip+s3://my-bucket/my-code.zip',\n    handler='app.main:handler',\n)\n</code></pre>"},{"location":"reference/configuration/code_src/s3/#credentials","title":"Credentials","text":"<p>To read S3 objects, the runtime needs appropriate permissions. Check the S3 credential section for details on configuring access.</p>"},{"location":"reference/configuration/credentials/dhcore/","title":"DHCore credentials","text":"<p>DHCore credentials control authentication to the DHCore backend. The SDK supports multiple auth methods: personal access token (exchange), OAuth2 (access + refresh tokens), access token only, and basic (username + password). The configurator inspects available keys and selects the appropriate auth flow.</p>"},{"location":"reference/configuration/credentials/dhcore/#get-credentials","title":"Get credentials","text":"<p>If credentials are not provided in the environment/configuration file, the user must login interactively to obtain them. To do that, use the the Digitalhub CLI tool. You can find more information in CLI documentation page.</p>"},{"location":"reference/configuration/credentials/dhcore/#important-fields","title":"Important fields","text":"<ul> <li>DHCORE_ENDPOINT \u2014 DHCore backend endpoint (e.g., <code>https://dhcore.example.com</code>)</li> <li>DHCORE_ISSUER \u2014 OpenID issuer (optional; used for OAuth2 flows)</li> <li>DHCORE_USER \u2014 username (for BASIC auth)</li> <li>DHCORE_PASSWORD \u2014 password (for BASIC auth)</li> <li>DHCORE_CLIENT_ID \u2014 OAuth2 client id (used for refresh/exchange)</li> <li>DHCORE_ACCESS_TOKEN \u2014 access token (bearer)</li> <li>DHCORE_REFRESH_TOKEN \u2014 refresh token (OAuth2)</li> <li>DHCORE_PERSONAL_ACCESS_TOKEN \u2014 personal access token (used for token exchange)</li> </ul> <p>Warning</p> <p>Please note that there are difference in prefixation of variables in environment and file.</p>"},{"location":"reference/configuration/credentials/dhcore/#environment-variables","title":"Environment variables","text":"<p>Set the variables in your shell or CI environment. Example:</p> <pre><code>export DHCORE_ENDPOINT=`https://dhcore.example.com`\n\n# PAT auth\nexport DHCORE_PERSONAL_ACCESS_TOKEN=pat_...\nexport DHCORE_CLIENT_ID=client-id\n\n# Access token + refresh token\nexport DHCORE_ACCESS_TOKEN=eyJ...\nexport DHCORE_REFRESH_TOKEN=...\nexport DHCORE_CLIENT_ID=client-id\n\n# Access token only\nexport DHCORE_ACCESS_TOKEN=eyJ...\n\n# Basic auth\nexport DHCORE_USER=myuser\nexport DHCORE_PASSWORD=mypassword\n</code></pre>"},{"location":"reference/configuration/credentials/dhcore/#configuration-file-dhcoreini","title":"Configuration file (.dhcore.ini)","text":"<p>Credentials can also live in <code>.dhcore.ini</code>. Note the difference in prefix. Example profile:</p> <pre><code>[__default]\nDHCORE_ENDPOINT = `https://dhcore.example.com`\n\n# PAT auth\nDHCORE_PERSONAL_ACCESS_TOKEN = pat_...\nCLIENT_ID = client-id\n\n# Access token + refresh token\nACCESS_TOKEN = eyJ...\nREFRESH_TOKEN = ...\nCLIENT_ID = client-id\n\n# Access token only\nACCESS_TOKEN = eyJ...\n\n# Basic auth\nDHCORE_USER = myuser\nDHCORE_PASSWORD = mypassword\n</code></pre>"},{"location":"reference/configuration/credentials/dhcore/#notes","title":"Notes","text":"<ul> <li>The configurator will set the appropriate auth method based on available credentials. It will give precedence to PAT auth, then access token + refresh token, followed by access token only, and finally basic auth. If no credentials are found, no authentication will be performed.</li> <li>The configurator selects credentials in priority order and will switch to file-based storage when a personal access token needs to be exchanged for access/refresh tokens.</li> <li>For OAuth2 and exchange-based auth the SDK can refresh tokens when supported; store refresh tokens and client id in the file if persistent refresh is required.</li> </ul>"},{"location":"reference/configuration/credentials/git/","title":"Git credentials","text":"<p>Credentials for accessing private Git repositories are used when the SDK fetches code as a code source. See Code source for full details.</p> <p>Credentials may be supplied as a token or as a username/password pair; tokens take precedence over username/password credentials.</p> <p>To provide credentials to the execution environment, use one of two methods:</p> <ul> <li>Environment variables (suitable for local runs)</li> <li>DigitalHub Secret (recommended for remote/managed executions)</li> </ul>"},{"location":"reference/configuration/credentials/git/#environment-variables","title":"Environment variables","text":"<p>Set a token/username/password in the process environment before creating the function. This works for local functions.</p> <pre><code>import os\nimport digitalhub as dh\n\nos.environ['GIT_TOKEN'] = 'ghp_...'\nos.environ['GIT_USER'] = 'my-username'\nos.environ['GIT_PASSWORD'] = 'my-password'\n\nfunc = dh.new_function(\n    name='f',\n    kind='python',\n    code_src='git+https://github.com/my/repo',\n    handler='src.app:run',\n)\nfunc.run(..., local_execution=True)\n</code></pre>"},{"location":"reference/configuration/credentials/git/#digitalhub-secret","title":"DigitalHub Secret","text":"<p>Store credentials securely in the platform as a <code>Secret</code> and reference the secret by name when running builds or jobs.</p> <p>Example \u2014 create secrets in a project:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project('my-project')\n\nsecret_token = project.new_secret(name='GIT_TOKEN', secret_value='ghp_...')\nsecret_user = project.new_secret(name='GIT_USER', secret_value='my-username')\nsecret_password = project.new_secret(name='GIT_PASSWORD', secret_value='my-password')\n</code></pre> <p>Example \u2014 attach a secret to a run or build so the runtime injects it:</p> <pre><code># create function (no token in env)\nfunc = dh.new_function(name='f', kind='python', code_src='git+https://github.com/my/repo', handler='src.app:run', python_version='PYTHON3_10')\n\n# run a build or job and provide the secret name\nrun = func.run(action='build', secrets=['GIT_TOKEN'])\n</code></pre>"},{"location":"reference/configuration/credentials/overview/","title":"Credentials handling","text":"<p>Credentials handling covers access to protected resources (APIs, databases, cloud storage, Git). The SDK provides integrations for:</p> <ul> <li>API DHCore</li> <li>Databases</li> <li>S3 storage</li> <li>Git repositories</li> </ul> <p>Credentials can be supplied via environment variables or configuration files. See each resource page for configuration details and examples.</p>"},{"location":"reference/configuration/credentials/s3/","title":"S3 credentials","text":"<p>The SDK uses S3-style credentials to access object storage. You can provide credentials via environment variables or via the <code>.dhcore.ini</code> configuration file. Required values are the endpoint URL, access key id and secret access key; other fields are optional.</p>"},{"location":"reference/configuration/credentials/s3/#important-fields","title":"Important fields","text":"<ul> <li>AWS_ENDPOINT_URL \u2014 S3 endpoint (e.g., <code>https://s3.example.com</code>)</li> <li>AWS_ACCESS_KEY_ID \u2014 access key id</li> <li>AWS_SECRET_ACCESS_KEY \u2014 secret access key</li> <li>AWS_SESSION_TOKEN \u2014 session token (optional)</li> <li>AWS_REGION \u2014 region name (optional)</li> <li>S3_SIGNATURE_VERSION \u2014 signature version (optional)</li> <li>S3_PATH_STYLE \u2014 enable path-style addressing (optional, e.g., True/False)</li> <li>AWS_CREDENTIALS_EXPIRATION \u2014 RFC3339 UTC timestamp for credential expiration (optional)</li> </ul>"},{"location":"reference/configuration/credentials/s3/#environment-variables","title":"Environment variables","text":"<p>Set the variables in your shell or CI environment. Example:</p> <pre><code>export AWS_ENDPOINT_URL=`https://s3.example.com`\nexport AWS_ACCESS_KEY_ID=AKIA...\nexport AWS_SECRET_ACCESS_KEY=secret\nexport AWS_REGION=eu-west-1\nexport S3_SIGNATURE_VERSION=s3v4\nexport S3_PATH_STYLE=True\n</code></pre>"},{"location":"reference/configuration/credentials/s3/#configuration-file-dhcoreini","title":"Configuration file (.dhcore.ini)","text":"<p>You can also place credentials in the <code>.dhcore.ini</code> file under a profile. Example format:</p> <pre><code>[__default]\nAWS_ENDPOINT_URL = `https://s3.example.com`\nAWS_ACCESS_KEY_ID = AKIA...\nAWS_SECRET_ACCESS_KEY = secret\nAWS_SESSION_TOKEN = optional-token\nAWS_REGION = eu-west-1\nS3_SIGNATURE_VERSION = s3v4\nS3_PATH_STYLE = True\nAWS_CREDENTIALS_EXPIRATION = 2025-08-26T12:00:00Z\n</code></pre>"},{"location":"reference/configuration/credentials/s3/#notes","title":"Notes","text":"<ul> <li>The configurator will first check environment variables; if required vars are missing in env it will fall back to <code>.dhcore.ini</code>.</li> <li>If file-based credentials include an expiration timestamp and it's expired, the SDK attempts to refresh the dhcore token where applicable.</li> </ul>"},{"location":"reference/configuration/credentials/sql/","title":"SQL credentials","text":"<p>The SDK reads SQL database credentials from environment variables or from the <code>.dhcore.ini</code> configuration file. Required values are username, password, host, port and database; <code>DB_PLATFORM</code> is optional and can be used to select a specific DB adapter.</p>"},{"location":"reference/configuration/credentials/sql/#important-fields","title":"Important fields","text":"<ul> <li>DB_HOST \u2014 database host or socket</li> <li>DB_PORT \u2014 database port</li> <li>DB_USERNAME \u2014 database user</li> <li>DB_PASSWORD \u2014 database password</li> <li>DB_DATABASE \u2014 database name</li> <li>DB_PLATFORM \u2014 optional platform hint (e.g., <code>postgres</code>, <code>mysql</code>)</li> <li>DB_SCHEMA \u2014 optional Postgres schema name</li> </ul>"},{"location":"reference/configuration/credentials/sql/#environment-variables","title":"Environment variables","text":"<p>Set the variables in your shell or CI environment. Example:</p> <pre><code>export DB_HOST=postgres.example.com\nexport DB_PORT=5432\nexport DB_USERNAME=myuser\nexport DB_PASSWORD=s3cr3t\nexport DB_DATABASE=mydb\nexport DB_PLATFORM=postgres\nexport DB_SCHEMA=public\n</code></pre>"},{"location":"reference/configuration/credentials/sql/#configuration-file-dhcoreini","title":"Configuration file (.dhcore.ini)","text":"<p>You can also place credentials in the <code>.dhcore.ini</code> file under a profile. Example format:</p> <pre><code>[__default]\nDB_HOST = postgres.example.com\nDB_PORT = 5432\nDB_USERNAME = myuser\nDB_PASSWORD = s3cr3t\nDB_DATABASE = mydb\nDB_PLATFORM = postgres\nDB_SCHEMA = public\n</code></pre>"},{"location":"reference/configuration/credentials/sql/#notes","title":"Notes","text":"<ul> <li>The configurator checks environment variables first; if required vars are missing it falls back to <code>.dhcore.ini</code>.</li> </ul>"},{"location":"reference/configuration/kubernetes/overview/","title":"Using Kubernetes resources for runs","text":"<p>This page describes the Kubernetes-related options you can pass to <code>function.run()</code> (or to task specs). To better understand the Kubernetes configuration options, refer to the Kubernetes documentation.</p>"},{"location":"reference/configuration/kubernetes/overview/#quick-checklist","title":"Quick checklist","text":"<ul> <li>You need to manage resource limits (more cpu/memory) -&gt; Set resource requests/limits</li> <li>You need a GPU -&gt; Request a GPU profile</li> <li>You need to mount a volume -&gt; Declare a volume</li> <li>You need to set environment variables -&gt; Inject secrets and envs</li> <li>You need to expose a service -&gt; Configure service ports</li> <li>You need to configure security settings -&gt; Set security context</li> <li>You need to scale your application -&gt; Set replicas</li> <li>You need to control pod placement -&gt; Set node selector</li> </ul>"},{"location":"reference/configuration/kubernetes/overview/#resources","title":"Resources","text":"<p>Declare hardware requests/limits using the <code>resources</code> map. Supported keys: <code>cpu</code> and <code>mem</code>. Each is an object with optional <code>requests</code> and <code>limits</code> strings.</p> <p>The SDK validates resource strings with a simple pattern (digits or digits+unit). Examples:</p> <pre><code>resources = {\n    \"cpu\": {\"requests\": \"2\", \"limits\": \"4\"},\n    \"mem\": {\"requests\": \"4Gi\", \"limits\": \"8Gi\"}\n}\n</code></pre> <p>For GPU selection you need to use a <code>profile</code> (see below) depending on your cluster setup.</p>"},{"location":"reference/configuration/kubernetes/overview/#profile","title":"Profile","text":"<p>Profiles are templates administrators provide to request specific hardware (for example GPUs). Ask your administrator for available profiles.</p> <pre><code># Request 1 GPU A100\nprofile = \"1xa100\"\n</code></pre>"},{"location":"reference/configuration/kubernetes/overview/#volumes","title":"Volumes","text":"<p>Supported volume types: persistent_volume_claim, empty_dir, ephemeral. Each volume requires <code>volume_type</code>, <code>name</code>, <code>mount_path</code> and optionally a <code>spec</code>.</p>"},{"location":"reference/configuration/kubernetes/overview/#persistent-volume-claims-pvc","title":"Persistent volume claims (PVC)","text":"<p>Mount a PVC into the container by declaring a <code>persistent_volume_claim</code> volume and an optional <code>spec.size</code>.</p> <pre><code>volumes = [{\n    \"volume_type\": \"persistent_volume_claim\",\n    \"name\": \"my-pvc\",\n    \"mount_path\": \"/data\",\n    \"spec\": {\"size\": \"1Gi\"}\n}]\n</code></pre>"},{"location":"reference/configuration/kubernetes/overview/#emptydir","title":"EmptyDir","text":"<p>Use <code>empty_dir</code> for ephemeral in-memory or node-local storage. Provide <code>spec.size_limit</code> (optional) and <code>spec.medium</code> where supported.</p> <pre><code>volumes = [{\n    \"volume_type\": \"empty_dir\",\n    \"name\": \"my-empty-dir\",\n    \"mount_path\": \"/data\",\n    \"spec\": {\"size_limit\": \"1Gi\"}\n}]\n</code></pre>"},{"location":"reference/configuration/kubernetes/overview/#ephemeral-volumes","title":"Ephemeral volumes","text":"<p>The SDK also supports <code>ephemeral</code> volumes (model name: SpecEphemeral). Use this when the runtime exposes ephemeral volume handling; <code>spec.size</code> is optional.</p> <pre><code>volumes = [{\n    \"volume_type\": \"ephemeral\",\n    \"name\": \"tmp-ephemeral\",\n    \"mount_path\": \"/tmp\",\n    \"spec\": {\"size\": \"500Mi\"}\n}]\n</code></pre>"},{"location":"reference/configuration/kubernetes/overview/#secrets-envs","title":"Secrets and Envs","text":"<p>Inject secret names into the pod environment via <code>secrets</code> (list of strings). It uses existing digitalhub <code>Secrets</code> as reference. Set environment variables as a list of <code>{name, value}</code> objects.</p> <pre><code>secrets = [\"my-secret\"]\nenvs = [{\"name\": \"ENV_NAME\", \"value\": \"value\"}]\n</code></pre>"},{"location":"reference/configuration/kubernetes/overview/#service-port-type","title":"Service port and type","text":"<p>Expose services using <code>service_ports</code> (list of <code>{port, target_port}</code>) and <code>service_type</code> (<code>ClusterIP</code>, <code>LoadBalancer</code>, <code>NodePort</code>, <code>ExternalName</code>).</p> <pre><code>service_ports = [{\"port\": 80, \"target_port\": 80}]\nservice_type = \"NodePort\"\n</code></pre>"},{"location":"reference/configuration/kubernetes/overview/#security-context","title":"Security context","text":"<p>Set <code>run_as_user</code> and <code>run_as_group</code> (integers) to control the UID/GID the container runs as. Set <code>fs_group</code> (integer) to control the GID for the filesystem.</p> <pre><code>run_as_user = 1000\nrun_as_group = 1000\nfs_group = 1000\n</code></pre>"},{"location":"reference/configuration/kubernetes/overview/#replicas","title":"Replicas","text":"<p>Specify the number of replicas for pod/deployment (integer). Some runtimes use this to create a deployment instead of a single pod.</p> <pre><code>replicas = 3\n</code></pre>"},{"location":"reference/configuration/kubernetes/overview/#node-selector","title":"Node selector","text":"<p>Request a node selector for the pod launched by the task. The SDK accepts a list of objects with <code>key</code>/<code>value</code>.</p> <pre><code>node_selector = [{\"key\": \"kubernetes.io/arch\", \"value\": \"amd64\"}]\n</code></pre>"},{"location":"reference/configuration/kubernetes/overview/#affinity","title":"Affinity","text":"<p>Please see Kubernetes documentation on affinity and anti-affinity.</p>"},{"location":"reference/configuration/kubernetes/overview/#tolerations","title":"Tolerations","text":"<p>Please see Kubernetes documentation on taints and tolerations.</p>"},{"location":"reference/configuration/kubernetes/overview/#runtime-class-and-priority-class","title":"Runtime class and priority class","text":"<p>TODO.</p>"},{"location":"reference/configuration/paths/local/","title":"Local paths","text":"<p>Local paths point to files or directories on the local filesystem. Use them when the runtime or build process can access the same files.</p>"},{"location":"reference/configuration/paths/local/#format","title":"Format","text":"<ul> <li><code>./relative/path/to/file</code> or <code>/absolute/path/to/file</code></li> </ul>"},{"location":"reference/configuration/paths/local/#behavior","title":"Behavior","text":"<ul> <li>No scheme is required. The SDK treats paths without a scheme as local.</li> <li>Local paths may point to single files or to directories; behavior depends on the consuming entity (Artifact, Dataitem, Model).</li> </ul>"},{"location":"reference/configuration/paths/local/#examples","title":"Examples","text":"<pre><code>local_dir = \"./my-path\"\nlocal_file = \"./my-path/my-file.csv\"\n</code></pre>"},{"location":"reference/configuration/paths/overview/","title":"Paths","text":"<p>The SDK supports a small set of storage path schemes. Put short: choose the scheme that matches where your files live and follow the scheme-specific rules below.</p>"},{"location":"reference/configuration/paths/overview/#supported-schemes","title":"Supported schemes","text":"<ul> <li>Local paths \u2014 files available on the local filesystem.</li> <li>S3 paths \u2014 S3 or S3-compatible object storage (bucket/key or prefix).</li> <li>Remote paths \u2014 HTTP(S) resources (single files or archives).</li> <li>SQL paths \u2014 database tables (Postgres-compatible).</li> </ul>"},{"location":"reference/configuration/paths/overview/#entity-paths","title":"Entity paths","text":"<p>When creating an Artifact, Dataitem or Model you pass a <code>path</code> (a Python <code>str</code>) to indicate where the data or artifact lives. Rules:</p> <ul> <li>Local paths have no scheme (e.g. <code>./dir/file.csv</code>).</li> <li>Non-local paths must include a scheme (for example <code>s3://</code>, <code>http://</code>, <code>https://</code>, <code>sql://</code>).</li> <li>A path can reference a single file, a directory/prefix, a partition, or \u2014 for <code>sql://</code> \u2014 a single table. See each scheme page for precise formats and examples.</li> </ul>"},{"location":"reference/configuration/paths/remote/","title":"Remote paths (HTTP/S)","text":"<p>Remote paths point to resources accessible over HTTP or HTTPS. They are useful for single files or archives hosted on the web.</p>"},{"location":"reference/configuration/paths/remote/#format","title":"Format","text":"<ul> <li><code>http://host/path/file</code> or <code>https://host/path/file</code></li> </ul>"},{"location":"reference/configuration/paths/remote/#behavior","title":"Behavior","text":"<ul> <li>The SDK treats HTTP(S) paths as remote resources; behavior (single file vs archive) depends on the consumer.</li> </ul>"},{"location":"reference/configuration/paths/remote/#examples","title":"Examples","text":"<pre><code>http_path = \"https://example.com/data.csv\"\nzip_http = \"zip+https://example.com/code_bundle.zip\"\n</code></pre>"},{"location":"reference/configuration/paths/s3/","title":"S3 paths","text":"<p>S3 paths point at objects in S3 or S3-compatible storage.</p>"},{"location":"reference/configuration/paths/s3/#format","title":"Format","text":"<ul> <li><code>s3://bucket/key</code> or <code>s3://bucket/prefix/</code> (trailing slash denotes a prefix/partition and is treated like a directory)</li> </ul>"},{"location":"reference/configuration/paths/s3/#behavior","title":"Behavior","text":"<ul> <li>The first path segment is the bucket; the remainder is the object key or prefix.</li> <li>When a prefix is provided (trailing <code>/</code>) the path represents a partition or directory-like object collection.</li> </ul>"},{"location":"reference/configuration/paths/s3/#examples","title":"Examples","text":"<pre><code>s3_path = \"s3://my-bucket/my-key.file\"\ns3_partition_path = \"s3://my-bucket/my-key/\"\n</code></pre>"},{"location":"reference/configuration/paths/s3/#notes","title":"Notes","text":"<ul> <li>Ensure you have permissions to read the bucket. Check S3 credentials handling.</li> </ul>"},{"location":"reference/configuration/paths/sql/","title":"SQL paths","text":"<p>SQL paths reference a single table in a database and are used where the SDK integrates with SQL-backed storage.</p>"},{"location":"reference/configuration/paths/sql/#format","title":"Format","text":"<ul> <li><code>sql://database/schema/table</code> (schema is optional)</li> </ul>"},{"location":"reference/configuration/paths/sql/#behavior","title":"Behavior","text":"<ul> <li>A SQL path always points to a single table. The SDK expects at least database and table names.</li> </ul>"},{"location":"reference/configuration/paths/sql/#example","title":"Example","text":"<pre><code>sql_path = \"sql://my-database/my-schema/my-table\"\n</code></pre>"},{"location":"reference/configuration/paths/sql/#notes","title":"Notes","text":"<ul> <li>Ensure database connection parameters are configured in the environment or runtime settings. Check S3 credentials handling.</li> <li>SQL paths are not files; they represent a table or queryable object in the configured DB.</li> </ul>"},{"location":"reference/objects/","title":"Entities","text":"<p>In this section will be described the entities in the Digitalhub SDK.</p> <ul> <li>Projects</li> <li>Functions</li> <li>Workflows</li> <li>Runs</li> <li>Artifacts</li> <li>Dataitems</li> <li>Models</li> <li>Secrets</li> </ul>"},{"location":"reference/objects/artifact/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete artifacts. There are two ways to use them. The first is through the SDK and the second is through the <code>Project</code> object. The syntax is the same for all CRUD methods. If you want to manage artifacts from the project, you can use the <code>Project</code> object and avoid to specify the <code>project</code> parameter. In this last case, you need to specify every parameter as keyword argument.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n\n# Use CRUD method on project\n\nartifact = project.new_artifact(name=\"my-artifact\",\n                                kind=\"artifact\",\n                                path=\"path-to-some-file\")\n\n# Use CRUD method from SDK\n\nartifact = dh.new_artifact(project=\"my-project\",\n                           name=\"my-artifact\",\n                           kind=\"artifact\",\n                           path=\"path-to-some-file\")\n</code></pre> <p>An <code>artifact</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_artifact</code></li> <li><code>log_artifact</code></li> </ul> <p>Read:</p> <ul> <li><code>get_artifact</code></li> <li><code>get_artifact_versions</code></li> <li><code>import_artifact</code></li> <li><code>list_artifacts</code></li> </ul> <p>Update:</p> <ul> <li><code>update_artifact</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_artifact</code></li> </ul>"},{"location":"reference/objects/artifact/crud/#create","title":"Create","text":"<p>You can create an artifact with the <code>new_artifact()</code> or with <code>log_artifact()</code> method. The <code>kwargs</code> parameters are determined by the kind of the object, and are described in the kinds section. The <code>kwargs</code> parameters are the same for both new and log methods.</p>"},{"location":"reference/objects/artifact/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"reference/objects/artifact/crud/#digitalhub.entities.artifact.crud.new_artifact","title":"<code>new_artifact</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>embedded</code> <code>bool</code> <p>Flag to determine if object spec must be embedded in project spec.</p> <code>False</code> <code>path</code> <code>str</code> <p>Object path on local file system or remote storage. It is also the destination path of upload() method.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Artifact</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_artifact(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-artifact\",\n&gt;&gt;&gt;                    kind=\"artifact\",\n&gt;&gt;&gt;                    path=\"s3://my-bucket/my-key\")\n</code></pre>"},{"location":"reference/objects/artifact/crud/#log","title":"Log","text":"<p>This function create a new entity into the backend and also upload a local file into an artifact store (eg. S3).</p>"},{"location":"reference/objects/artifact/crud/#digitalhub.entities.artifact.crud.log_artifact","title":"<code>log_artifact</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>source</code> <code>SourcesOrListOfSources</code> <p>Artifact location on local path.</p> required <code>path</code> <code>str</code> <p>Destination path of the artifact. If not provided, it's generated.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>New artifact spec parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Artifact</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = log_artifact(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-artifact\",\n&gt;&gt;&gt;                    kind=\"artifact\",\n&gt;&gt;&gt;                    source=\"./local-path\")\n</code></pre>"},{"location":"reference/objects/artifact/crud/#read","title":"Read","text":"<p>To read artifacts you can use the <code>get_artifact()</code>, <code>get_artifact_versions()</code>, <code>list_artifacts()</code> or <code>import_artifact()</code> functions.</p>"},{"location":"reference/objects/artifact/crud/#get","title":"Get","text":"<p>This function searches for a single artifact into the backend. If you want to collect an artifact from the backend using <code>get_artifact()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-name&gt;:&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity name as <code>identifier</code>, the project name as <code>project</code> and the entity id as <code>entity_id</code> parameters. If you do not specify the entity id, you will get the latest version.</li> </ul>"},{"location":"reference/objects/artifact/crud/#digitalhub.entities.artifact.crud.get_artifact","title":"<code>get_artifact</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Artifact</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_artifact(\"store://my-artifact-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_artifact(\"my-artifact-name\"\n&gt;&gt;&gt;                    project=\"my-project\",\n&gt;&gt;&gt;                    entity_id=\"my-artifact-id\")\n</code></pre>"},{"location":"reference/objects/artifact/crud/#get-versions","title":"Get versions","text":"<p>This function returns all the versions of an artifact from the backend.</p>"},{"location":"reference/objects/artifact/crud/#digitalhub.entities.artifact.crud.get_artifact_versions","title":"<code>get_artifact_versions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Artifact]</code> <p>List of object instances.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_artifact_versions(\"store://my-artifact-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_artifact_versions(\"my-artifact-name\"\n&gt;&gt;&gt;                             project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/artifact/crud/#list","title":"List","text":"<p>This function returns all the latest artifacts from the backend related to a project.</p>"},{"location":"reference/objects/artifact/crud/#digitalhub.entities.artifact.crud.list_artifacts","title":"<code>list_artifacts</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Artifact]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_artifacts(project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/artifact/crud/#import","title":"Import","text":"<p>This function load the artifact from a local yaml file descriptor.</p>"},{"location":"reference/objects/artifact/crud/#digitalhub.entities.artifact.crud.import_artifact","title":"<code>import_artifact</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Artifact</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_artifact(\"my-artifact.yaml\")\n</code></pre>"},{"location":"reference/objects/artifact/crud/#update","title":"Update","text":"<p>To update an artifact you can use the <code>update_artifact()</code> method.</p>"},{"location":"reference/objects/artifact/crud/#digitalhub.entities.artifact.crud.update_artifact","title":"<code>update_artifact</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Artifact</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Artifact</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_artifact(obj)\n</code></pre>"},{"location":"reference/objects/artifact/crud/#delete","title":"Delete","text":"<p>To delete an artifact you can use the <code>delete_artifact()</code> method.</p>"},{"location":"reference/objects/artifact/crud/#digitalhub.entities.artifact.crud.delete_artifact","title":"<code>delete_artifact</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>delete_all_versions</code> <code>bool</code> <p>Delete all versions of the named entity. If True, use entity name instead of entity key as identifier.</p> <code>False</code> <code>cascade</code> <code>bool</code> <p>Cascade delete.</p> <code>True</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <p>If delete_all_versions is False:</p> <pre><code>&gt;&gt;&gt; delete_artifact(\"store://my-artifact-key\")\n</code></pre> <p>Otherwise:</p> <pre><code>&gt;&gt;&gt; delete_artifact(\"my-artifact-name\",\n&gt;&gt;&gt;                  project=\"my-project\",\n&gt;&gt;&gt;                  delete_all_versions=True)\n</code></pre>"},{"location":"reference/objects/artifact/entity/","title":"Artifacts","text":"<p>Artifacts are (binary) objects stored in one of the artifact stores of the platform, and available to every process, module and component as files (or data streams).</p>"},{"location":"reference/objects/artifact/entity/#managing-artifacts-with-sdk","title":"Managing artifacts with SDK","text":"<p>Artifacts can be created and managed as entities with the SDK CRUD methods. This can be done directly from the package or through the <code>Project</code> object.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete artifacts.</li> <li>In the methods section, we will see what can be done with the <code>Artifact</code> object.</li> <li>In the kinds section, we will see what kinds are supported.</li> </ol>"},{"location":"reference/objects/artifact/kinds/","title":"Artifact kinds","text":"<p>At the moment, we support the following kinds:</p> <ul> <li><code>artifact</code>: represents a generic artifact</li> </ul> <p>For each different kind, the <code>Artifact</code> object has its own subclass with different <code>spec</code> and <code>status</code> attributes.</p>"},{"location":"reference/objects/artifact/kinds/#artifact","title":"Artifact","text":"<p>The <code>artifact</code> kind indicates that the artifact is a generic artifact. It's usefull if you intend to manipulate the artifact as a file, you can in fact download/upload it.</p>"},{"location":"reference/objects/artifact/kinds/#artifact-spec-parameters","title":"Artifact spec parameters","text":"Parameter Type Description Default <code>path</code> str Path of the artifact, can be a local path or a remote path, a single filepath or a directory/partition. required"},{"location":"reference/objects/artifact/kinds/#artifact-methods","title":"Artifact methods","text":"<p>The <code>artifact</code> kind has no additional methods.</p>"},{"location":"reference/objects/artifact/methods/","title":"Artifact object","text":"<p>The <code>Artifact</code> object comes with three sets of methods: CRUD methods, I/O methods and kind specific methods.</p>"},{"location":"reference/objects/artifact/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"reference/objects/artifact/methods/#digitalhub.entities.artifact._base.entity.Artifact.save","title":"<code>save</code>","text":"<p>Save entity into backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>MaterialEntity</code> <p>Entity saved.</p>"},{"location":"reference/objects/artifact/methods/#digitalhub.entities.artifact._base.entity.Artifact.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"reference/objects/artifact/methods/#digitalhub.entities.artifact._base.entity.Artifact.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"reference/objects/artifact/methods/#io-methods","title":"I/O methods","text":"<p>I/O methods are used to handle objects as files.</p> <ul> <li><code>as_file()</code>: Dowloads the artifact into a local temporary destination</li> <li><code>download()</code>: Downloads the artifact into a specified path</li> <li><code>upload()</code>: Uploads the artifact to artifact spec path</li> </ul>"},{"location":"reference/objects/artifact/methods/#digitalhub.entities.artifact._base.entity.Artifact.as_file","title":"<code>as_file</code>","text":"<p>Get object as file(s). It downloads the object from storage in a temporary folder and returns the list of downloaded files paths.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of file paths.</p>"},{"location":"reference/objects/artifact/methods/#digitalhub.entities.artifact._base.entity.Artifact.download","title":"<code>download</code>","text":"<p>This function downloads one or more file from storage on local machine from spec.path. The files are downloaded into a destination folder. If the destination is not specified, it will set by default under the context path as '/', e.g. './dataitem'. The overwrite flag allows to overwrite existing file(s) in the destination folder. <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>str</code> <p>Destination path as filename or directory.</p> <code>None</code> <code>overwrite</code> <code>bool</code> <p>Specify if overwrite existing file(s). If file(s) already exist and overwrite is False, it will raise an error.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Download path.</p> <p>Examples:</p> <p>Download a single file:</p> <pre><code>&gt;&gt;&gt; path = entity.download()\n&gt;&gt;&gt; print(path)\ndataitem/data.csv\n</code></pre>"},{"location":"reference/objects/artifact/methods/#digitalhub.entities.artifact._base.entity.Artifact.upload","title":"<code>upload</code>","text":"<p>Upload object from given local path to spec path destination. Source must be a local path. If the path is a folder, destination path (object's spec path) must be a folder or a partition ending with '/' (s3).</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str | list[str]</code> <p>Local filepath, directory or list of filepaths.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <p>Upload a single file:</p> <pre><code>&gt;&gt;&gt; entity.spec.path = 's3://bucket/data.csv'\n&gt;&gt;&gt; entity.upload('./data.csv')\n</code></pre> <p>Upload a folder:</p> <pre><code>&gt;&gt;&gt; entity.spec.path = 's3://bucket/data/'\n&gt;&gt;&gt; entity.upload('./data')\n</code></pre>"},{"location":"reference/objects/artifact/methods/#kind-specific-methods","title":"Kind specific methods","text":"<p>Kind specific methods are used to express potential behaviors of different object kinds. See the kinds section for more information.</p>"},{"location":"reference/objects/dataitem/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete dataitems. There are two ways to use them. The first is through the SDK and the second is through the <code>Project</code> object. The syntax is the same for all CRUD methods. If you want to manage dataitems from the project, you can use the <code>Project</code> object and avoid to specify the <code>project</code> parameter. In this last case, you need to specify every parameter as keyword argument.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n\n# Use CRUD method on project\n\ndataitem = project.new_dataitem(name=\"my-dataitem\",\n                                kind=\"table\",\n                                path=\"path-to-some-data\")\n\n# Use CRUD method from SDK\n\ndataitem = dh.new_dataitem(project=\"my-project\",\n                           name=\"my-dataitem\",\n                           kind=\"table\",\n                           path=\"path-to-some-data\")\n</code></pre> <p>A <code>dataitem</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_dataitem</code></li> <li><code>log_dataitem</code></li> </ul> <p>Read:</p> <ul> <li><code>get_dataitem</code></li> <li><code>get_dataitem_versions</code></li> <li><code>import_dataitem</code></li> <li><code>list_dataitems</code></li> </ul> <p>Update:</p> <ul> <li><code>update_dataitem</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_dataitem</code></li> </ul>"},{"location":"reference/objects/dataitem/crud/#create","title":"Create","text":"<p>You can create a dataitem with the <code>new_dataitem()</code> or with <code>log_dataitem()</code> method. The <code>kwargs</code> parameters are determined by the kind of the object, and are described in the kinds section. The <code>kwargs</code> parameters are the same for both new and log methods.</p>"},{"location":"reference/objects/dataitem/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"reference/objects/dataitem/crud/#digitalhub.entities.dataitem.crud.new_dataitem","title":"<code>new_dataitem</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>embedded</code> <code>bool</code> <p>Flag to determine if object spec must be embedded in project spec.</p> <code>False</code> <code>path</code> <code>str</code> <p>Object path on local file system or remote storage. It is also the destination path of upload() method.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dataitem</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_dataitem(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-dataitem\",\n&gt;&gt;&gt;                    kind=\"dataitem\",\n&gt;&gt;&gt;                    path=\"s3://my-bucket/my-key\")\n</code></pre>"},{"location":"reference/objects/dataitem/crud/#log","title":"Log","text":"<p>This function create a new entity into the backend and also upload a local file into a dataitem store (eg. S3).</p>"},{"location":"reference/objects/dataitem/crud/#digitalhub.entities.dataitem.crud.log_dataitem","title":"<code>log_dataitem</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>source</code> <code>SourcesOrListOfSources</code> <p>Dataitem location on local path.</p> <code>None</code> <code>data</code> <code>Any</code> <p>Dataframe to log. Alternative to source.</p> <code>None</code> <code>path</code> <code>str</code> <p>Destination path of the dataitem. If not provided, it's generated.</p> <code>None</code> <code>file_format</code> <code>str</code> <p>Extension of the file.</p> <code>None</code> <code>engine</code> <code>str</code> <p>Dataframe engine (pandas, polars, etc.).</p> <code>'pandas'</code> <code>**kwargs</code> <code>dict</code> <p>New dataitem spec parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dataitem</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = log_dataitem(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-dataitem\",\n&gt;&gt;&gt;                    kind=\"table\",\n&gt;&gt;&gt;                    data=df)\n</code></pre>"},{"location":"reference/objects/dataitem/crud/#read","title":"Read","text":"<p>To read dataitems you can use the <code>get_dataitem()</code>, <code>get_dataitem_versions()</code>, <code>list_dataitems()</code> or <code>import_dataitem()</code> functions.</p>"},{"location":"reference/objects/dataitem/crud/#get","title":"Get","text":"<p>This function searches for a single dataitem into the backend. If you want to collect a dataitem from the backend using <code>get_dataitem()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-name&gt;:&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity name as <code>identifier</code>, the project name as <code>project</code> and the entity id as <code>entity_id</code> parameters. If you do not specify the entity id, you will get the latest version.</li> </ul>"},{"location":"reference/objects/dataitem/crud/#digitalhub.entities.dataitem.crud.get_dataitem","title":"<code>get_dataitem</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dataitem</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_dataitem(\"store://my-dataitem-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_dataitem(\"my-dataitem-name\"\n&gt;&gt;&gt;                    project=\"my-project\",\n&gt;&gt;&gt;                    entity_id=\"my-dataitem-id\")\n</code></pre>"},{"location":"reference/objects/dataitem/crud/#get-versions","title":"Get versions","text":"<p>This function returns all the versions of a dataitem from the backend.</p>"},{"location":"reference/objects/dataitem/crud/#digitalhub.entities.dataitem.crud.get_dataitem_versions","title":"<code>get_dataitem_versions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Dataitem]</code> <p>List of object instances.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; objs = get_dataitem_versions(\"store://my-dataitem-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; objs = get_dataitem_versions(\"my-dataitem-name\",\n&gt;&gt;&gt;                              project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/dataitem/crud/#list","title":"List","text":"<p>This function returns all the latest dataitems from the backend related to a project.</p>"},{"location":"reference/objects/dataitem/crud/#digitalhub.entities.dataitem.crud.list_dataitems","title":"<code>list_dataitems</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Dataitem]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_dataitems(project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/dataitem/crud/#import","title":"Import","text":"<p>This function load the dataitem from a local yaml file descriptor.</p>"},{"location":"reference/objects/dataitem/crud/#digitalhub.entities.dataitem.crud.import_dataitem","title":"<code>import_dataitem</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Dataitem</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_dataitem(\"my-dataitem.yaml\")\n</code></pre>"},{"location":"reference/objects/dataitem/crud/#update","title":"Update","text":"<p>To update a dataitem you can use the <code>update_dataitem()</code> method.</p>"},{"location":"reference/objects/dataitem/crud/#digitalhub.entities.dataitem.crud.update_dataitem","title":"<code>update_dataitem</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Dataitem</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Dataitem</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_dataitem(obj)\n</code></pre>"},{"location":"reference/objects/dataitem/crud/#delete","title":"Delete","text":"<p>To delete a dataitem you can use the <code>delete_dataitem()</code> method.</p>"},{"location":"reference/objects/dataitem/crud/#digitalhub.entities.dataitem.crud.delete_dataitem","title":"<code>delete_dataitem</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>delete_all_versions</code> <code>bool</code> <p>Delete all versions of the named entity. If True, use entity name instead of entity key as identifier.</p> <code>False</code> <code>cascade</code> <code>bool</code> <p>Cascade delete.</p> <code>True</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <p>If delete_all_versions is False:</p> <pre><code>&gt;&gt;&gt; obj = delete_dataitem(\"store://my-dataitem-key\")\n</code></pre> <p>Otherwise:</p> <pre><code>&gt;&gt;&gt; obj = delete_dataitem(\"my-dataitem-name\",\n&gt;&gt;&gt;                       project=\"my-project\",\n&gt;&gt;&gt;                       delete_all_versions=True)\n</code></pre>"},{"location":"reference/objects/dataitem/entity/","title":"Dataitems","text":"<p>Dataitems are data objects which contain a dataset of a given type, stored in an addressable repository and accessible to every component able to understand the type (kind) and the source (path). Do note that data items could be stored in the artifact store as artifacts, but that is not a dependency or a requirement.</p>"},{"location":"reference/objects/dataitem/entity/#managing-dataitems-with-sdk","title":"Managing dataitems with SDK","text":"<p>Dataitems can be created and managed as entities with the SDK CRUD methods. This can be done directly from the package or through the <code>Project</code> object. To manage dataitems, you need to have at least <code>digitalhub[data]</code> layer installed.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete dataitems.</li> <li>In the methods section, we will see what can be done with the <code>Dataitem</code> object.</li> <li>In the kinds section, we will see what kinds are supported.</li> </ol>"},{"location":"reference/objects/dataitem/kinds/","title":"Dataitem kinds","text":"<p>At the moment, we support the following kinds:</p> <ul> <li><code>table</code>: represents a table</li> </ul> <p>For each different kind, the <code>Dataitem</code> object has its own subclass with different <code>spec</code> and <code>status</code> attributes.</p>"},{"location":"reference/objects/dataitem/kinds/#table","title":"Table","text":"<p>The <code>table</code> kind indicates that the dataitem is a generic table. It's usefull if you intend to manipulate the dataitem as a dataframe, infact it has some methods to do so. The default dataframe framework we use to represent a table as dataframe is <code>pandas</code>.</p>"},{"location":"reference/objects/dataitem/kinds/#table-spec-parameters","title":"Table spec parameters","text":"Parameter Type Description Default <code>path</code> str Path of the dataitem, can be a local path or a remote path, a single filepath or a directory/partition. required <code>schema</code> TableSchema Frictionless table schema <code>None</code>"},{"location":"reference/objects/dataitem/kinds/#table-methods","title":"Table methods","text":"<p>The <code>table</code> kind has the following additional methods:</p>"},{"location":"reference/objects/dataitem/kinds/#digitalhub.entities.dataitem.table.entity.DataitemTable.as_df","title":"<code>as_df</code>","text":"<p>Read dataitem file (csv or parquet) as a DataFrame from spec.path. It's possible to pass additional arguments to the this function. These keyword arguments will be passed to the DataFrame reader function such as pandas's read_csv or read_parquet.</p> <p>Parameters:</p> Name Type Description Default <code>file_format</code> <code>str</code> <p>Format of the file to read. By default, it will be inferred from the extension of the file.</p> <code>None</code> <code>engine</code> <code>str</code> <p>Dataframe framework, by default pandas.</p> <code>'pandas'</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments passed to the read_df function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Any</code> <p>DataFrame.</p>"},{"location":"reference/objects/dataitem/kinds/#digitalhub.entities.dataitem.table.entity.DataitemTable.write_df","title":"<code>write_df</code>","text":"<p>Write DataFrame as parquet/csv/table into dataitem spec.path. keyword arguments will be passed to the DataFrame reader function such as pandas's to_csv or to_parquet.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>Any</code> <p>DataFrame to write.</p> required <code>extension</code> <code>str</code> <p>Extension of the file.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments passed to the write_df function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>Path to the written dataframe.</p>"},{"location":"reference/objects/dataitem/methods/","title":"Dataitem object","text":"<p>The <code>Dataitem</code> object comes with three sets of methods: CRUD methods, I/O methods and kind specific methods.</p>"},{"location":"reference/objects/dataitem/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"reference/objects/dataitem/methods/#digitalhub.entities.dataitem._base.entity.Dataitem.save","title":"<code>save</code>","text":"<p>Save entity into backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>MaterialEntity</code> <p>Entity saved.</p>"},{"location":"reference/objects/dataitem/methods/#digitalhub.entities.dataitem._base.entity.Dataitem.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"reference/objects/dataitem/methods/#digitalhub.entities.dataitem._base.entity.Dataitem.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"reference/objects/dataitem/methods/#io-methods","title":"I/O methods","text":"<p>I/O methods are used to handle objects as files.</p> <ul> <li><code>as_file()</code>: Dowloads the dataitem into a local temporary destination</li> <li><code>download()</code>: Downloads the dataitem into a specified path</li> <li><code>upload()</code>: Uploads the dataitem to dataitem spec path</li> </ul>"},{"location":"reference/objects/dataitem/methods/#digitalhub.entities.dataitem._base.entity.Dataitem.as_file","title":"<code>as_file</code>","text":"<p>Get object as file(s). It downloads the object from storage in a temporary folder and returns the list of downloaded files paths.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of file paths.</p>"},{"location":"reference/objects/dataitem/methods/#digitalhub.entities.dataitem._base.entity.Dataitem.download","title":"<code>download</code>","text":"<p>This function downloads one or more file from storage on local machine from spec.path. The files are downloaded into a destination folder. If the destination is not specified, it will set by default under the context path as '/', e.g. './dataitem'. The overwrite flag allows to overwrite existing file(s) in the destination folder. <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>str</code> <p>Destination path as filename or directory.</p> <code>None</code> <code>overwrite</code> <code>bool</code> <p>Specify if overwrite existing file(s). If file(s) already exist and overwrite is False, it will raise an error.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Download path.</p> <p>Examples:</p> <p>Download a single file:</p> <pre><code>&gt;&gt;&gt; path = entity.download()\n&gt;&gt;&gt; print(path)\ndataitem/data.csv\n</code></pre>"},{"location":"reference/objects/dataitem/methods/#digitalhub.entities.dataitem._base.entity.Dataitem.upload","title":"<code>upload</code>","text":"<p>Upload object from given local path to spec path destination. Source must be a local path. If the path is a folder, destination path (object's spec path) must be a folder or a partition ending with '/' (s3).</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str | list[str]</code> <p>Local filepath, directory or list of filepaths.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <p>Upload a single file:</p> <pre><code>&gt;&gt;&gt; entity.spec.path = 's3://bucket/data.csv'\n&gt;&gt;&gt; entity.upload('./data.csv')\n</code></pre> <p>Upload a folder:</p> <pre><code>&gt;&gt;&gt; entity.spec.path = 's3://bucket/data/'\n&gt;&gt;&gt; entity.upload('./data')\n</code></pre>"},{"location":"reference/objects/dataitem/methods/#kind-specific-methods","title":"Kind specific methods","text":"<p>Kind specific methods are used to express potential behaviors of different object kinds. See the kinds section for more information.</p>"},{"location":"reference/objects/function/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete functions. There are two ways to use them. The first is through the SDK and the second is through the <code>Project</code> object. The syntax is the same for all CRUD methods. If you want to manage functions from the project, you can use the <code>Project</code> object and avoid to specify the <code>project</code> parameter. In this last case, you need to specify every parameter as keyword argument.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n\n# Use CRUD method on project\n\nfunction = project.new_function(name=\"my-function\",\n                                kind=\"python\",\n                                code_src=\"function.py\",\n                                handler=\"function-handler\")\n\n# Use CRUD method from SDK\n\nfunction = dh.new_function(project=\"my-project\",\n                           name=\"my-function\",\n                           kind=\"python\",\n                           code_src=\"function.py\",\n                           handler=\"function-handler\")\n</code></pre> <p>A <code>function</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_function</code></li> </ul> <p>Read:</p> <ul> <li><code>get_function</code></li> <li><code>get_function_versions</code></li> <li><code>import_function</code></li> <li><code>list_functions</code></li> </ul> <p>Update:</p> <ul> <li><code>update_function</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_function</code></li> </ul>"},{"location":"reference/objects/function/crud/#create","title":"Create","text":"<p>You can create a function with the <code>new_function()</code>. The <code>kwargs</code> parameters are determined by the kind of the object, and are described in the kinds section.</p>"},{"location":"reference/objects/function/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"reference/objects/function/crud/#digitalhub.entities.function.crud.new_function","title":"<code>new_function</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>embedded</code> <code>bool</code> <p>Flag to determine if object spec must be embedded in project spec.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Function</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_function(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-function\",\n&gt;&gt;&gt;                    kind=\"python\",\n&gt;&gt;&gt;                    code_src=\"function.py\",\n&gt;&gt;&gt;                    handler=\"function-handler\")\n</code></pre>"},{"location":"reference/objects/function/crud/#read","title":"Read","text":"<p>To read functions you can use the <code>get_function()</code>, <code>get_function_versions()</code>, <code>list_functions()</code> or <code>import_function()</code> functions.</p>"},{"location":"reference/objects/function/crud/#get","title":"Get","text":"<p>This function searches for a single function into the backend. If you want to collect a function from the backend using <code>get_function()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-name&gt;:&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity name as <code>identifier</code>, the project name as <code>project</code> and the entity id as <code>entity_id</code> parameters. If you do not specify the entity id, you will get the latest version.</li> </ul>"},{"location":"reference/objects/function/crud/#digitalhub.entities.function.crud.get_function","title":"<code>get_function</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Function</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_function(\"store://my-function-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_function(\"my-function-name\"\n&gt;&gt;&gt;                    project=\"my-project\",\n&gt;&gt;&gt;                    entity_id=\"my-function-id\")\n</code></pre>"},{"location":"reference/objects/function/crud/#get-versions","title":"Get versions","text":"<p>This function returns all the versions of a function from the backend.</p>"},{"location":"reference/objects/function/crud/#digitalhub.entities.function.crud.get_function_versions","title":"<code>get_function_versions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Function]</code> <p>List of object instances.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_function_versions(\"store://my-function-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_function_versions(\"my-function-name\"\n&gt;&gt;&gt;                             project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/function/crud/#list","title":"List","text":"<p>This function returns all the latest functions from the backend related to a project.</p>"},{"location":"reference/objects/function/crud/#digitalhub.entities.function.crud.list_functions","title":"<code>list_functions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Function]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_functions(project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/function/crud/#import","title":"Import","text":"<p>This function load the function from a local yaml file descriptor.</p>"},{"location":"reference/objects/function/crud/#digitalhub.entities.function.crud.import_function","title":"<code>import_function</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Function</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_function(\"my-function.yaml\")\n</code></pre>"},{"location":"reference/objects/function/crud/#update","title":"Update","text":"<p>To update a function you can use the <code>update_function()</code> method.</p>"},{"location":"reference/objects/function/crud/#digitalhub.entities.function.crud.update_function","title":"<code>update_function</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Function</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Function</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_function(obj)\n</code></pre>"},{"location":"reference/objects/function/crud/#delete","title":"Delete","text":"<p>To delete a function you can use the <code>delete_function()</code> method.</p>"},{"location":"reference/objects/function/crud/#digitalhub.entities.function.crud.delete_function","title":"<code>delete_function</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>delete_all_versions</code> <code>bool</code> <p>Delete all versions of the named entity. If True, use entity name instead of entity key as identifier.</p> <code>False</code> <code>cascade</code> <code>bool</code> <p>Cascade delete.</p> <code>True</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <p>If delete_all_versions is False:</p> <pre><code>&gt;&gt;&gt; obj = delete_function(\"store://my-function-key\")\n</code></pre> <p>Otherwise:</p> <pre><code>&gt;&gt;&gt; obj = delete_function(\"function-name\",\n&gt;&gt;&gt;                       project=\"my-project\",\n&gt;&gt;&gt;                       delete_all_versions=True)\n</code></pre>"},{"location":"reference/objects/function/entity/","title":"Function","text":"<p>Functions are the logical description of something that the platform may execute and track for you. A function may represent code to run as a job, an ML function inference to be used as batch procedure or as a service, a data validation, etc.</p>"},{"location":"reference/objects/function/entity/#managing-functions-with-sdk","title":"Managing functions with SDK","text":"<p>Functions can be created and managed as entities with the SDK CRUD methods. This can be done directly from the package or through the <code>Project</code> object.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete functions.</li> <li>In the methods section, we will see what can be done with the <code>Function</code> object.</li> <li>In the kinds section, we will see what kinds are supported.</li> </ol>"},{"location":"reference/objects/function/kinds/","title":"Function kinds","text":"<p>At the moment, we support the following kinds and the related runtime:</p> <ul> <li><code>python</code></li> <li><code>dbt</code></li> <li><code>container</code></li> <li><code>modelserve</code></li> </ul> <p>For each different kind, the <code>Function</code> object has its own subclass with different <code>spec</code> and <code>status</code> attributes.</p> <p>Please see the runtime documentation for more information on the related to the various <code>spec</code> arguments.</p>"},{"location":"reference/objects/function/methods/","title":"Function object","text":"<p>The <code>Function</code> object comes with three sets of methods: CRUD methods, one run method and (eventual) kind specific methods.</p>"},{"location":"reference/objects/function/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"reference/objects/function/methods/#digitalhub.entities.function._base.entity.Function.save","title":"<code>save</code>","text":"<p>Save or update the entity into the backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity saved.</p>"},{"location":"reference/objects/function/methods/#digitalhub.entities.function._base.entity.Function.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"reference/objects/function/methods/#digitalhub.entities.function._base.entity.Function.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"reference/objects/function/methods/#run-method","title":"Run method","text":"<p>The <code>run()</code> method is used to execute the function.</p>"},{"location":"reference/objects/function/methods/#digitalhub.entities.function._base.entity.Function.run","title":"<code>run</code>","text":"<p>Run function. This method creates a new run and executes it.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>str</code> <p>Action to execute.</p> required <code>local_execution</code> <code>bool</code> <p>Flag to determine if object has local execution.</p> <code>False</code> <code>wait</code> <code>bool</code> <p>Flag to wait for execution.</p> <code>False</code> <code>log_info</code> <code>bool</code> <p>Flag to log information while waiting.</p> <code>True</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments passed to Run builder.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Run</code> <p>Run instance.</p>"},{"location":"reference/objects/function/methods/#kind-specific-methods","title":"Kind specific methods","text":"<p>Kind specific methods are used to express potential behaviors of different object kinds. See the kinds section for more information.</p>"},{"location":"reference/objects/model/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete models. There are two ways to use them. The first is through the SDK and the second is through the <code>Project</code> object. The syntax is the same for all CRUD methods. If you want to manage models from the project, you can use the <code>Project</code> object and avoid to specify the <code>project</code> parameter. In this last case, you need to specify every parameter as keyword argument.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n\n# Use CRUD method on project\n\nmodel = project.new_model(name=\"my-model\",\n                          kind=\"model\",\n                          path=\"path-to-some-model\")\n\n# Use CRUD method from SDK\n\nmodel = dh.new_model(project=\"my-project\",\n                     name=\"my-model\",\n                     kind=\"model\",\n                     path=\"path-to-some-model\")\n</code></pre> <p>A <code>model</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_model</code></li> <li><code>log_model</code></li> </ul> <p>Read:</p> <ul> <li><code>get_model</code></li> <li><code>get_model_versions</code></li> <li><code>import_model</code></li> <li><code>list_models</code></li> </ul> <p>Update:</p> <ul> <li><code>update_model</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_model</code></li> </ul>"},{"location":"reference/objects/model/crud/#create","title":"Create","text":"<p>You can create a model with the <code>new_model()</code> or with <code>log_model()</code> method. The <code>kwargs</code> parameters are determined by the kind of the object, and are described in the kinds section. The <code>kwargs</code> parameters are the same for both new and log methods.</p>"},{"location":"reference/objects/model/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"reference/objects/model/crud/#digitalhub.entities.model.crud.new_model","title":"<code>new_model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>embedded</code> <code>bool</code> <p>Flag to determine if object spec must be embedded in project spec.</p> <code>False</code> <code>path</code> <code>str</code> <p>Object path on local file system or remote storage. It is also the destination path of upload() method.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Model</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_model(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-model\",\n&gt;&gt;&gt;                    kind=\"model\",\n&gt;&gt;&gt;                    path=\"s3://my-bucket/my-key\")\n</code></pre>"},{"location":"reference/objects/model/crud/#log","title":"Log","text":"<p>This function create a new entity into the backend and also upload a local file into a model store (eg. S3).</p>"},{"location":"reference/objects/model/crud/#digitalhub.entities.model.crud.log_model","title":"<code>log_model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>source</code> <code>SourcesOrListOfSources</code> <p>Model location on local path.</p> required <code>path</code> <code>str</code> <p>Destination path of the model. If not provided, it's generated.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>New model spec parameters.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Model</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = log_model(project=\"my-project\",\n&gt;&gt;&gt;                 name=\"my-model\",\n&gt;&gt;&gt;                 kind=\"model\",\n&gt;&gt;&gt;                 source=\"./local-path\")\n</code></pre>"},{"location":"reference/objects/model/crud/#read","title":"Read","text":"<p>To read models you can use the <code>get_model()</code>, <code>get_model_versions()</code>, <code>list_models()</code> or <code>import_model()</code> functions.</p>"},{"location":"reference/objects/model/crud/#get","title":"Get","text":"<p>This function searches for a single model into the backend. If you want to collect a model from the backend using <code>get_model()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-name&gt;:&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity name as <code>identifier</code>, the project name as <code>project</code> and the entity id as <code>entity_id</code> parameters. If you do not specify the entity id, you will get the latest version.</li> </ul>"},{"location":"reference/objects/model/crud/#digitalhub.entities.model.crud.get_model","title":"<code>get_model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Model</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_model(\"store://my-model-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_model(\"my-model-name\"\n&gt;&gt;&gt;                 project=\"my-project\",\n&gt;&gt;&gt;                 entity_id=\"my-model-id\")\n</code></pre>"},{"location":"reference/objects/model/crud/#get-versions","title":"Get versions","text":"<p>This function returns all the versions of a model from the backend.</p>"},{"location":"reference/objects/model/crud/#digitalhub.entities.model.crud.get_model_versions","title":"<code>get_model_versions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Model]</code> <p>List of object instances.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; objs = get_model_versions(\"store://my-model-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; objs = get_model_versions(\"my-model-name\",\n&gt;&gt;&gt;                           project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/model/crud/#list","title":"List","text":"<p>This function returns all the latest models from the backend related to a project.</p>"},{"location":"reference/objects/model/crud/#digitalhub.entities.model.crud.list_models","title":"<code>list_models</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Model]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_models(project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/model/crud/#import","title":"Import","text":"<p>This function load the model from a local yaml file descriptor.</p>"},{"location":"reference/objects/model/crud/#digitalhub.entities.model.crud.import_model","title":"<code>import_model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Model</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_model(\"my-model.yaml\")\n</code></pre>"},{"location":"reference/objects/model/crud/#update","title":"Update","text":"<p>To update a model you can use the <code>update_model()</code> method.</p>"},{"location":"reference/objects/model/crud/#digitalhub.entities.model.crud.update_model","title":"<code>update_model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Model</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Model</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = get_model(\"store://my-model-key\")\n</code></pre>"},{"location":"reference/objects/model/crud/#delete","title":"Delete","text":"<p>To delete a model you can use the <code>delete_model()</code> method.</p>"},{"location":"reference/objects/model/crud/#digitalhub.entities.model.crud.delete_model","title":"<code>delete_model</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>delete_all_versions</code> <code>bool</code> <p>Delete all versions of the named entity. If True, use entity name instead of entity key as identifier.</p> <code>False</code> <code>cascade</code> <code>bool</code> <p>Cascade delete.</p> <code>True</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <p>If delete_all_versions is False:</p> <pre><code>&gt;&gt;&gt; obj = delete_model(\"store://my-model-key\")\n</code></pre> <p>Otherwise:</p> <pre><code>&gt;&gt;&gt; obj = delete_model(\"my-model-name\",\n&gt;&gt;&gt;                    project=\"my-project\",\n&gt;&gt;&gt;                    delete_all_versions=True)\n</code></pre>"},{"location":"reference/objects/model/entity/","title":"Models","text":"<p>Models are the representation of machine learning models stored as files in the artifact store.</p>"},{"location":"reference/objects/model/entity/#managing-models-with-sdk","title":"Managing models with SDK","text":"<p>Models can be created and managed as entities with the SDK CRUD methods. This can be done directly from the package or through the <code>Project</code> object. To manage models, you need to have at least <code>digitalhub[ml]</code> layer installed.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete models.</li> <li>In the methods section, we will see what can be done with the <code>Model</code> object.</li> <li>In the kinds section, we will see what kinds are supported.</li> </ol>"},{"location":"reference/objects/model/kinds/","title":"Model kinds","text":"<p>At the moment, we support the following kinds:</p> <ul> <li><code>model</code>: represents a generic ML model</li> <li><code>mlflow</code>: represents a MLflow model</li> <li><code>sklearn</code>: represents a scikit-learn model</li> <li><code>huggingface</code>: represents a HuggingFace model</li> </ul> <p>For each different kind, the <code>Model</code> object has its own subclass with different <code>spec</code> and <code>status</code> attributes.</p>"},{"location":"reference/objects/model/kinds/#model","title":"Model","text":"<p>The <code>model</code> kind indicates that the model is a generic ML model. It's usefull to represent a generic ML model as a <code>Model</code> object.</p>"},{"location":"reference/objects/model/kinds/#model-spec-parameters","title":"Model spec parameters","text":"Parameter Type Description Default <code>path</code> str Path of the model, can be a local path or a remote path, a single filepath or a directory/partition. required <code>framework</code> str Model framework (e.g. 'pytorch'). <code>None</code> <code>algorithm</code> str Model algorithm (e.g. 'resnet'). <code>None</code> <code>base_model</code> str Base model. <code>None</code> <code>parameters</code> dict Model parameters. <code>None</code> <code>metrics</code> dict Model metrics. <code>None</code>"},{"location":"reference/objects/model/kinds/#model-methods","title":"Model methods","text":"<p>The <code>model</code> kind has no additional methods.</p>"},{"location":"reference/objects/model/kinds/#mlflow","title":"Mlflow","text":"<p>The <code>mlflow</code> kind indicates that the model is an MLflow model. It's usefull to represent an MLflow model as a <code>Model</code> object.</p>"},{"location":"reference/objects/model/kinds/#mlflow-spec-parameters","title":"Mlflow spec parameters","text":"Parameter Type Description Default <code>path</code> str Path of the model, can be a local path or a remote path, a single filepath or a directory/partition. required <code>framework</code> str Model framework (e.g. 'pytorch'). <code>None</code> <code>algorithm</code> str Model algorithm (e.g. 'resnet'). <code>None</code> <code>base_model</code> str Base model. <code>None</code> <code>parameters</code> dict Model parameters. <code>None</code> <code>metrics</code> dict Model metrics. <code>None</code> <code>flavor</code> str Mlflow model flavor. <code>None</code> <code>model_config</code> dict Mlflow model config. <code>None</code> <code>input_datasets</code> list[Dataset] Mlflow input datasets (see below). <code>None</code> <code>signature</code> Signature Mlflow model signature (see below). <code>None</code>"},{"location":"reference/objects/model/kinds/#dataset","title":"Dataset","text":"Parameter Type Description Default <code>name</code> str Dataset name. <code>None</code> <code>digest</code> str Dataset digest. <code>None</code> <code>profile</code> str Dataset profile. <code>None</code> <code>schema</code> str Dataset schema. <code>None</code> <code>source</code> str Dataset source. <code>None</code> <code>source_type</code> str Dataset source type. <code>None</code>"},{"location":"reference/objects/model/kinds/#signature","title":"Signature","text":"Parameter Type Description Default <code>inputs</code> str Signature inputs. <code>None</code> <code>outputs</code> str Signature outputs. <code>None</code> <code>parameters</code> str Signature parameters. <code>None</code>"},{"location":"reference/objects/model/kinds/#mlflow-methods","title":"Mlflow methods","text":"<p>The <code>mlflow</code> kind has no additional methods.</p>"},{"location":"reference/objects/model/kinds/#sklearn","title":"Sklearn","text":"<p>The <code>sklearn</code> kind indicates that the model is an Sklearn model. It's usefull to represent an Sklearn model as a <code>Model</code> object.</p>"},{"location":"reference/objects/model/kinds/#sklearn-spec-parameters","title":"Sklearn spec parameters","text":"Parameter Type Description Default <code>path</code> str Path of the model, can be a local path or a remote path, a single filepath or a directory/partition. required <code>framework</code> str Model framework (e.g. 'pytorch'). <code>None</code> <code>algorithm</code> str Model algorithm (e.g. 'resnet'). <code>None</code> <code>base_model</code> str Base model. <code>None</code> <code>parameters</code> dict Model parameters. <code>None</code> <code>metrics</code> dict Model metrics. <code>None</code>"},{"location":"reference/objects/model/kinds/#sklearn-methods","title":"Sklearn methods","text":"<p>The <code>sklearn</code> kind has no additional methods.</p>"},{"location":"reference/objects/model/kinds/#huggingface","title":"Huggingface","text":"<p>The <code>huggingface</code> kind indicates that the model is an Huggingface model. It's usefull to represent an Huggingface model as a <code>Model</code> object.</p>"},{"location":"reference/objects/model/kinds/#huggingface-spec-parameters","title":"Huggingface spec parameters","text":"Parameter Type Description Default <code>path</code> str Path of the model, can be a local path or a remote path, a single filepath or a directory/partition. required <code>framework</code> str Model framework (e.g. 'pytorch'). <code>None</code> <code>algorithm</code> str Model algorithm (e.g. 'resnet'). <code>None</code> <code>base_model</code> str Base model. <code>None</code> <code>parameters</code> dict Model parameters. <code>None</code> <code>metrics</code> dict Model metrics. <code>None</code> <code>model_id</code> str Huggingface model id. If not specified, the model is loaded from the model path <code>None</code> <code>model_revision</code> str Huggingface model revision. <code>None</code>"},{"location":"reference/objects/model/kinds/#huggingface-methods","title":"Huggingface methods","text":"<p>The <code>huggingface</code> kind has no additional methods.</p>"},{"location":"reference/objects/model/methods/","title":"Model object","text":"<p>The <code>Model</code> object comes with three sets of methods: CRUD methods, I/O methods and kind specific methods.</p>"},{"location":"reference/objects/model/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"reference/objects/model/methods/#digitalhub.entities.model._base.entity.Model.save","title":"<code>save</code>","text":"<p>Save entity into backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>Model</code> <p>Entity saved.</p>"},{"location":"reference/objects/model/methods/#digitalhub.entities.model._base.entity.Model.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"reference/objects/model/methods/#digitalhub.entities.model._base.entity.Model.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"reference/objects/model/methods/#io-methods","title":"I/O methods","text":"<p>I/O methods are used to handle objects as files.</p> <ul> <li><code>as_file()</code>: Dowloads the model into a local temporary destination</li> <li><code>download()</code>: Downloads the model into a specified path</li> <li><code>upload()</code>: Uploads the model to model spec path</li> </ul>"},{"location":"reference/objects/model/methods/#digitalhub.entities.model._base.entity.Model.as_file","title":"<code>as_file</code>","text":"<p>Get object as file(s). It downloads the object from storage in a temporary folder and returns the list of downloaded files paths.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of file paths.</p>"},{"location":"reference/objects/model/methods/#digitalhub.entities.model._base.entity.Model.download","title":"<code>download</code>","text":"<p>This function downloads one or more file from storage on local machine from spec.path. The files are downloaded into a destination folder. If the destination is not specified, it will set by default under the context path as '/', e.g. './dataitem'. The overwrite flag allows to overwrite existing file(s) in the destination folder. <p>Parameters:</p> Name Type Description Default <code>destination</code> <code>str</code> <p>Destination path as filename or directory.</p> <code>None</code> <code>overwrite</code> <code>bool</code> <p>Specify if overwrite existing file(s). If file(s) already exist and overwrite is False, it will raise an error.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Download path.</p> <p>Examples:</p> <p>Download a single file:</p> <pre><code>&gt;&gt;&gt; path = entity.download()\n&gt;&gt;&gt; print(path)\ndataitem/data.csv\n</code></pre>"},{"location":"reference/objects/model/methods/#digitalhub.entities.model._base.entity.Model.upload","title":"<code>upload</code>","text":"<p>Upload object from given local path to spec path destination. Source must be a local path. If the path is a folder, destination path (object's spec path) must be a folder or a partition ending with '/' (s3).</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str | list[str]</code> <p>Local filepath, directory or list of filepaths.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <p>Upload a single file:</p> <pre><code>&gt;&gt;&gt; entity.spec.path = 's3://bucket/data.csv'\n&gt;&gt;&gt; entity.upload('./data.csv')\n</code></pre> <p>Upload a folder:</p> <pre><code>&gt;&gt;&gt; entity.spec.path = 's3://bucket/data/'\n&gt;&gt;&gt; entity.upload('./data')\n</code></pre>"},{"location":"reference/objects/model/methods/#model-specific-methods","title":"Model specific methods","text":"<p>There are several generic model methods on the <code>Model</code> object.</p> <ul> <li><code>log_metric</code>: Log a metric in the model.</li> </ul>"},{"location":"reference/objects/model/methods/#digitalhub.entities.model._base.entity.Model.log_metric","title":"<code>log_metric</code>","text":"<p>Log metric into entity status. A metric is named by a key and value (single number or list of numbers). The metric by default is put in a list or appended to an existing list. If single_value is True, the value will be a single number.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Key of the metric.</p> required <code>value</code> <code>MetricType</code> <p>Value of the metric.</p> required <code>overwrite</code> <code>bool</code> <p>If True, overwrite existing metric.</p> <code>False</code> <code>single_value</code> <code>bool</code> <p>If True, value is a single value.</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <p>Log a new value in a list</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"loss\", 0.002)\n</code></pre> <p>Append a new value in a list</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"loss\", 0.0019)\n</code></pre> <p>Log a list of values and append them to existing metric:</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"loss\", [0.0018, 0.0015])\n</code></pre> <p>Log a single value (not represented as list):</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"accuracy\", 0.9, single_value=True)\n</code></pre> <p>Log a list of values and overwrite existing metric:</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"accuracy\", [0.8, 0.9], overwrite=True)\n</code></pre>"},{"location":"reference/objects/model/methods/#kind-specific-methods","title":"Kind specific methods","text":"<p>Kind specific methods are used to express potential behaviors of different object kinds. See the kinds section for more information.</p>"},{"location":"reference/objects/project/config/","title":"Config","text":"<p>The <code>config</code> parameter can be used to provide a dictionary containing the project configuration like default store where to log artifacts, dataitems and models.</p>"},{"location":"reference/objects/project/config/#default-files-store","title":"Default files store","text":"<p>At the moment, the only supported default data store is <code>s3</code>. The format of the dictionary must be as this:</p> <pre><code>{\n    \"default_files_store\": \"s3://bucket\",\n}\n</code></pre>"},{"location":"reference/objects/project/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete projects.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n</code></pre> <p>A <code>project</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_project</code></li> </ul> <p>Read:</p> <ul> <li><code>get_project</code></li> <li><code>import_project</code></li> <li><code>load_project</code></li> </ul> <p>Read or create:</p> <ul> <li><code>get_or_create_project</code></li> </ul> <p>Update:</p> <ul> <li><code>update_project</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_project</code></li> </ul> <p>For project configuration options, please refer to the Config section, and the Setup section.</p>"},{"location":"reference/objects/project/crud/#create","title":"Create","text":"<p>You can create a project with the <code>new_project()</code> or with <code>log_project()</code> method.</p>"},{"location":"reference/objects/project/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"reference/objects/project/crud/#digitalhub.entities.project.crud.new_project","title":"<code>new_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Object name.</p> required <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>local</code> <code>bool</code> <p>If True, use local backend, if False use DHCore backend. Default to False.</p> <code>False</code> <code>config</code> <code>dict</code> <p>DHCore environment configuration.</p> <code>None</code> <code>context</code> <code>str</code> <p>The context local folder of the project.</p> <code>None</code> <code>setup_kwargs</code> <code>dict</code> <p>Setup keyword arguments passed to setup_project() function.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Project</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_project(\"my-project\")\n</code></pre>"},{"location":"reference/objects/project/crud/#read","title":"Read","text":"<p>To read projects you can use the <code>get_project()</code>, <code>import_project()</code> or <code>load_project()</code>.</p>"},{"location":"reference/objects/project/crud/#get","title":"Get","text":"<p>This function searches for a single project into the backend.</p>"},{"location":"reference/objects/project/crud/#digitalhub.entities.project.crud.get_project","title":"<code>get_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The Project name.</p> required <code>local</code> <code>bool</code> <p>Flag to determine if backend is local.</p> <code>False</code> <code>setup_kwargs</code> <code>dict</code> <p>Setup keyword arguments passed to setup_project() function.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Project</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = get_project(\"my-project\")\n</code></pre>"},{"location":"reference/objects/project/crud/#import","title":"Import","text":"<p>This function load the project from a local yaml file descriptor.</p>"},{"location":"reference/objects/project/crud/#digitalhub.entities.project.crud.import_project","title":"<code>import_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <code>local</code> <code>bool</code> <p>Flag to determine if backend is local.</p> <code>False</code> <code>setup_kwargs</code> <code>dict</code> <p>Setup keyword arguments passed to setup_project() function.</p> <code>None</code> <p>Returns:</p> Type Description <code>Project</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_project(\"my-project.yaml\")\n</code></pre>"},{"location":"reference/objects/project/crud/#load","title":"Load","text":"<p>This function returns a projects from the backend or from a local file according to the parameter passed to the function. If the parameter is <code>name</code>, the function will try to load the project from the backend. If the parameter is <code>file</code>, the function will try to load the project from the local file.</p>"},{"location":"reference/objects/project/crud/#digitalhub.entities.project.crud.load_project","title":"<code>load_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <code>local</code> <code>bool</code> <p>Flag to determine if backend is local.</p> <code>False</code> <code>setup_kwargs</code> <code>dict</code> <p>Setup keyword arguments passed to setup_project() function.</p> <code>None</code> <p>Returns:</p> Type Description <code>Project</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = load_project(\"my-project.yaml\")\n</code></pre>"},{"location":"reference/objects/project/crud/#read-or-create","title":"Read or create","text":"<p>You can read or create a project with the <code>get_or_create_project()</code> method.</p>"},{"location":"reference/objects/project/crud/#digitalhub.entities.project.crud.get_or_create_project","title":"<code>get_or_create_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Project name.</p> required <code>local</code> <code>bool</code> <p>Flag to determine if backend is local.</p> <code>False</code> <code>config</code> <code>dict</code> <p>DHCore environment configuration.</p> <code>None</code> <code>context</code> <code>str</code> <p>Folder where the project will saves its context locally.</p> <code>None</code> <code>setup_kwargs</code> <code>dict</code> <p>Setup keyword arguments passed to setup_project() function.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Project</code> <p>Object instance.</p>"},{"location":"reference/objects/project/crud/#update","title":"Update","text":"<p>To update a project you can use the <code>update_project()</code> method.</p>"},{"location":"reference/objects/project/crud/#digitalhub.entities.project.crud.update_project","title":"<code>update_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Project</code> <p>Object to update.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Project</code> <p>The updated object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_project(obj)\n</code></pre>"},{"location":"reference/objects/project/crud/#delete","title":"Delete","text":"<p>To delete a project you can use the <code>delete_project()</code> method.</p>"},{"location":"reference/objects/project/crud/#digitalhub.entities.project.crud.delete_project","title":"<code>delete_project</code>","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Project name.</p> required <code>cascade</code> <code>bool</code> <p>Flag to determine if delete is cascading.</p> <code>True</code> <code>clean_context</code> <code>bool</code> <p>Flag to determine if context will be deleted.</p> <code>True</code> <code>local</code> <code>bool</code> <p>Flag to determine if backend is local.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; delete_project(\"my-project\")\n</code></pre>"},{"location":"reference/objects/project/entity/","title":"Project","text":"<p>A <code>project</code> represents a data and AI application and is a container for different entities (code, assets, configuration, ...) that form the application. It is the context in which you can run functions and manage models, data, and artifacts.</p>"},{"location":"reference/objects/project/entity/#managing-projects-with-sdk","title":"Managing projects with SDK","text":"<p>Projects can be created and managed as entities with the SDK CRUD methods.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete projects.</li> <li>In the methods section, we will see what can be done with the <code>Project</code> object.</li> </ol>"},{"location":"reference/objects/project/methods/","title":"Project methods","text":"<p>The <code>Project</code> object comes with three sets of methods: CRUD methods, entity specific CRUD methods and project specific methods.</p>"},{"location":"reference/objects/project/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"reference/objects/project/methods/#digitalhub.entities.project._base.entity.Project.save","title":"<code>save</code>","text":"<p>Save entity into backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>If True, the object will be updated.</p> <code>False</code> <p>Returns:</p> Type Description <code>Project</code> <p>Entity saved.</p>"},{"location":"reference/objects/project/methods/#digitalhub.entities.project._base.entity.Project.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder. If the objects are not embedded, the objects are exported as a YAML file.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"reference/objects/project/methods/#digitalhub.entities.project._base.entity.Project.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>Project</code> <p>Project object.</p>"},{"location":"reference/objects/project/methods/#entity-crud","title":"Entity CRUD","text":"<p>The project acts as context for other entities as mentioned in the introduction. With a <code>Project</code> object, you can create, read, update and delete these entities. The methods exposed are basically the same as the CRUD entities, the only difference is that on the project object you omit the project name as parameter. The available methods and are:</p> <ul> <li><code>new</code>: create a new entity</li> <li><code>log</code>: create and upload an entity</li> <li><code>get</code>: get an entity from backend</li> <li><code>get_versions</code>: get all version for a named entity</li> <li><code>list</code>: list entities related to the project</li> <li><code>import</code>: import an entity</li> <li><code>update</code>: update an entity</li> <li><code>delete</code>: delete an entity</li> </ul> <p>For more information about the entity methods, see the rekative entity documentation:</p> <ul> <li><code>artifacts</code></li> <li><code>dataitems</code></li> <li><code>models</code></li> <li><code>functions</code></li> <li><code>workflows</code></li> <li><code>runs</code></li> <li><code>secrets</code></li> </ul>"},{"location":"reference/objects/project/methods/#project-specific-methods","title":"Project specific methods","text":"<p>The project object exposes the following methods:</p> <ul> <li><code>run</code>: execute a workflow from the project</li> </ul>"},{"location":"reference/objects/project/methods/#digitalhub.entities.project._base.entity.Project.run","title":"<code>run</code>","text":"<p>Run workflow project.</p> <p>Parameters:</p> Name Type Description Default <code>workflow</code> <code>str</code> <p>Workflow name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments passed to workflow.run().</p> <code>{}</code> <p>Returns:</p> Type Description <code>Run</code> <p>Run instance.</p>"},{"location":"reference/objects/project/setup/","title":"Setup kwargs","text":"<p>The <code>setup_kwargs</code> parameter can be used to provide a dictionary containing the project hook setup arguments. The concept behind this parameter is that at the beginning of the project lifecycle, the project can be configured with an hook script that will be executed when the project is created / got. First of all, the configuration script MUST comply with the following format:</p> <ul> <li>It must be a Python script named <code>setup_project.py</code> inside the project context directory.</li> <li>It must contain an handler (a python function) named <code>setup</code> as entrypoint.</li> <li>The <code>setup</code> function must accept a <code>Project</code> instance as the only positional argument.</li> <li><code>setup_kwargs</code> must be passed as keyword arguments to the <code>setup</code> function.</li> </ul> <p>The project setup will create a <code>.CHECK</code> file at the end of the <code>setup</code> function execution. This sentinel file is used to indicate that the project is set up and new executions will be ready.</p> <p>A use case scenario can be the instantiation of entities used by the user like artifacts or functions.</p> <p>Example:</p> <pre><code>setup_kwargs = {\n    \"some_arg1\": \"arg1\",\n    \"some_arg2\": \"arg2\"\n}\n\n# Setup script\n\ndef setup(project, some_arg1=None, some_arg2=None):\n    # Do something with project and args\n</code></pre>"},{"location":"reference/objects/run/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete runs. The syntax is the same for all CRUD methods.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\n# Use CRUD method from SDK\n\nrun = dh.new_run(project=\"my-project\",\n                 kind=\"python+run\",\n                 task=\"task-string\")\n</code></pre> <p>A <code>run</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_run</code></li> </ul> <p>Read:</p> <ul> <li><code>get_run</code></li> <li><code>import_run</code></li> <li><code>list_runs</code></li> </ul> <p>Update:</p> <ul> <li><code>update_run</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_run</code></li> </ul>"},{"location":"reference/objects/run/crud/#create","title":"Create","text":"<p>You can create a run with the <code>new_run()</code>. The <code>kwargs</code> parameters are determined by the kind of the object, and are described in the kinds section.</p>"},{"location":"reference/objects/run/crud/#new","title":"New","text":"<p>This run create a new entity and saves it into the backend.</p>"},{"location":"reference/objects/run/crud/#digitalhub.entities.run.crud.new_run","title":"<code>new_run</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>task</code> <code>str</code> <p>Name of the task associated with the run.</p> <code>None</code> <code>local_execution</code> <code>bool</code> <p>Flag to determine if object has local execution.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Run</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_run(project=\"my-project\",\n&gt;&gt;&gt;               kind=\"python+run\",\n&gt;&gt;&gt;               task=\"task-string\")\n</code></pre>"},{"location":"reference/objects/run/crud/#read","title":"Read","text":"<p>To read runs you can use the <code>get_run()</code>, <code>list_runs()</code> or <code>import_run()</code> runs.</p>"},{"location":"reference/objects/run/crud/#get","title":"Get","text":"<p>This run searches for a single run into the backend. If you want to collect a run from the backend using <code>get_run()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity id as <code>identifier</code>, the project name as <code>project</code>.</li> </ul>"},{"location":"reference/objects/run/crud/#digitalhub.entities.run.crud.get_run","title":"<code>get_run</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity ID.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Run</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_run(\"store://my-run-key\")\n</code></pre> <p>Using entity ID:</p> <pre><code>&gt;&gt;&gt; obj = get_run(\"my-run-id\"\n&gt;&gt;&gt;               project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/run/crud/#list","title":"List","text":"<p>This run returns all the latest runs from the backend related to a project.</p>"},{"location":"reference/objects/run/crud/#digitalhub.entities.run.crud.list_runs","title":"<code>list_runs</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Run]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_runs(project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/run/crud/#import","title":"Import","text":"<p>This run load the run from a local yaml file descriptor.</p>"},{"location":"reference/objects/run/crud/#digitalhub.entities.run.crud.import_run","title":"<code>import_run</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Run</code> <p>Object instance.</p>"},{"location":"reference/objects/run/crud/#update","title":"Update","text":"<p>To update a run you can use the <code>update_run()</code> method.</p>"},{"location":"reference/objects/run/crud/#digitalhub.entities.run.crud.update_run","title":"<code>update_run</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Run</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Run</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_run(obj)\n</code></pre>"},{"location":"reference/objects/run/crud/#delete","title":"Delete","text":"<p>To delete a run you can use the <code>delete_run()</code> method.</p>"},{"location":"reference/objects/run/crud/#digitalhub.entities.run.crud.delete_run","title":"<code>delete_run</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity ID.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = delete_run(\"store://my-run-key\")\n&gt;&gt;&gt; obj = delete_run(\"my-run-id\", project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/run/entity/","title":"Runs","text":"<p>Runs are the representation of the execution of a task through a function.</p>"},{"location":"reference/objects/run/entity/#managing-runs-with-sdk","title":"Managing runs with SDK","text":"<p>Runs are created with a <code>Function</code> or <code>Workflow</code> object through the <code>run</code> method. They can be managed as entities.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete runs.</li> <li>In the methods section, we will see what can be done with the <code>Run</code> object.</li> <li>In the kinds section, we will see what kinds are supported.</li> </ol>"},{"location":"reference/objects/run/kinds/","title":"Run kinds","text":"<p>At the moment, we support the following kinds and the related runtime:</p> <ul> <li><code>python</code></li> <li><code>dbt</code></li> <li><code>container</code></li> <li><code>modelserve</code></li> <li><code>kfp</code></li> </ul> <p>For each different kind, the <code>Run</code> object has its own subclass with different <code>spec</code> and <code>status</code> attributes.</p> <p>Please see the runtime documentation for more information on the related to the various <code>spec</code> arguments.</p>"},{"location":"reference/objects/run/methods/","title":"Run object","text":"<p>The <code>Run</code> object comes with three sets of methods: CRUD methods, generic run methods and (eventual) kind specific methods.</p>"},{"location":"reference/objects/run/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"reference/objects/run/methods/#digitalhub.entities.run._base.entity.Run.save","title":"<code>save</code>","text":"<p>Save or update the entity into the backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity saved.</p>"},{"location":"reference/objects/run/methods/#digitalhub.entities.run._base.entity.Run.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"reference/objects/run/methods/#digitalhub.entities.run._base.entity.Run.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"reference/objects/run/methods/#run-methods","title":"Run methods","text":"<p>There are several generic run methods on the <code>Run</code> object.</p> <ul> <li><code>run</code>: Start the run.</li> <li><code>wait</code>: Wait for the run to finish.</li> <li><code>stop</code>: Stop the run.</li> <li><code>resume</code>: Resume the run.</li> <li><code>log_metric</code>: Log a metric in the run.</li> </ul>"},{"location":"reference/objects/run/methods/#digitalhub.entities.run._base.entity.Run.run","title":"<code>run</code>","text":"<p>Run run.</p> <p>Returns:</p> Type Description <code>Run</code> <p>Run object.</p>"},{"location":"reference/objects/run/methods/#digitalhub.entities.run._base.entity.Run.wait","title":"<code>wait</code>","text":"<p>Wait for run to finish.</p> <p>Parameters:</p> Name Type Description Default <code>log_info</code> <code>bool</code> <p>If True, log information.</p> <code>True</code> <p>Returns:</p> Type Description <code>Run</code> <p>Run object.</p>"},{"location":"reference/objects/run/methods/#digitalhub.entities.run._base.entity.Run.stop","title":"<code>stop</code>","text":"<p>Stop run.</p> <p>Returns:</p> Type Description <code>None</code>"},{"location":"reference/objects/run/methods/#digitalhub.entities.run._base.entity.Run.resume","title":"<code>resume</code>","text":"<p>Resume run.</p> <p>Returns:</p> Type Description <code>None</code>"},{"location":"reference/objects/run/methods/#digitalhub.entities.run._base.entity.Run.log_metric","title":"<code>log_metric</code>","text":"<p>Log metric into entity status. A metric is named by a key and value (single number or list of numbers). The metric by default is put in a list or appended to an existing list. If single_value is True, the value will be a single number.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Key of the metric.</p> required <code>value</code> <code>MetricType</code> <p>Value of the metric.</p> required <code>overwrite</code> <code>bool</code> <p>If True, overwrite existing metric.</p> <code>False</code> <code>single_value</code> <code>bool</code> <p>If True, value is a single value.</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <p>Log a new value in a list</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"loss\", 0.002)\n</code></pre> <p>Append a new value in a list</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"loss\", 0.0019)\n</code></pre> <p>Log a list of values and append them to existing metric:</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"loss\", [0.0018, 0.0015])\n</code></pre> <p>Log a single value (not represented as list):</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"accuracy\", 0.9, single_value=True)\n</code></pre> <p>Log a list of values and overwrite existing metric:</p> <pre><code>&gt;&gt;&gt; entity.log_metric(\"accuracy\", [0.8, 0.9], overwrite=True)\n</code></pre>"},{"location":"reference/objects/run/methods/#kind-specific-methods","title":"Kind specific methods","text":"<p>Kind specific methods are used to express potential behaviors of different object kinds. See the kinds section for more information.</p>"},{"location":"reference/objects/secret/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete secrets. There are two ways to use them. The first is through the SDK and the second is through the <code>Project</code> object. The syntax is the same for all CRUD methods. If you want to manage secrets from the project, you can use the <code>Project</code> object and avoid to specify the <code>project</code> parameter. In this last case, you need to specify every parameter as keyword argument.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n\n# Use CRUD method on project\n\nsecret = project.new_secret(name=\"my-secret\",\n                            secret_value=\"some-value\")\n\n# Use CRUD method from SDK\n\nsecret = dh.new_secret(project=\"my-project\",\n                       name=\"my-secret\",\n                       secret_value=\"some-value\")\n</code></pre> <p>A <code>secret</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_secret</code></li> </ul> <p>Read:</p> <ul> <li><code>get_secret</code></li> <li><code>get_secret_versions</code></li> <li><code>import_secret</code></li> <li><code>list_secrets</code></li> </ul> <p>Update:</p> <ul> <li><code>update_secret</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_secret</code></li> </ul>"},{"location":"reference/objects/secret/crud/#create","title":"Create","text":"<p>You can create a secret with the <code>new_secret()</code>.</p>"},{"location":"reference/objects/secret/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"reference/objects/secret/crud/#digitalhub.entities.secret.crud.new_secret","title":"<code>new_secret</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>embedded</code> <code>bool</code> <p>Flag to determine if object spec must be embedded in project spec.</p> <code>False</code> <code>secret_value</code> <code>str</code> <p>Value of the secret.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Secret</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_secret(project=\"my-project\",\n&gt;&gt;&gt;                  name=\"my-secret\",\n&gt;&gt;&gt;                  secret_value=\"my-secret-value\")\n</code></pre>"},{"location":"reference/objects/secret/crud/#read","title":"Read","text":"<p>To read secrets you can use the <code>get_secret()</code>, <code>get_secret_versions()</code>, <code>list_secrets()</code> or <code>import_secret()</code> functions.</p>"},{"location":"reference/objects/secret/crud/#get","title":"Get","text":"<p>This function searches for a single secret into the backend. If you want to collect a secret from the backend using <code>get_secret()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-name&gt;:&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity name as <code>identifier</code>, the project name as <code>project</code> and the entity id as <code>entity_id</code> parameters. If you do not specify the entity id, you will get the latest version.</li> </ul>"},{"location":"reference/objects/secret/crud/#digitalhub.entities.secret.crud.get_secret","title":"<code>get_secret</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Secret</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_secret(\"store://my-secret-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_secret(\"my-secret-name\"\n&gt;&gt;&gt;                  project=\"my-project\",\n&gt;&gt;&gt;                  entity_id=\"my-secret-id\")\n</code></pre>"},{"location":"reference/objects/secret/crud/#get-versions","title":"Get versions","text":"<p>This function returns all the versions of a secret from the backend.</p>"},{"location":"reference/objects/secret/crud/#digitalhub.entities.secret.crud.get_secret_versions","title":"<code>get_secret_versions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Secret]</code> <p>List of object instances.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; objs = get_secret_versions(\"store://my-secret-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; objs = get_secret_versions(\"my-secret-name\",\n&gt;&gt;&gt;                            project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/secret/crud/#list","title":"List","text":"<p>This function returns all the latest secrets from the backend related to a project.</p>"},{"location":"reference/objects/secret/crud/#digitalhub.entities.secret.crud.list_secrets","title":"<code>list_secrets</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Secret]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_secrets(project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/secret/crud/#import","title":"Import","text":"<p>This function load the secret from a local yaml file descriptor.</p>"},{"location":"reference/objects/secret/crud/#digitalhub.entities.secret.crud.import_secret","title":"<code>import_secret</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Secret</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_secret(\"my-secret.yaml\")\n</code></pre>"},{"location":"reference/objects/secret/crud/#update","title":"Update","text":"<p>To update a secret you can use the <code>update_secret()</code> method.</p>"},{"location":"reference/objects/secret/crud/#digitalhub.entities.secret.crud.update_secret","title":"<code>update_secret</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Secret</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Secret</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_secret(obj)\n</code></pre>"},{"location":"reference/objects/secret/crud/#delete","title":"Delete","text":"<p>To delete a secret you can use the <code>delete_secret()</code> method.</p>"},{"location":"reference/objects/secret/crud/#digitalhub.entities.secret.crud.delete_secret","title":"<code>delete_secret</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>delete_all_versions</code> <code>bool</code> <p>Delete all versions of the named entity. If True, use entity name instead of entity key as identifier.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <p>If delete_all_versions is False:</p> <pre><code>&gt;&gt;&gt; obj = delete_secret(\"store://my-secret-key\")\n</code></pre> <p>Otherwise:</p> <pre><code>&gt;&gt;&gt; obj = delete_secret(\"my-secret-name\"\n&gt;&gt;&gt;                     project=\"my-project\",\n&gt;&gt;&gt;                     delete_all_versions=True)\n</code></pre>"},{"location":"reference/objects/secret/entity/","title":"Secrets","text":"<p>Working with different operations may imply the usage of a sensitive values, such as external API credentials, storage credentials, etc. In order to avoid embedding the credentials in the code of functions, you can explicitly manage credentials as secrets. This operation exploits the underlying secret management subsystem, such as Kubernetes Secret Manager.</p> <p>It is possible to define custom secrets at the level of a single project. The project secrets are managed as any other project-related entities, such as functions, dataitems, etc.</p> <p>At the level of the project the secrets are represented as key-value pairs. The management of secrets is delegated to a secret provider, and currently only Kubernetes Secret Manager is supported. Each project has its own Kubernetes secret, where all the key-value pairs are stored.</p>"},{"location":"reference/objects/secret/entity/#managing-secrets-with-sdk","title":"Managing secrets with SDK","text":"<p>Secrets can be created and managed as entities with the SDK CRUD methods. This can be done directly from the package or through the <code>Project</code> object.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete secrets.</li> <li>In the methods section, we will see what can be done with the <code>Secret</code> object.</li> </ol>"},{"location":"reference/objects/secret/methods/","title":"Secret object","text":"<p>The <code>Secret</code> object comes with two sets of methods: CRUD methods and read/write methods.</p>"},{"location":"reference/objects/secret/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"reference/objects/secret/methods/#digitalhub.entities.secret._base.entity.Secret.save","title":"<code>save</code>","text":"<p>Save or update the entity into the backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity saved.</p>"},{"location":"reference/objects/secret/methods/#digitalhub.entities.secret._base.entity.Secret.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"reference/objects/secret/methods/#digitalhub.entities.secret._base.entity.Secret.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"reference/objects/secret/methods/#io-methods","title":"I/O methods","text":"<p>I/O methods are used to handle objects as files.</p> <ul> <li><code>set_secret_value()</code>: Set (update) the secret value</li> <li><code>read_secret_value()</code>: Read the secret value</li> </ul>"},{"location":"reference/objects/secret/methods/#digitalhub.entities.secret._base.entity.Secret.set_secret_value","title":"<code>set_secret_value</code>","text":"<p>Update the secret value with a new one.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>Value of the secret.</p> required <p>Returns:</p> Type Description <code>None</code>"},{"location":"reference/objects/secret/methods/#digitalhub.entities.secret._base.entity.Secret.read_secret_value","title":"<code>read_secret_value</code>","text":"<p>Read the secret value from backend.</p> <p>Returns:</p> Type Description <code>str</code> <p>Value of the secret.</p>"},{"location":"reference/objects/trigger/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete triggers. The syntax is the same for all CRUD methods.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\n\n# Use CRUD method from SDK\ntrigger = dh.new_trigger(project=\"my-project\",\n                        name=\"my-trigger\",\n                        kind=\"scheduler\",\n                        task=\"my-task\",\n                        function=\"my-function\")\n</code></pre> <p>A <code>trigger</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_trigger</code></li> </ul> <p>Read:</p> <ul> <li><code>get_trigger</code></li> <li><code>get_trigger_versions</code></li> <li><code>import_trigger</code></li> <li><code>list_triggers</code></li> </ul> <p>Update:</p> <ul> <li><code>update_trigger</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_trigger</code></li> </ul>"},{"location":"reference/objects/trigger/crud/#create","title":"Create","text":"<p>You can create a trigger with the <code>new_trigger()</code>. The <code>kwargs</code> parameters are determined by the kind of the object, and are described in the kinds section.</p>"},{"location":"reference/objects/trigger/crud/#new","title":"New","text":"<p>This function creates a new entity and saves it into the backend.</p>"},{"location":"reference/objects/trigger/crud/#digitalhub.entities.trigger.crud.new_trigger","title":"<code>new_trigger</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>kind</code> <code>str</code> <p>Kind the object.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>embedded</code> <code>bool</code> <p>Flag to determine if object spec must be embedded in project spec.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Trigger</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_trigger(project=\"my-project\",\n&gt;&gt;&gt;                   kind=\"trigger\",\n&gt;&gt;&gt;                   name=\"my-trigger\",)\n</code></pre>"},{"location":"reference/objects/trigger/crud/#read","title":"Read","text":"<p>To read triggers you can use the <code>get_trigger()</code>, <code>get_trigger_versions()</code>, <code>list_triggers()</code> or <code>import_trigger()</code> functions.</p>"},{"location":"reference/objects/trigger/crud/#get","title":"Get","text":"<p>This function searches for a single trigger into the backend. If you want to collect a trigger from the backend using <code>get_trigger()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-name&gt;:&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity name as <code>identifier</code>, the project name as <code>project</code> and the entity id as <code>entity_id</code> parameters. If you do not specify the entity id, you will get the latest version.</li> </ul>"},{"location":"reference/objects/trigger/crud/#digitalhub.entities.trigger.crud.get_trigger","title":"<code>get_trigger</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Trigger</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_trigger(\"store://my-trigger-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_trigger(\"my-trigger-name\"\n&gt;&gt;&gt;                  project=\"my-project\",\n&gt;&gt;&gt;                  entity_id=\"my-trigger-id\")\n</code></pre>"},{"location":"reference/objects/trigger/crud/#get-versions","title":"Get versions","text":"<p>This function returns all the versions of a trigger from the backend.</p>"},{"location":"reference/objects/trigger/crud/#digitalhub.entities.trigger.crud.get_trigger_versions","title":"<code>get_trigger_versions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Trigger]</code> <p>List of object instances.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; objs = get_trigger_versions(\"store://my-trigger-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; objs = get_trigger_versions(\"my-trigger-name\",\n&gt;&gt;&gt;                            project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/trigger/crud/#list","title":"List","text":"<p>This function returns all the latest triggers from the backend related to a project.</p>"},{"location":"reference/objects/trigger/crud/#digitalhub.entities.trigger.crud.list_triggers","title":"<code>list_triggers</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Trigger]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_triggers(project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/trigger/crud/#import","title":"Import","text":"<p>This function loads the trigger from a local yaml file descriptor.</p>"},{"location":"reference/objects/trigger/crud/#digitalhub.entities.trigger.crud.import_trigger","title":"<code>import_trigger</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Trigger</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_trigger(\"my-trigger.yaml\")\n</code></pre>"},{"location":"reference/objects/trigger/crud/#update","title":"Update","text":"<p>To update a trigger you can use the <code>update_trigger()</code> method.</p>"},{"location":"reference/objects/trigger/crud/#digitalhub.entities.trigger.crud.update_trigger","title":"<code>update_trigger</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Trigger</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Trigger</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_trigger(obj)\n</code></pre>"},{"location":"reference/objects/trigger/crud/#delete","title":"Delete","text":"<p>To delete a trigger you can use the <code>delete_trigger()</code> method.</p>"},{"location":"reference/objects/trigger/crud/#digitalhub.entities.trigger.crud.delete_trigger","title":"<code>delete_trigger</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>delete_all_versions</code> <code>bool</code> <p>Delete all versions of the named entity. If True, use entity name instead of entity key as identifier.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <p>If delete_all_versions is False:</p> <pre><code>&gt;&gt;&gt; obj = delete_trigger(\"store://my-trigger-key\")\n</code></pre> <p>Otherwise:</p> <pre><code>&gt;&gt;&gt; obj = delete_trigger(\"my-trigger-name\"\n&gt;&gt;&gt;                     project=\"my-project\",\n&gt;&gt;&gt;                     delete_all_versions=True)\n</code></pre>"},{"location":"reference/objects/trigger/entity/","title":"Trigger","text":"<p>Triggers are the logical description of how and when jobs should be executed on the platform. A trigger controls the scheduling and execution of tasks, defining when and under what conditions they should run. This can include time-based scheduling, event-driven execution, or other triggering mechanisms.</p>"},{"location":"reference/objects/trigger/entity/#managing-triggers-with-sdk","title":"Managing triggers with SDK","text":"<p>Triggers can be created and managed as entities with the SDK CRUD methods. This can be done directly from the package.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete triggers.</li> <li>In the methods section, we will see what can be done with the <code>Trigger</code> object.</li> <li>In the kinds section, we will see what kinds are supported.</li> </ol>"},{"location":"reference/objects/trigger/kinds/","title":"Trigger kinds","text":"<p>At the moment, we support the following kinds:</p> <ul> <li><code>scheduler</code> - Time-based trigger that uses cron expressions to schedule task execution</li> <li><code>lifecycle</code> - Event-based trigger that responds to entity state changes</li> </ul> <p>For each different kind, the <code>Trigger</code> object has its own subclass with different <code>spec</code> and <code>status</code> attributes.</p>"},{"location":"reference/objects/trigger/kinds/#scheduler-trigger","title":"Scheduler Trigger","text":"<p>The scheduler trigger allows you to execute tasks on a schedule using cron expressions.</p> <p>Required parameters:</p> <ul> <li><code>task</code> - The task to execute</li> <li><code>schedule</code> - Quartz cron expression</li> <li>One of:</li> <li><code>function</code> - The function to execute</li> <li><code>workflow</code> - The workflow to execute</li> </ul> <p>Example:</p> <pre><code>trigger = dh.new_trigger(\n    project=\"my-project\",\n    name=\"daily-run\",\n    kind=\"scheduler\",\n    task=\"my-task\",\n    function=\"my-function\",\n    schedule=\"0 0 * * *\"  # Run daily at midnight\n)\n</code></pre>"},{"location":"reference/objects/trigger/kinds/#lifecycle-trigger","title":"Lifecycle Trigger","text":"<p>The lifecycle trigger executes tasks in response to entity state changes.</p> <p>Required parameters:</p> <ul> <li><code>task</code> - The task to execute</li> <li><code>key</code> - The entity key to monitor</li> <li><code>states</code> - List of states to trigger on</li> <li>One of:</li> <li><code>function</code> - The function to execute</li> <li><code>workflow</code> - The workflow to execute</li> </ul> <p>Example:</p> <pre><code>trigger = dh.new_trigger(\n    project=\"my-project\",\n    name=\"model-complete\",\n    kind=\"lifecycle\",\n    task=\"my-task\",\n    function=\"my-function\",\n    key=\"store://project/model/kind/name\",\n    states=[\"completed\"]\n)\n</code></pre> <p>Please see the trigger entities documentation for more details on creating and managing triggers.</p>"},{"location":"reference/objects/trigger/methods/","title":"Trigger object","text":"<p>The <code>Trigger</code> object comes with two sets of methods: CRUD methods and status methods inherited from the <code>VersionedEntity</code> class.</p>"},{"location":"reference/objects/trigger/methods/#crud-methods","title":"CRUD methods","text":"<p>CRUD methods are used to interact with the entity object in the backend or locally:</p> <ul> <li><code>save()</code>: Save or update the entity into the backend</li> <li><code>export()</code>: Export the entity locally as yaml file</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend</li> </ul>"},{"location":"reference/objects/trigger/methods/#digitalhub.entities.trigger._base.entity.Trigger.save","title":"<code>save</code>","text":"<p>Save or update the entity into the backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity saved.</p>"},{"location":"reference/objects/trigger/methods/#digitalhub.entities.trigger._base.entity.Trigger.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"reference/objects/trigger/methods/#digitalhub.entities.trigger._base.entity.Trigger.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"reference/objects/trigger/methods/#trigger-specifications","title":"Trigger Specifications","text":"<p>The trigger object has specific attributes based on its kind:</p>"},{"location":"reference/objects/trigger/methods/#base-trigger","title":"Base Trigger","text":"<p>All triggers have these base specifications:</p> <ul> <li><code>task</code>: The task to execute</li> <li><code>template</code>: Configuration template</li> <li><code>function</code> or <code>workflow</code>: The target to execute (either a function or workflow)</li> </ul>"},{"location":"reference/objects/trigger/methods/#scheduler-trigger","title":"Scheduler Trigger","text":"<p>Additional specifications:</p> <ul> <li><code>schedule</code>: Quartz cron expression</li> </ul>"},{"location":"reference/objects/trigger/methods/#lifecycle-trigger","title":"Lifecycle Trigger","text":"<p>Additional specifications:</p> <ul> <li><code>key</code>: Entity key to monitor (format: <code>store://&lt;project&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;name&gt;</code>)</li> <li><code>states</code>: List of states that will trigger execution</li> </ul> <p>For more details about trigger kinds and their specific configurations, see the kinds section.</p>"},{"location":"reference/objects/trigger/methods/#creating-triggers-from-functions-and-workflows","title":"Creating Triggers from Functions and Workflows","text":"<p>Triggers can be created directly from Function and Workflow objects using their <code>trigger()</code> method. This provides a convenient way to set up triggers for specific functions or workflows.</p> <p>Example using a Function:</p> <pre><code>function = project.get_function(\"my-function\")\n\n# Create a scheduler trigger\ntrigger = function.trigger(\n    action=\"job\",\n    trigger_kind=\"scheduler\",\n    trigger_name=\"daily-function-run\",\n    schedule=\"0 0 * * *\"  # Run daily at midnight\n)\n\n# Create a lifecycle trigger\ntrigger = function.trigger(\n    action=\"job\",\n    trigger_kind=\"lifecycle\",\n    trigger_name=\"function-on-event\",\n    key=\"store://project/model/kind/name\",\n    states=[\"COMPLETED\"]\n)\n</code></pre> <p>Example using a Workflow:</p> <pre><code>workflow = project.get_workflow(\"my-workflow\")\n\n# Create a scheduler trigger\ntrigger = workflow.trigger(\n    action=\"pipeline\",\n    trigger_kind=\"scheduler\",\n    trigger_name=\"weekly-workflow-run\",\n    schedule=\"0 0 * * 0\"  # Run weekly on Sunday\n)\n\n# Create a lifecycle trigger\ntrigger = workflow.trigger(\n    action=\"pipeline\",\n    trigger_kind=\"lifecycle\",\n    trigger_name=\"workflow-on-event\",\n    key=\"store://project/model/kind/name\",\n    states=[\"completed\"]\n)\n</code></pre>"},{"location":"reference/objects/workflow/crud/","title":"CRUD","text":"<p>The CRUD methods are used to create, read, update and delete workflows. There are two ways to use them. The first is through the SDK and the second is through the <code>Project</code> object. The syntax is the same for all CRUD methods. If you want to manage workflows from the project, you can use the <code>Project</code> object and avoid to specify the <code>project</code> parameter. In this last case, you need to specify every parameter as keyword argument.</p> <p>Example:</p> <pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my-project\")\n\n# Use CRUD method on project\n\nworkflow = project.new_workflow(name=\"my-workflow\",\n                                kind=\"kfp\",\n                                code_src=\"pipeline.py\",\n                                handler=\"pipeline-handler\")\n\n# Use CRUD method from SDK\n\nworkflow = dh.new_workflow(project=\"my-project\",\n                           name=\"my-function\",\n                           kind=\"kfp\",\n                           code_src=\"pipeline.py\",\n                           handler=\"pipeline-handler\")\n</code></pre> <p>A <code>workflow</code> entity can be managed with the following methods.</p> <p>Create:</p> <ul> <li><code>new_workflow</code></li> </ul> <p>Read:</p> <ul> <li><code>get_workflow</code></li> <li><code>get_workflow_versions</code></li> <li><code>import_workflow</code></li> <li><code>list_workflows</code></li> </ul> <p>Update:</p> <ul> <li><code>update_workflow</code></li> </ul> <p>Delete:</p> <ul> <li><code>delete_workflow</code></li> </ul>"},{"location":"reference/objects/workflow/crud/#create","title":"Create","text":"<p>You can create a workflow with the <code>new_workflow()</code>. The <code>kwargs</code> parameters are determined by the kind of the object, and are described in the kinds section.</p>"},{"location":"reference/objects/workflow/crud/#new","title":"New","text":"<p>This function create a new entity and saves it into the backend.</p>"},{"location":"reference/objects/workflow/crud/#digitalhub.entities.workflow.crud.new_workflow","title":"<code>new_workflow</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>name</code> <code>str</code> <p>Object name.</p> required <code>uuid</code> <code>str</code> <p>ID of the object.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the object (human readable).</p> <code>None</code> <code>labels</code> <code>list[str]</code> <p>List of labels.</p> <code>None</code> <code>embedded</code> <code>bool</code> <p>Flag to determine if object spec must be embedded in project spec.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Spec keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Workflow</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = new_function(project=\"my-project\",\n&gt;&gt;&gt;                    name=\"my-workflow\",\n&gt;&gt;&gt;                    kind=\"kfp\",\n&gt;&gt;&gt;                    code_src=\"pipeline.py\",\n&gt;&gt;&gt;                    handler=\"pipeline-handler\")\n</code></pre>"},{"location":"reference/objects/workflow/crud/#read","title":"Read","text":"<p>To read workflows you can use the <code>get_workflow()</code>, <code>get_workflow_versions()</code>, <code>list_workflows()</code> or <code>import_workflow()</code> workflows.</p>"},{"location":"reference/objects/workflow/crud/#get","title":"Get","text":"<p>This function searches for a single workflow into the backend. If you want to collect a workflow from the backend using <code>get_workflow()</code>, you have two options:</p> <ul> <li>The first one is to use the <code>key</code> parameter which has the pattern <code>store://&lt;project-name&gt;/&lt;entity-type&gt;/&lt;entity-kind&gt;/&lt;entity-name&gt;:&lt;entity-id&gt;</code>.</li> <li>The second one is to use the entity name as <code>identifier</code>, the project name as <code>project</code> and the entity id as <code>entity_id</code> parameters. If you do not specify the entity id, you will get the latest version.</li> </ul>"},{"location":"reference/objects/workflow/crud/#digitalhub.entities.workflow.crud.get_workflow","title":"<code>get_workflow</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Workflow</code> <p>Object instance.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_workflow(\"store://my-workflow-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_workflow(\"my-workflow-name\"\n&gt;&gt;&gt;                    project=\"my-project\",\n&gt;&gt;&gt;                    entity_id=\"my-workflow-id\")\n</code></pre>"},{"location":"reference/objects/workflow/crud/#get-versions","title":"Get versions","text":"<p>This function returns all the versions of a workflow from the backend.</p>"},{"location":"reference/objects/workflow/crud/#digitalhub.entities.workflow.crud.get_workflow_versions","title":"<code>get_workflow_versions</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Workflow]</code> <p>List of object instances.</p> <p>Examples:</p> <p>Using entity key:</p> <pre><code>&gt;&gt;&gt; obj = get_workflow_versions(\"store://my-workflow-key\")\n</code></pre> <p>Using entity name:</p> <pre><code>&gt;&gt;&gt; obj = get_workflow_versions(\"my-workflow-name\"\n&gt;&gt;&gt;                             project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/workflow/crud/#list","title":"List","text":"<p>This function returns all the latest workflows from the backend related to a project.</p>"},{"location":"reference/objects/workflow/crud/#digitalhub.entities.workflow.crud.list_workflows","title":"<code>list_workflows</code>","text":"<p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>Project name.</p> required <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Workflow]</code> <p>List of object instances.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; objs = list_workflows(project=\"my-project\")\n</code></pre>"},{"location":"reference/objects/workflow/crud/#import","title":"Import","text":"<p>This function load the workflow from a local yaml file descriptor.</p>"},{"location":"reference/objects/workflow/crud/#digitalhub.entities.workflow.crud.import_workflow","title":"<code>import_workflow</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Path to YAML file.</p> required <p>Returns:</p> Type Description <code>Workflow</code> <p>Object instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = import_workflow(\"my-workflow.yaml\")\n</code></pre>"},{"location":"reference/objects/workflow/crud/#update","title":"Update","text":"<p>To update a workflow you can use the <code>update_workflow()</code> method.</p>"},{"location":"reference/objects/workflow/crud/#digitalhub.entities.workflow.crud.update_workflow","title":"<code>update_workflow</code>","text":"<p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Workflow</code> <p>Object to update.</p> required <p>Returns:</p> Type Description <code>Workflow</code> <p>Entity updated.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; obj = update_workflow(obj)\n</code></pre>"},{"location":"reference/objects/workflow/crud/#delete","title":"Delete","text":"<p>To delete a workflow you can use the <code>delete_workflow()</code> method.</p>"},{"location":"reference/objects/workflow/crud/#digitalhub.entities.workflow.crud.delete_workflow","title":"<code>delete_workflow</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Entity key (store://...) or entity name.</p> required <code>project</code> <code>str</code> <p>Project name.</p> <code>None</code> <code>entity_id</code> <code>str</code> <p>Entity ID.</p> <code>None</code> <code>delete_all_versions</code> <code>bool</code> <p>Delete all versions of the named entity. If True, use entity name instead of entity key as identifier.</p> <code>False</code> <code>cascade</code> <code>bool</code> <p>Cascade delete.</p> <code>True</code> <code>**kwargs</code> <code>dict</code> <p>Parameters to pass to the API call.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>Response from backend.</p> <p>Examples:</p> <p>If delete_all_versions is False:</p> <pre><code>&gt;&gt;&gt; obj = delete_workflow(\"store://my-workflow-key\")\n</code></pre> <p>Otherwise:</p> <pre><code>&gt;&gt;&gt; obj = delete_workflow(\"workflow-name\",\n&gt;&gt;&gt;                       project=\"my-project\",\n&gt;&gt;&gt;                       delete_all_versions=True)\n</code></pre>"},{"location":"reference/objects/workflow/entity/","title":"Workflow","text":"<p>Workflows allow for organizing the single operations in a advanced management pipelines, to perform a series operation of data processing, ML model training and serving, etc. Workflows represent long-running procedures defined as Directed Acyclic Graphs (DAGs) where each node is a single unit of work performed by the platform (e.g., as a Kubernetes Job).</p>"},{"location":"reference/objects/workflow/entity/#managing-workflows-with-sdk","title":"Managing workflows with SDK","text":"<p>Workflows can be created and managed as entities with the SDK CRUD methods. This can be done directly from the package or through the <code>Project</code> object.</p> <ol> <li>In the CRUD section, we will see how to create, read, update and delete workflows.</li> <li>In the methods section, we will see what can be done with the <code>Workflow</code> object.</li> <li>In the kinds section, we will see what kinds are supported.</li> </ol>"},{"location":"reference/objects/workflow/kinds/","title":"Workflow kinds","text":"<p>At the moment, we support the following kinds and the related runtime:</p> <ul> <li><code>kfp</code></li> </ul> <p>For each different kind, the <code>Workflow</code> object has its own subclass with different <code>spec</code> and <code>status</code> attributes.</p> <p>Please see the runtime documentation for more information on the related to the various <code>spec</code> arguments.</p>"},{"location":"reference/objects/workflow/methods/","title":"Workflow object","text":"<p>The <code>Workflow</code> object comes with three sets of methods: CRUD methods, one run method and (eventual) kind specific methods.</p>"},{"location":"reference/objects/workflow/methods/#crud-methods","title":"CRUD methods","text":"<p>Crud methods are used to interact with the entity object in the backend or locally.</p> <ul> <li><code>save()</code>: Save or update the entity into the backend.</li> <li><code>export()</code>: Export the entity locally as yaml file.</li> <li><code>refresh()</code>: Refresh (read) the entity from the backend.</li> </ul>"},{"location":"reference/objects/workflow/methods/#digitalhub.entities.workflow._base.entity.Workflow.save","title":"<code>save</code>","text":"<p>Save or update the entity into the backend.</p> <p>Parameters:</p> Name Type Description Default <code>update</code> <code>bool</code> <p>Flag to indicate update.</p> <code>False</code> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity saved.</p>"},{"location":"reference/objects/workflow/methods/#digitalhub.entities.workflow._base.entity.Workflow.export","title":"<code>export</code>","text":"<p>Export object as a YAML file in the context folder.</p> <p>Returns:</p> Type Description <code>str</code> <p>Exported filepath.</p>"},{"location":"reference/objects/workflow/methods/#digitalhub.entities.workflow._base.entity.Workflow.refresh","title":"<code>refresh</code>","text":"<p>Refresh object from backend.</p> <p>Returns:</p> Type Description <code>ContextEntity</code> <p>Entity refreshed.</p>"},{"location":"reference/objects/workflow/methods/#run-method","title":"Run method","text":"<p>The <code>run()</code> method is used to execute the workflow.</p>"},{"location":"reference/objects/workflow/methods/#digitalhub.entities.workflow._base.entity.Workflow.run","title":"<code>run</code>","text":"<p>Run workflow.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>str</code> <p>Action to execute.</p> required <code>wait</code> <code>bool</code> <p>Flag to wait for execution to finish.</p> <code>False</code> <code>log_info</code> <code>bool</code> <p>Flag to log information while waiting.</p> <code>True</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments passed to Run builder.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Run</code> <p>Run instance.</p>"},{"location":"reference/objects/workflow/methods/#kind-specific-methods","title":"Kind specific methods","text":"<p>Kind specific methods are used to express potential behaviors of different object kinds. See the kinds section for more information.</p>"},{"location":"reference/runtimes/","title":"Runtimes","text":"<p>Func- Modelserve \u2014 model serving and inference workloads.ions are the logical description of something that the platform may execute and track for you. A function may represent code to run as a job, an ML model inference to be used as batch procedure or as a service, a data validation, etc.</p> <p>In the platform we perform actions over functions (also referred to as \"tasks\"), such as job execution, deploy, container image build. A single action execution is called run, and the platform keeps track of these runs, with metadata about function version, operation parameters, and runtime parameters for a single execution.</p> <p>They are associated with a given runtime, which implements the actual execution and determines which actions are available. Examples are DBT, Container, Python, etc. Runtimes are highly specialized components that translate the representation of a given execution (as expressed in the run) into an actual operation performed via libraries, code, or external tools.</p> <p>Runtimes define the key point of extension of the platform: new runtimes may be added to implement the low-level logic of \"translating\" the high-level operation definition into an executable run. For example, the DBT runtime allows defining a transformation as a task that, given an input table reference, produces a dataset applying the SQL-defined function. In this case the runtime converts the specification and references into a Kubernetes Job that runs the DBT transformation and stores the resulting dataset.</p>"},{"location":"reference/runtimes/#supported-runtimes","title":"Supported runtimes","text":"<ul> <li>Python \u2014 general-purpose Python functions (job, serve, build).</li> <li>Container \u2014 run arbitrary container images as jobs or services.</li> <li>DBT \u2014 run DBT transformations for data modeling.</li> <li>Hera \u2014 Hera pipelines runtime (DAG/steps orchestration).</li> <li>ModelServe \u2014 model serving and inference workloads.</li> <li>KFP \u2014 Kubeflow Pipelines runtime for pipeline orchestration.</li> </ul>"},{"location":"reference/runtimes/kfp/","title":"KFP Pipelines Runtime","text":"<p>The KFP runtime allows you to run workflows within the platform. The runtime introduces a workflow of kind <code>kfp</code> and a task of kind <code>pipeline</code>.</p>"},{"location":"reference/runtimes/kfp/#prerequisites","title":"Prerequisites","text":"<p>Python version and libraries:</p> <ul> <li><code>python &gt;= 3.9, &lt;3.13</code></li> <li><code>digitalhub-runtime-kfp</code></li> </ul> <p>The package is available on PyPI:</p> <pre><code>python -m pip install digitalhub-runtime-kfp\n</code></pre>"},{"location":"reference/runtimes/kfp/#overview","title":"Overview","text":"<p>Use a workflow's <code>run()</code> method to build and execute Kubeflow Pipelines. The typical flow is:</p> <ol> <li>Define the functions to be executed (these may belong to other runtimes).</li> <li>Implement a pipeline function (see pipeline definition).</li> <li>Build the pipeline with <code>run(action=\"build\")</code> (required).</li> <li>Execute the pipeline with <code>run(action=\"pipeline\")</code>; the runtime will step through the KFP ContainerOps.</li> </ol>"},{"location":"reference/runtimes/kfp/#pipeline-definition","title":"Pipeline definition","text":"<p>To define a pipeline you need to define a function with the <code>def</code> keyword. You can give the function a name and declare its arguments as usual. From <code>digitalhub_runtime_kfp.dsl</code> import <code>pipeline_context</code>. It's a context-manager object that lets you order the steps of execution and chain inputs and outputs. Once you write the pipeline function, store it in a <code>.py</code> file. When defining the steps inside the pipeline, also specify inputs, outputs, parameters and values for the steps.</p>"},{"location":"reference/runtimes/kfp/#step-parameters","title":"Step parameters","text":"Parameter Type Example Description name str \"download\" Name of the step function str \"downloader-funct\" Name of the dh function to execute. It must exist in the dh project context action str \"job\" Action to execute inputs dict {\"url\": \"dataitem_key\", \"dataset\": previous_step.outputs[\"some_key\"]} Input dh parameters keys (dataitems, artifacts, models). The syntax for the inputs is the same as in the <code>kfp</code> package when it comes to link an output step to an input. outputs dict {\"dataset\": \"dataset\"} Dh outputs mapped parameters dict {\"param\": \"value\"} Function generic parameters values list [\"val1\", \"val2\"] List of non dh outputs referenced as strings"},{"location":"reference/runtimes/kfp/#workflow-definition-example","title":"Workflow definition example","text":"<pre><code>from digitalhub_runtime_kfp.dsl import pipeline_context\n\ndef myhandler(url):\n   # Use pipeline_context() manager\n   with pipeline_context() as pc:\n\n    # Define first step\n      step1 = pc.step(name=\"download\",                         # Name of the step 1\n                      function=\"downloader-funct\",              # Name of the dh function to execute\n                      action=\"job\",                             # Action to execute\n                      inputs={\"url\": url},                      # Input parameters\n                      outputs={\"dataset\": \"dataset\"})           # Mapped outputs\n\n      step2 = pc.step(name=\"extract_parking\",                  # Name of the step 2\n                      function=\"extract-parkings\",              # Name of the dh function to execute\n                      action=\"job\",                             # Action to execute\n                      inputs={\"di\": step1.outputs['dataset']},  # Input parameters from previous step\n                      outputs={\"parkings\": \"parkings\"})         # Mapped outputs\n</code></pre>"},{"location":"reference/runtimes/kfp/#workflow","title":"Workflow","text":"<p>The KFP runtime introduces a function of kind <code>kfp</code>.</p>"},{"location":"reference/runtimes/kfp/#workflow-parameters","title":"Workflow parameters","text":"Name Type Description Default project str Project name. Required only if creating from library, otherwise MUST NOT be set name str Name that identifies the object required kind str Workflow kind required uuid str ID of the object in form of UUID4 None description str Description of the object None labels list[str] List of labels None embedded bool Whether the object should be embedded in the project. True code_src str URI pointer to source code None code str Source code (plain text) None base64 str Source code (base64 encoded) None handler str Function entrypoint None lang str Source code language (hint) None image str Image where the workflow will be executed None tag str Tag of the image where the workflow will be executed None"},{"location":"reference/runtimes/kfp/#workflow-kinds","title":"Workflow kinds","text":"<p>The <code>kind</code> parameter must be one of the following:</p> <ul> <li><code>kfp</code></li> </ul>"},{"location":"reference/runtimes/kfp/#workflow-example","title":"Workflow example","text":"<pre><code># From project ...\n\nworkflow = project.new_workflow(name=\"workflow\",\n                                kind=\"kfp\",\n                                code_src=\"pipeline.py\",\n                                handler=\"handler\")\n\n# .. or from sdk\n\nworkflow = dh.new_workflow(project=\"my-project\",\n                           name=\"workflow\",\n                           kind=\"kfp\",\n                           code_src=\"pipeline.py\",\n                           handler=\"handler\")\n</code></pre>"},{"location":"reference/runtimes/kfp/#task","title":"Task","text":"<p>The KFP runtime introduces a task of kind <code>pipeline</code> that allows you to run a workflow. A <code>Task</code> is created with the <code>run()</code> method, so it's not managed directly by the user. The parameters for the task creation are passed directly to the <code>run()</code> method, and may vary depending on the kind of task.</p>"},{"location":"reference/runtimes/kfp/#task-parameters","title":"Task parameters","text":"Name Type Description Default Kind specific action str Task action required node_selector list[dict] Node selector None volumes list[dict] List of volumes None resources dict Resources restrictions None affinity dict Affinity None tolerations list[dict] Tolerations None envs list[dict] Env variables None secrets list[str] List of secret names None profile str Profile template None"},{"location":"reference/runtimes/kfp/#task-actions","title":"Task actions","text":"<p>Actions must be one of the following:</p> <ul> <li><code>build</code></li> <li><code>pipeline</code></li> </ul>"},{"location":"reference/runtimes/kfp/#task-example","title":"Task example","text":"<pre><code>run_build = workflow.run(action=\"build\")\n\nrun_pipeline = workflow.run(action=\"pipeline\")\n</code></pre>"},{"location":"reference/runtimes/kfp/#run","title":"Run","text":"<p>The <code>Run</code> object is, similar to the <code>Task</code>, created with the <code>run()</code> method. The run's parameters are passed alongside the task's ones.</p>"},{"location":"reference/runtimes/kfp/#run-parameters","title":"Run parameters","text":"Name Type Description Default Parameters dict Inputs for the pipeline function. None"},{"location":"reference/runtimes/kfp/#run-example","title":"Run example","text":"<pre><code>run_build = workflow.run(action=\"build\")\n\nrun = workflow.run(action=\"pipeline\", parameters={\"dataitem\": dataitem.key})\n</code></pre>"},{"location":"reference/runtimes/kfp/#run-methods","title":"Run methods","text":""},{"location":"reference/runtimes/kfp/#digitalhub_runtime_kfp.entities.run.kfp_run.entity.RunKfpRun.output","title":"<code>output</code>","text":"<p>Get run's output by name.</p> <p>Parameters:</p> Name Type Description Default <code>output_name</code> <code>str</code> <p>Key of the result.</p> required <code>as_key</code> <code>bool</code> <p>If True, return result as key.</p> <code>False</code> <code>as_dict</code> <code>bool</code> <p>If True, return result as dictionary.</p> <code>False</code> <p>Returns:</p> Type Description <code>Entity | dict | str | None</code> <p>Result.</p>"},{"location":"reference/runtimes/kfp/#digitalhub_runtime_kfp.entities.run.kfp_run.entity.RunKfpRun.outputs","title":"<code>outputs</code>","text":"<p>Get run's outputs.</p> <p>Parameters:</p> Name Type Description Default <code>as_key</code> <code>bool</code> <p>If True, return results as keys.</p> <code>False</code> <code>as_dict</code> <code>bool</code> <p>If True, return results as dictionaries.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict</code> <p>List of output objects.</p>"},{"location":"reference/runtimes/kfp/#digitalhub_runtime_kfp.entities.run.kfp_run.entity.RunKfpRun.result","title":"<code>result</code>","text":"<p>Get result by name.</p> <p>Parameters:</p> Name Type Description Default <code>result_name</code> <code>str</code> <p>Name of the result.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The result.</p>"},{"location":"reference/runtimes/kfp/#digitalhub_runtime_kfp.entities.run.kfp_run.entity.RunKfpRun.results","title":"<code>results</code>","text":"<p>Get results.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The results.</p>"},{"location":"reference/runtimes/kfp/#digitalhub_runtime_kfp.entities.run.kfp_run.entity.RunKfpRun.values","title":"<code>values</code>","text":"<p>Get values.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The values.</p>"},{"location":"reference/runtimes/container/examples/","title":"Examples","text":""},{"location":"reference/runtimes/container/examples/#function-creation","title":"Function Creation","text":"<pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project('my_project')\nfunction = dh.new_function(\n    kind='container',\n    name='my_function',\n    image='hello-world:latest'\n)\n</code></pre>"},{"location":"reference/runtimes/container/examples/#task-execution","title":"Task Execution","text":"<p>Job execution:</p> <pre><code>run = function.run(\n    action='job',\n    instructions=[\"apt install git -y\"],\n)\n</code></pre> <p>Build image (builds an image from source using a base image and instructions):</p> <pre><code>run = function.run(\n    action='build',\n    base_image='python:3.11-slim',\n    instructions=[\"apt-get update &amp;&amp; apt-get install -y git\"],\n    image='myrepo/myapp:0.1.0'\n)\n</code></pre> <p>Serve as service (exposes a service):</p> <pre><code>run = function.run(\n    action='serve',\n    replicas=2,\n    service_ports=[{\"port\": 8080, \"targetPort\": 8080}],\n    service_type='NodePort'\n)\n</code></pre> <p>Deploy application workload:</p> <pre><code>run = function.run(\n    action='deploy',\n    replicas=3,\n    envs=[{\"name\": \"ENV\", \"value\": \"prod\"}],\n    volumes=[{\"name\": \"data\", \"mountPath\": \"/data\"}]\n)\n</code></pre>"},{"location":"reference/runtimes/container/execution/","title":"Execution Overview","text":"<p>This section explains how to execute a function in the Container runtime. First, we examine the usage pattern, then delve into the parameter structure.</p>"},{"location":"reference/runtimes/container/execution/#usage-pattern","title":"Usage Pattern","text":"<p>To execute a container function, follow this pattern:</p> <ol> <li>Use <code>dh.new_function()</code> or <code>project.new_function()</code> to create the function, passing function parameters.</li> <li>Call <code>function.run()</code> with the desired action, passing task parameters and run parameters.</li> </ol> <pre><code># Create function with function parameters\nfunction = dh.new_function(\n    name=\"my-function\",\n    kind=\"container\",\n    image=\"my-image:latest\",\n    command=\"my-command\"\n)\n\n# Execute with task and run parameters\nrun = function.run(\n    action=\"job\",  # Task parameter\n    args=[\"arg1\", \"arg2\"]  # Run parameter\n)\n</code></pre> <p>Container functions are executed remotely on Kubernetes clusters managed by the platform.</p>"},{"location":"reference/runtimes/container/execution/#parameter-structure","title":"Parameter Structure","text":"<p>Parameters are organized into three categories:</p> <ul> <li> <p>Function Parameters: Define the function's <code>spec</code> attributes, such as image, command, and execution environment. These are set when creating the function.</p> </li> <li> <p>Task Parameters: Specify the action type and execution environment configuration. For Container runtimes, actions are <code>job</code>, <code>serve</code>, <code>build</code>, or <code>deploy</code>.</p> </li> <li> <p>Run Parameters: Control runtime behavior, such as command arguments passed to the container.</p> </li> </ul>"},{"location":"reference/runtimes/container/execution/#task-actions","title":"Task Actions","text":"<p>The Container runtime supports four task actions:</p> <ul> <li><code>job</code>: Execute a container as a one-off job</li> <li><code>serve</code>: Deploy a container as a long-lived service</li> <li><code>build</code>: Create a Docker image with custom instructions</li> <li><code>deploy</code>: Deploy an application workload</li> </ul>"},{"location":"reference/runtimes/container/execution/#detailed-documentation","title":"Detailed Documentation","text":"<p>For comprehensive details on each parameter category:</p> <ul> <li>Function Parameters \u2014 Complete reference for function creation and configuration.</li> <li>Task Parameters \u2014 Execution modes and runtime settings.</li> <li>Run Parameters \u2014 Input/output mappings and execution options.</li> </ul>"},{"location":"reference/runtimes/container/overview/","title":"Container Runtime","text":"<p>The Container runtime enables launching pods, jobs and services on Kubernetes. It is designed for remote, online execution.</p>"},{"location":"reference/runtimes/container/overview/#prerequisites","title":"Prerequisites","text":"<p>Supported Python version and required package:</p> <ul> <li><code>python &gt;= 3.9, &lt;3.13</code></li> <li><code>digitalhub-runtime-container</code></li> </ul> <p>Install the runtime from PyPI:</p> <pre><code>python -m pip install digitalhub-runtime-container\n</code></pre>"},{"location":"reference/runtimes/container/overview/#usage-overview","title":"Usage overview","text":"<p>Use the Container runtime to run containers on Kubernetes. It exposes a Function of kind <code>container</code> and several task actions to run jobs, serve services, build images, or deploy workloads.</p> <ul> <li><code>job</code>: Execute a container as a one-off job</li> <li><code>serve</code>: Deploy a container as a long-lived service</li> <li><code>build</code>: Create a Docker image with custom instructions</li> <li><code>deploy</code>: Deploy an application workload</li> </ul> <p>To execute a container workload on the platform:</p> <ol> <li>Create a <code>Function</code> resource that references your container image and declares inputs/outputs and call <code>function.run()</code> to execute the workload.</li> </ol> <p>See Examples for code samples.</p>"},{"location":"reference/runtimes/container/entities/function/","title":"Function","text":"<p>The Container runtime supports functions of kind <code>container</code>.</p>"},{"location":"reference/runtimes/container/entities/function/#parameters","title":"Parameters","text":"Name Type Description project str Project name. Required only when creating from the library; otherwise MUST NOT be set. name str Name that identifies the object. Required. kind str Function kind. Required. uuid str Object ID in UUID4 format. description str Description of the object. labels list[str] List of labels. embedded bool Whether the object should be embedded in the project. code_src str URI pointing to the source code. code str Source code provided as plain text. base64 str Source code encoded as base64. handler str Function entrypoint. lang str Source code language (informational). image str Container image to use for execution (name:tag). base_image str Base image used when building the execution image. (Required if task is <code>build</code>) image_pull_policy str Kubernetes image pull policy. command str Command to run inside the container."},{"location":"reference/runtimes/container/entities/function/#kinds","title":"Kinds","text":"<p>The <code>kind</code> parameter must be:</p> <ul> <li><code>container</code></li> </ul>"},{"location":"reference/runtimes/container/entities/run/","title":"Run","text":"<p>The <code>Run</code> object is created by calling <code>run()</code> on a <code>Function</code>. Run-level parameters are provided alongside task parameters.</p>"},{"location":"reference/runtimes/container/entities/run/#parameters","title":"Parameters","text":"Name Type Description args list[str] Command-line arguments to pass to the container command."},{"location":"reference/runtimes/container/entities/run/#methods","title":"Methods","text":"<p>There are no runtime-specific helper methods for container runs.</p>"},{"location":"reference/runtimes/container/entities/task/","title":"Task","text":"<p>The Container runtime supports four task actions: <code>job</code>, <code>serve</code>, <code>build</code>, and <code>deploy</code>. A <code>Task</code> is created via the <code>run()</code> method; task parameters are passed through that call and differ by action.</p>"},{"location":"reference/runtimes/container/entities/task/#parameters-shared","title":"Parameters (Shared)","text":"Name Type Description action str Task action. One of: <code>job</code>, <code>build</code>, <code>serve</code>, <code>deploy</code>. Required node_selector list[dict] Node selector. volumes list[dict] List of volumes. resources dict Resource limits/requests. Example: <code>{\"limits\": {\"cpu\": \"1\", \"memory\": \"512Mi\"}, \"requests\": {\"cpu\": \"250m\", \"memory\": \"128Mi\"}}</code>. affinity dict Affinity configuration. tolerations list[dict] Tolerations. envs list[dict] Environment variables. Example: <code>[{\"name\": \"FOO\", \"value\": \"bar\"}]</code>. secrets list[str] List of secret names. profile str Profile template."},{"location":"reference/runtimes/container/entities/task/#action-specific-parameters","title":"Action-Specific Parameters","text":""},{"location":"reference/runtimes/container/entities/task/#job","title":"Job","text":"Name Type Description fs_group int File system group ID. run_as_user int User ID to run the container. run_as_group int Group ID to run the container."},{"location":"reference/runtimes/container/entities/task/#serve","title":"Serve","text":"Name Type Description replicas int Number of replicas. service_ports list[dict] Ports to expose for the service. Example: <code>[{\"port\": 80, \"targetPort\": 8080}]</code>. service_type str Service type. run_as_user int User ID to run the container. run_as_group int Group ID to run the container."},{"location":"reference/runtimes/container/entities/task/#build","title":"Build","text":"Name Type Description instructions list[str] Build instructions executed as RUN lines in the generated Dockerfile. base_image str Base image used when building the execution image. Required for <code>build</code> unless a full image is provided. image str Target image name:tag to build/push. If not provided, a local image name may be generated by the runtime."},{"location":"reference/runtimes/container/entities/task/#deploy","title":"Deploy","text":"Name Type Description replicas int Number of replicas. fs_group int File system group ID. run_as_user int User ID to run the container. run_as_group int Group ID to run the container."},{"location":"reference/runtimes/container/entities/task/#instructions","title":"Instructions","text":"<p>Instructions are executed as <code>RUN</code> instructions in the generated Dockerfile. Example:</p> <pre><code>instructions = [\"apt-get install -y git\"]\n</code></pre>"},{"location":"reference/runtimes/container/entities/task/#task-actions","title":"Task Actions","text":"<p>Supported actions:</p> <ul> <li><code>job</code></li> <li><code>build</code></li> <li><code>serve</code></li> <li><code>deploy</code></li> </ul>"},{"location":"reference/runtimes/dbt/examples/","title":"Examples","text":""},{"location":"reference/runtimes/dbt/examples/#function-example","title":"Function Example","text":"<pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my_project\")\n\nsql = \"\"\"\nSELECT * FROM {{ ref(\"my_table_ref\") }}\n\"\"\"\n\ndataitem = project.new_dataitem(\"my_dataitem\", kind=\"table\", path=\"path-to-some-data\")\n\nfunction = dh.new_function(\n    kind=\"dbt\",\n    name=\"my_function\",\n    code=sql\n)\n\nrun = function.run(\n    action=\"transform\",\n    inputs={\n        \"my_table_ref\": dataitem.key\n    },\n    outputs={\n        \"output_table\": \"mapped-name\"\n    }\n)\n</code></pre>"},{"location":"reference/runtimes/dbt/execution/","title":"Execution Overview","text":"<p>This section explains how to execute a function in the DBT runtime. First, we examine the usage pattern, then delve into the parameter structure.</p>"},{"location":"reference/runtimes/dbt/execution/#usage-pattern","title":"Usage Pattern","text":"<p>To execute a dbt function, follow this pattern:</p> <ol> <li>Use <code>dh.new_function()</code> or <code>project.new_function()</code> to create the function, passing function parameters.</li> <li>Call <code>function.run()</code> with the desired action, passing task parameters and run parameters.</li> </ol> <pre><code># Create function with function parameters\nfunction = dh.new_function(\n    name=\"my-function\",\n    kind=\"dbt\",\n    code=\"SELECT * FROM {{ ref('my_table_ref') }}\"\n)\n\n# Execute with task and run parameters\nrun = function.run(\n    action=\"transform\",  # Task parameter\n    inputs={\"my_table_ref\": dataitem.key},  # Run parameter\n    outputs={\"output_table\": \"mapped-name\"}  # Run parameter\n)\n</code></pre> <p>You can control whether the execution happens locally on your machine or remotely on the platform by setting the <code>local_execution</code> parameter (see Local vs Remote Execution for details).</p>"},{"location":"reference/runtimes/dbt/execution/#local-vs-remote-execution","title":"Local vs Remote Execution","text":"<p>When executing a function, you can choose between local execution and remote execution by setting the <code>local_execution</code> parameter in the run parameters.</p> <ul> <li> <p>Local Execution (<code>local_execution=True</code>): The function runs directly on your local machine. You need to have the required dependencies of your function installed locally.</p> </li> <li> <p>Remote Execution (<code>local_execution=False</code>, default): The function is executed on a remote server or cluster managed by the platform.</p> </li> </ul>"},{"location":"reference/runtimes/dbt/execution/#parameter-structure","title":"Parameter Structure","text":"<p>Parameters are organized into three categories:</p> <ul> <li> <p>Function Parameters: Define the function's <code>spec</code> attributes, such as source code and execution environment. These are set when creating the function.</p> </li> <li> <p>Task Parameters: Specify the action type and execution environment configuration. For DBT runtimes, the action is <code>transform</code>.</p> </li> <li> <p>Run Parameters: Control runtime behavior, such as local vs. remote execution, input mappings, and output specifications.</p> </li> </ul>"},{"location":"reference/runtimes/dbt/execution/#task-actions","title":"Task Actions","text":"<p>The DBT runtime supports one task action:</p> <ul> <li><code>transform</code>: Execute a dbt transformation</li> </ul>"},{"location":"reference/runtimes/dbt/execution/#detailed-documentation","title":"Detailed Documentation","text":"<p>For comprehensive details on each parameter category:</p> <ul> <li>Function Parameters \u2014 Complete reference for function creation and configuration.</li> <li>Task Parameters \u2014 Execution modes and runtime settings.</li> <li>Run Parameters \u2014 Input/output mappings and execution options.</li> </ul>"},{"location":"reference/runtimes/dbt/overview/","title":"DBT Runtime","text":"<p>The DBT runtime lets you run dbt transformations against your data. It wraps the DBT CLI and exposes a Function of kind <code>dbt</code> and a Task action for transformations.</p>"},{"location":"reference/runtimes/dbt/overview/#prerequisites","title":"Prerequisites","text":"<p>Supported Python version and required package:</p> <ul> <li><code>python &gt;= 3.9, &lt;3.13</code></li> <li><code>digitalhub-runtime-dbt</code></li> </ul> <p>Install from PyPI:</p> <pre><code>python -m pip install digitalhub-runtime-dbt    # for remote execution\npython -m pip install digitalhub-runtime-dbt[local]  # for local execution\n</code></pre>"},{"location":"reference/runtimes/dbt/overview/#usage-overview","title":"Usage overview","text":"<p>Use a Function's <code>run()</code> method to execute a dbt transformation. At a high level the runtime:</p> <ol> <li>Downloads input dataitems (attempting to use each dataitem's <code>path</code> attribute). Supported path types include:</li> <li><code>http(s)://&lt;url&gt;</code></li> <li><code>s3://&lt;bucket&gt;/&lt;path&gt;</code></li> <li><code>sql://&lt;database&gt;(/&lt;schema-optional&gt;)/&lt;table&gt;</code></li> <li><code>&lt;local-path&gt;</code></li> <li>Loads the data into temporary, versioned tables in the configured Postgres database (tables named <code>&lt;dataitem-name&gt;_v&lt;dataitem-id&gt;</code>). Temporary tables are removed after execution.</li> <li>Collects the dbt project/code, generates required artifacts (profiles.yml, dbt_project.yml, etc.), and runs the dbt transformation.</li> <li>Writes the resulting table back to the configured Postgres database. The table name is derived from the <code>outputs</code> parameter. The runtime then creates a Dataitem representing the output (accessible via run.outputs()). Output tables are typically named <code>&lt;dataitem-output-name&gt;_v&lt;dataitem-output-id&gt;</code>.</li> </ol> <p>To execute a dbt transformation on the platform:</p> <ol> <li>Create a <code>Function</code> resource that references your dbt code and declares inputs/outputs and call <code>function.run()</code> to execute the transformation.</li> </ol> <p>See Examples for code samples.</p>"},{"location":"reference/runtimes/dbt/entities/function/","title":"Function","text":"<p>The DBT runtime defines a Function of kind <code>dbt</code> used to run SQL/dbt transformations.</p>"},{"location":"reference/runtimes/dbt/entities/function/#parameters","title":"Parameters","text":"Name Type Description project str Project name. Required only when creating from the library; otherwise MUST NOT be set. name str Name that identifies the object. Required. kind str Function kind. Required. uuid str Object ID in UUID4 format. description str Description of the object. labels list[str] List of labels. embedded bool Whether the object should be embedded in the project. code_src str URI pointing to the source code. code str Source code provided as plain text. base64 str Source code encoded as base64. handler str Function entrypoint. lang str Source code language (informational)."},{"location":"reference/runtimes/dbt/entities/function/#function-kinds","title":"Function Kinds","text":"<p>The <code>kind</code> parameter must be:</p> <ul> <li><code>dbt</code></li> </ul>"},{"location":"reference/runtimes/dbt/entities/run/","title":"Run","text":"<p>The <code>Run</code> object is created by calling <code>run()</code> on a Function. Run-level parameters are provided alongside task parameters.</p>"},{"location":"reference/runtimes/dbt/entities/run/#parameters","title":"Parameters","text":"Name Type Description local_execution bool Execute the run locally instead of remotely. (Default: False) inputs dict Mapping of function argument names to entity keys. outputs dict Mapping of outputs. Must be in the form: parameters dict Extra parameters passed to the function."},{"location":"reference/runtimes/dbt/entities/run/#methods","title":"Methods","text":"<p>Once the run is created, you can access its attributes and methods through the <code>run</code> object.</p>"},{"location":"reference/runtimes/dbt/entities/run/#digitalhub_runtime_dbt.entities.run.dbt_run.entity.RunDbtRun.output","title":"<code>output</code>","text":"<p>Get run's output by name.</p> <p>Parameters:</p> Name Type Description Default <code>output_name</code> <code>str</code> <p>Key of the result.</p> required <code>as_key</code> <code>bool</code> <p>If True, return result as key.</p> <code>False</code> <code>as_dict</code> <code>bool</code> <p>If True, return result as dictionary.</p> <code>False</code> <p>Returns:</p> Type Description <code>Entity | dict | str | None</code> <p>Result.</p>"},{"location":"reference/runtimes/dbt/entities/run/#digitalhub_runtime_dbt.entities.run.dbt_run.entity.RunDbtRun.outputs","title":"<code>outputs</code>","text":"<p>Get run's outputs.</p> <p>Parameters:</p> Name Type Description Default <code>as_key</code> <code>bool</code> <p>If True, return results as keys.</p> <code>False</code> <code>as_dict</code> <code>bool</code> <p>If True, return results as dictionaries.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict</code> <p>List of output objects.</p>"},{"location":"reference/runtimes/dbt/entities/run/#digitalhub_runtime_dbt.entities.run.dbt_run.entity.RunDbtRun.inputs","title":"<code>inputs</code>","text":"<p>Get inputs passed in spec as objects or as dictionaries.</p> <p>Parameters:</p> Name Type Description Default <code>as_dict</code> <code>bool</code> <p>If True, return inputs as dictionaries.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict</code> <p>Inputs.</p>"},{"location":"reference/runtimes/dbt/entities/task/","title":"Task","text":"<p>The DBT runtime provides a <code>transform</code> task action to run dbt transformations. A <code>Task</code> is created by calling <code>run()</code> on the Function; task parameters are passed through that call and may vary by action.</p>"},{"location":"reference/runtimes/dbt/entities/task/#parameters-shared","title":"Parameters (Shared)","text":"Name Type Description action str Task action. One of: <code>transform</code>. Required. node_selector list[dict] Node selector. volumes list[dict] List of volumes. resources dict Resource limits/requests. affinity dict Affinity configuration. tolerations list[dict] Tolerations. envs list[dict] Environment variables. secrets list[str] List of secret names. profile str Profile template."},{"location":"reference/runtimes/dbt/entities/task/#task-actions","title":"Task Actions","text":"<p>Supported actions:</p> <ul> <li><code>transform</code> \u2014 run a dbt transformation</li> </ul>"},{"location":"reference/runtimes/hera/define-pipeline/","title":"Define a Hera Pipeline","text":"<p>This section describes how to define a Hera pipeline function. A pipeline function is a Python function that returns a Hera <code>Workflow</code> object. Any arguments in the function signature are passed as <code>parameters</code> during <code>run(action=\"build\")</code>.</p>"},{"location":"reference/runtimes/hera/define-pipeline/#pipeline-function-anatomy","title":"Pipeline Function Anatomy","text":"<p>Define a pipeline by creating a Python function that returns a Hera <code>Workflow</code> object:</p> <pre><code>from hera.workflows import Workflow, DAG, Parameter\nfrom digitalhub_runtime_hera.dsl import step\n\ndef pipeline(url: str):\n    # Create a new Workflow with an entrypoint DAG and parameters\n    with Workflow(entrypoint=\"dag\", arguments=Parameter(name=\"url\")) as w:\n        with DAG(name=\"dag\"):\n            # Define workflow steps here\n            ...\n    return w\n</code></pre>"},{"location":"reference/runtimes/hera/define-pipeline/#typical-pipeline-structure","title":"Typical Pipeline Structure","text":"<ol> <li>Create a <code>Workflow</code> Hera object and set the entrypoint (usually a DAG).</li> <li>Use a <code>DAG</code> or <code>Steps</code> context to define the workflow structure.</li> <li>Add steps via <code>step(...)</code>, providing templates, function names, inputs/outputs and parameters.</li> <li>Chain steps using Hera operators to define dependencies.</li> <li>Return the <code>Workflow</code> Hera object.</li> </ol>"},{"location":"reference/runtimes/hera/define-pipeline/#dsl-components","title":"DSL Components","text":"<p>The runtime provides DSL helpers in <code>digitalhub_runtime_hera.dsl</code>:</p>"},{"location":"reference/runtimes/hera/define-pipeline/#step-function","title":"<code>step</code> function","text":"<p><code>step(**step_kwargs)</code> creates a workflow step (a Hera Task) inside a DAG or Steps context. Main arguments:</p> Parameter Type Example Description template dict {\"action\": \"job\"} Parameters template to pass to <code>function.run()</code> or <code>workflow.run()</code>. The <code>action</code> key is always required. To pass inputs from other steps use the <code>{{inputs.parameters.parameter_name}}</code> template syntax. function str \"download-data\" Name of the digitalhub function to execute. function_id str \"abc123\" Function ID (optional). workflow str \"my-workflow\" Workflow name (optional). workflow_id str \"def456\" Workflow ID (optional). name str \"step1\" Step name. inputs dict {\"some-input\": ANOTHER_STEP.get_parameter(\"some-output\")} Step inputs. Keys become Hera Parameters; values can reference other steps' outputs. outputs list [\"output1\"] Step outputs. These become Hera Outputs and Artifacts. <p>Other keyword arguments are forwarded to the underlying container template. <code>step</code> must be called inside a <code>DAG</code> or <code>Steps</code> context.</p>"},{"location":"reference/runtimes/hera/define-pipeline/#container_template-function","title":"<code>container_template</code> function","text":"<p><code>container_template(...)</code> builds a Hera container template for a workflow step. It returns a Hera <code>Container</code> object and accepts similar arguments to <code>step</code> (template, function, name, inputs, outputs, ...). Use it directly for advanced scenarios or custom templates.</p>"},{"location":"reference/runtimes/hera/define-pipeline/#pipeline-definition-example","title":"Pipeline Definition Example","text":"<pre><code>from hera.workflows import Workflow, DAG, Parameter\nfrom digitalhub_runtime_hera.dsl import step\n\ndef pipeline():\n    # Create a new Workflow with an entrypoint DAG and a parameter\n    with Workflow(entrypoint=\"dag\", arguments=Parameter(name=\"url\")) as w:\n        with DAG(name=\"dag\"):\n            # First step: takes the workflow parameter and outputs a dataset\n            A = step(template={\"action\":\"job\", \"inputs\": {\"url\": \"{{workflow.parameters.url}}\"}},\n                     function=\"download-data\",\n                     outputs=[\"dataset\"])\n\n            # Subsequent steps consume A's output\n            B = step(template={\"action\":\"job\", \"inputs\": {\"di\": \"{{inputs.parameters.di}}\"}},\n                     function=\"process-spire\",\n                     inputs={\"di\": A.get_parameter(\"dataset\")})\n\n            C = step(template={\"action\":\"job\", \"inputs\": {\"di\": \"{{inputs.parameters.di}}\"}},\n                     function=\"process-measures\",\n                     inputs={\"di\": A.get_parameter(\"dataset\")})\n\n            # Chain the steps\n            A &gt;&gt; [B, C]\n\n    return w\n</code></pre> <p>Next section provides an overview of the arguments required to create a <code>Workflow</code> object and start a run.</p>"},{"location":"reference/runtimes/hera/examples/","title":"Examples","text":""},{"location":"reference/runtimes/hera/examples/#pipeline-definition-example","title":"Pipeline Definition Example","text":"<pre><code>from hera.workflows import Workflow, DAG, Parameter\nfrom digitalhub_runtime_hera.dsl import step\n\ndef pipeline():\n    # Create a new Workflow with an entrypoint DAG and a parameter\n    with Workflow(entrypoint=\"dag\", arguments=Parameter(name=\"url\")) as w:\n        with DAG(name=\"dag\"):\n            # First step: takes the workflow parameter and outputs a dataset\n            A = step(template={\"action\":\"job\", \"inputs\": {\"url\": \"{{workflow.parameters.url}}\"}},\n                     function=\"download-data\",\n                     outputs=[\"dataset\"])\n\n            # Subsequent steps consume A's output\n            B = step(template={\"action\":\"job\", \"inputs\": {\"di\": \"{{inputs.parameters.di}}\"}},\n                     function=\"process-spire\",\n                     inputs={\"di\": A.get_parameter(\"dataset\")})\n\n            C = step(template={\"action\":\"job\", \"inputs\": {\"di\": \"{{inputs.parameters.di}}\"}},\n                     function=\"process-measures\",\n                     inputs={\"di\": A.get_parameter(\"dataset\")})\n\n            # Chain the steps\n            A &gt;&gt; [B, C]\n\n    return w\n</code></pre>"},{"location":"reference/runtimes/hera/examples/#workflow-creation-example","title":"Workflow Creation Example","text":"<pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my_project\")\n\n# From project\nworkflow = project.new_workflow(\n    name=\"workflow\",\n    kind=\"hera\",\n    code_src=\"pipeline.py\",\n    handler=\"pipeline\"\n)\n\n# Or from sdk\nworkflow = dh.new_workflow(\n    project=\"my-project\",\n    name=\"workflow\",\n    kind=\"hera\",\n    code_src=\"pipeline.py\",\n    handler=\"pipeline\"\n)\n</code></pre>"},{"location":"reference/runtimes/hera/examples/#run-examples","title":"Run Examples","text":"<pre><code># Build the pipeline\nrun_build = workflow.run(\n    action=\"build\",\n    parameters={\"dataitem\": dataitem.key}\n)\n\n# Execute the pipeline\nrun_pipeline = workflow.run(action=\"pipeline\")\n</code></pre>"},{"location":"reference/runtimes/hera/execution/","title":"Execution Overview","text":"<p>This section explains how to execute a workflow in the Hera runtime. First, we examine the usage pattern, then delve into the parameter structure.</p>"},{"location":"reference/runtimes/hera/execution/#usage-pattern","title":"Usage Pattern","text":"<p>To execute a Hera workflow, follow this pattern:</p> <ol> <li>Use <code>dh.new_workflow()</code> or <code>project.new_workflow()</code> to create the workflow, passing workflow parameters.</li> <li>Call <code>workflow.run()</code> with the desired action, passing task parameters and run parameters.</li> </ol> <pre><code># Create workflow with workflow parameters\nworkflow = dh.new_workflow(\n    name=\"my-workflow\",\n    kind=\"hera\",\n    code_src=\"pipeline.py\",\n    handler=\"pipeline\"\n)\n\n# Build the pipeline\nrun_build = workflow.run(\n    action=\"build\"  # Task parameter\n\n)\n\n# Execute the pipeline\nrun_pipeline = workflow.run(\n    action=\"pipeline\",  # Task parameter\n    parameters={\"url\": \"https://example.com\"}  # Run parameter\n)\n</code></pre> <p>Hera workflows are executed remotely on Kubernetes clusters managed by the platform.</p>"},{"location":"reference/runtimes/hera/execution/#parameter-structure","title":"Parameter Structure","text":"<p>Parameters are organized into three categories:</p> <ul> <li> <p>Workflow Parameters: Define the workflow's <code>spec</code> attributes, such as source code and execution environment. These are set when creating the workflow.</p> </li> <li> <p>Task Parameters: Specify the action type and execution environment configuration. For Hera runtimes, actions are <code>build</code> and <code>pipeline</code>.</p> </li> <li> <p>Run Parameters: Control runtime behavior, such as pipeline parameters passed to the workflow function.</p> </li> </ul>"},{"location":"reference/runtimes/hera/execution/#task-actions","title":"Task Actions","text":"<p>The Hera runtime supports two task actions:</p> <ul> <li><code>build</code>: Build the pipeline definition in Argo YAML</li> <li><code>pipeline</code>: Execute the built pipeline</li> </ul>"},{"location":"reference/runtimes/hera/execution/#detailed-documentation","title":"Detailed Documentation","text":"<p>For comprehensive details on each parameter category:</p> <ul> <li>Workflow Parameters \u2014 Complete reference for workflow creation and configuration.</li> <li>Task Parameters \u2014 Execution modes and runtime settings.</li> <li>Run Parameters \u2014 Input/output mappings and execution options.</li> </ul>"},{"location":"reference/runtimes/hera/overview/","title":"Hera Pipelines Runtime","text":"<p>The Hera runtime enables running Hera workflows on the platform. It defines Workflow objects of kind <code>hera</code> and supports a <code>pipeline</code> task action.</p>"},{"location":"reference/runtimes/hera/overview/#prerequisites","title":"Prerequisites","text":"<p>Supported Python version and required package:</p> <ul> <li><code>python &gt;= 3.9, &lt;3.13</code></li> <li><code>digitalhub-runtime-hera</code></li> </ul> <p>Install from PyPI:</p> <pre><code>python -m pip install digitalhub-runtime-hera\n</code></pre>"},{"location":"reference/runtimes/hera/overview/#usage-overview","title":"Usage overview","text":"<p>Use a Workflow's <code>run()</code> method to build and execute Hera pipelines. Typical workflow:</p> <ol> <li>Define the functions (steps) to be executed; these may belong to other runtimes.</li> <li>Implement a pipeline function that returns a Hera <code>Workflow</code> object (see Pipeline definition).</li> <li>Build the pipeline by calling <code>run(action=\"build\")</code> (required).</li> <li>Execute the pipeline with <code>run(action=\"pipeline\")</code>; a stepper will execute the Hera steps.</li> </ol> <p>The runtime provides DSL helpers in <code>digitalhub_runtime_hera.dsl</code>. Use <code>step</code> and <code>container_template</code> to wrap digitalhub functions and workflows into Hera steps and container templates. The DSL supports both <code>DAG</code> and <code>Steps</code> contexts.</p> <p>Core components:</p> <ul> <li><code>step</code>: defines an individual workflow step inside a <code>DAG</code> or <code>Steps</code> context; it represents a task and can declare inputs, outputs and parameters.</li> <li><code>container_template</code>: constructs a Hera container template (image, command, args). It is used by <code>step</code> and also available for advanced custom templates.</li> </ul> <p>See Examples for code samples.</p>"},{"location":"reference/runtimes/hera/entities/run/","title":"Run","text":"<p>The <code>Run</code> object is created by calling <code>run()</code> on a Workflow. Run-level parameters are provided alongside task parameters.</p>"},{"location":"reference/runtimes/hera/entities/run/#parameters-shared","title":"Parameters (Shared)","text":"<p>No shared run parameters for this runtime.</p>"},{"location":"reference/runtimes/hera/entities/run/#action-specific-parameters","title":"Action-Specific Parameters","text":""},{"location":"reference/runtimes/hera/entities/run/#pipeline","title":"Pipeline","text":"Name Type Description parameters dict Inputs for the pipeline execution."},{"location":"reference/runtimes/hera/entities/run/#methods","title":"Methods","text":"<p>No methods are available for this runtime.</p>"},{"location":"reference/runtimes/hera/entities/task/","title":"Task","text":"<p>The Hera runtime supports <code>build</code> and <code>pipeline</code> task actions to run workflows. A <code>Task</code> is created by calling <code>run()</code> on the Workflow; task parameters are passed through that call and may vary by action.</p>"},{"location":"reference/runtimes/hera/entities/task/#parameters-shared","title":"Parameters (Shared)","text":"Name Type Description action str Task action. One of: <code>build</code>, <code>pipeline</code>. Required. node_selector list[dict] Node selector. volumes list[dict] List of volumes. resources dict Resource limits/requests. affinity dict Affinity configuration. tolerations list[dict] Tolerations. envs list[dict] Environment variables. secrets list[str] List of secret names. profile str Profile template."},{"location":"reference/runtimes/hera/entities/task/#task-actions","title":"Task Actions","text":"<p>Supported actions:</p> <ul> <li><code>build</code> \u2014 build the pipeline definition</li> <li><code>pipeline</code> \u2014 execute the built pipeline</li> </ul>"},{"location":"reference/runtimes/hera/entities/workflow/","title":"Workflow","text":"<p>The Hera runtime defines Workflow objects of kind <code>hera</code>.</p>"},{"location":"reference/runtimes/hera/entities/workflow/#parameters","title":"Parameters","text":"Name Type Description project str Project name. Required only when creating from the library; otherwise MUST NOT be set. name str Name that identifies the object. Required. kind str Workflow kind. Required. uuid str Object ID in UUID4 format. description str Description of the object. labels list[str] List of labels. embedded bool Whether the object should be embedded in the project. code_src str URI pointing to the source code. code str Source code provided as plain text. base64 str Source code encoded as base64. handler str Function entrypoint. lang str Source code language (informational)."},{"location":"reference/runtimes/hera/entities/workflow/#workflow-kinds","title":"Workflow Kinds","text":"<p>The <code>kind</code> parameter must be:</p> <ul> <li><code>hera</code></li> </ul>"},{"location":"reference/runtimes/modelserve/examples/","title":"Examples","text":""},{"location":"reference/runtimes/modelserve/examples/#mlflow-model-example","title":"MLflow Model Example","text":"<pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my_project\")\n\nfunction = project.new_function(name=\"mlflow-serve-function\",\n                                kind=\"mlflowserve\",\n                                path=model.spec.path + \"model\")\n\nrun = function.run(action=\"serve\")\n</code></pre>"},{"location":"reference/runtimes/modelserve/examples/#scikit-learn-model-example","title":"Scikit-Learn Model Example","text":"<pre><code>function = project.new_function(name=\"sklearn-serve-function\",\n                                kind=\"sklearnserve\",\n                                path=model.spec.path)\n\nrun = function.run(action=\"serve\")\n</code></pre>"},{"location":"reference/runtimes/modelserve/examples/#kubeai-text-model-example","title":"KubeAI Text Model Example","text":"<pre><code>function = project.new_function(\n    name=\"kubeai-text-function\",\n    kind=\"kubeai-text\",\n    url=\"hf://mistralai/Mistral-7B-v0.1\",\n    features=[\"TextGeneration\"],\n    engine=\"VLLM\"\n)\n\nrun = function.run(action=\"serve\")\n</code></pre>"},{"location":"reference/runtimes/modelserve/examples/#kubeai-speech-model-example","title":"KubeAI Speech Model Example","text":"<pre><code>function = project.new_function(\n    name=\"kubeai-speech-function\",\n    kind=\"kubeai-speech\",\n    url=\"hf://openai/whisper-large-v3\",\n    features=[\"SpeechToText\"],\n    engine=\"FasterWhisper\"\n)\n\nrun = function.run(action=\"serve\")\n</code></pre>"},{"location":"reference/runtimes/modelserve/execution/","title":"Execution Overview","text":"<p>This section explains how to execute a function in the ModelServe runtime. First, we examine the usage pattern, then delve into the parameter structure.</p>"},{"location":"reference/runtimes/modelserve/execution/#usage-pattern","title":"Usage Pattern","text":"<p>To execute a ModelServe function, follow this pattern:</p> <ol> <li>Use <code>dh.new_function()</code> or <code>project.new_function()</code> to create the function, passing function parameters.</li> <li>Call <code>function.run()</code> with the desired action, passing task parameters and run parameters.</li> </ol> <pre><code># Create function with function parameters\nfunction = dh.new_function(\n    name=\"my-model-function\",\n    kind=\"mlflowserve\",\n    path=\"s3://my-bucket/path-to-model\"\n)\n\n# Execute with task and run parameters\nrun = function.run(\n    action=\"serve\",  # Task parameter\n    replicas=1  # Task parameter\n)\n</code></pre> <p>ModelServe functions are executed remotely on Kubernetes clusters managed by the platform.</p>"},{"location":"reference/runtimes/modelserve/execution/#parameter-structure","title":"Parameter Structure","text":"<p>Parameters are organized into three categories:</p> <ul> <li> <p>Function Parameters: Define the function's <code>spec</code> attributes, such as model path, image, and execution environment. These are set when creating the function.</p> </li> <li> <p>Task Parameters: Specify the action type and execution environment configuration. For ModelServe runtimes, the action is <code>serve</code>.</p> </li> <li> <p>Run Parameters: Control runtime behavior, such as environment variables and scaling parameters.</p> </li> </ul>"},{"location":"reference/runtimes/modelserve/execution/#task-actions","title":"Task Actions","text":"<p>The ModelServe runtime supports one task action:</p> <ul> <li><code>serve</code>: Deploy a model as a service</li> </ul>"},{"location":"reference/runtimes/modelserve/execution/#detailed-documentation","title":"Detailed Documentation","text":"<p>For comprehensive details on each parameter category:</p> <ul> <li>Function Parameters \u2014 Complete reference for function creation and configuration.</li> <li>Task Parameters \u2014 Execution modes and runtime settings.</li> <li>Run Parameters \u2014 Input/output mappings and execution options.</li> </ul>"},{"location":"reference/runtimes/modelserve/overview/","title":"ModelServe Runtime","text":"<p>The ModelServe runtime allows you to deploy ML models on Kubernetes or locally.</p>"},{"location":"reference/runtimes/modelserve/overview/#prerequisites","title":"Prerequisites","text":"<p>Supported Python version and required package:</p> <ul> <li><code>python &gt;= 3.9, &lt;3.13</code></li> <li><code>digitalhub-runtime-modelserve</code></li> </ul> <p>Install from PyPI:</p> <pre><code>python -m pip install digitalhub-runtime-modelserve\n</code></pre>"},{"location":"reference/runtimes/modelserve/overview/#usage-overview","title":"Usage Overview","text":"<p>The ModelServe runtime provides several serve functions (<code>sklearnserve</code>, <code>mlflowserve</code>, <code>huggingfaceserve</code>, <code>kubeai-text</code>, <code>kubeai-speech</code>) and a <code>serve</code> task action. Typical usage:</p> <ol> <li>Create a Function for the model and call its <code>run()</code> method.</li> <li>The runtime collects, loads and exposes the model as a service.</li> <li>Call the run's <code>invoke()</code> method to send inference requests (the method accepts the same keyword arguments as <code>requests.request</code>).</li> <li>Stop the service with <code>run.stop()</code> when finished.</li> </ol> <p>The ModelServe runtime deploys an mlserver inference server on Kubernetes (Deployment + Service).</p> <p>Service responsiveness</p> <p>It may take some time for the service to become ready. Use <code>run.refresh()</code> and inspect <code>run.status</code>. When ready, the <code>status</code> will include a <code>service</code> attribute.</p> <pre><code>run.refresh()\nrun.status\n</code></pre> <p>After the service is ready, call the inference endpoint with <code>run.invoke()</code>. By default the <code>url</code> is taken from the <code>run</code> object; override it with an explicit <code>url</code> parameter if needed.</p> <p>Note</p> <p>If you set <code>model_name</code> in the function spec and run remotely, pass <code>model_name</code> to <code>invoke()</code> so the runtime can target the model with the MLServer V2 endpoint (\"http://{url-from-k8s}/v2/models/{model_name}/infer\").</p> <pre><code>data = [[...]]  # some array\njson = {\n    \"inputs\": [\n        {\n            \"name\": \"input-0\",\n            \"shape\": [x, y],\n            \"datatype\": \"FP32\",\n            \"data\": data\n        }\n    ]\n}\n\nrun.invoke(json=json)\n</code></pre> <p>See Examples for code samples.</p>"},{"location":"reference/runtimes/modelserve/entities/function/","title":"Function","text":"<p>The ModelServe runtime defines Functions of various kinds (<code>sklearnserve</code>, <code>mlflowserve</code>, <code>huggingfaceserve</code>, <code>kubeai-text</code>, <code>kubeai-speech</code>), each one representing a different ML model flavour.</p>"},{"location":"reference/runtimes/modelserve/entities/function/#parameters","title":"Parameters","text":"Name Type Description project str Project name. Required only when creating from the library; otherwise MUST NOT be set. name str Name that identifies the object. Required. kind str Function kind. Required. uuid str Object ID in UUID4 format. description str Description of the object. labels list[str] List of labels. embedded bool Whether the object should be embedded in the project. path str Path to the model files. model_name str Name of the model. image str Docker image where to serve the model. url str Model url. (For <code>kubeai-text</code>, <code>kubeai-speech</code>) adapters list[str] Adapters. (For <code>kubeai-text</code>, <code>kubeai-speech</code>) features list[str] Features. (For <code>kubeai-text</code>) engine KubeaiEngine Engine. (For <code>kubeai-text</code>)"},{"location":"reference/runtimes/modelserve/entities/function/#function-kinds","title":"Function Kinds","text":"<p>The <code>kind</code> parameter must be one of the following:</p> <ul> <li><code>sklearnserve</code></li> <li><code>mlflowserve</code></li> <li><code>huggingfaceserve</code></li> <li><code>kubeai-text</code></li> <li><code>kubeai-speech</code></li> </ul>"},{"location":"reference/runtimes/modelserve/entities/function/#adapters","title":"Adapters","text":"<p>Adapters is a list of dictionaries with the following keys:</p> <pre><code>adapters = [{\n    \"name\": \"adapter-name\",\n    \"url\": \"adapter-url\"\n}]\n</code></pre>"},{"location":"reference/runtimes/modelserve/entities/function/#features","title":"Features","text":"<p>Features is a list of strings. It accepts the following values:</p> <ul> <li><code>TextGeneration</code></li> <li><code>TextEmbedding</code></li> <li><code>SpeechToText</code></li> </ul>"},{"location":"reference/runtimes/modelserve/entities/function/#engine","title":"Engine","text":"<p>The engine is a <code>KubeaiEngine</code> object that represents the engine to use for the function. The engine can be one of the following:</p> <ul> <li><code>OLlama</code></li> <li><code>VLLM</code></li> <li><code>FasterWhisper</code></li> <li><code>Infinity</code></li> </ul>"},{"location":"reference/runtimes/modelserve/entities/function/#model-path","title":"Model Path","text":"<p>The model path is the path to the model files. In remote execution, the path is a remote s3 path (for example: <code>s3://my-bucket/path-to-model</code>). In local execution, the path is a local path (for example: <code>./my-path</code> or <code>my-path</code>). According to the kind of ModelServe function, the path must follow a specific pattern:</p> <ul> <li><code>sklearnserve</code>: <code>s3://my-bucket/path-to-model/model.pkl</code> or <code>./path-to-model/model.pkl</code>. The remote path is the partition with the model file, the local path is the model file.</li> <li><code>mlflowserve</code>: <code>s3://my-bucket/path-to-model-files</code> or <code>./path-to-model-files</code>. The remote path is the partition with all the model files, the local path is the folder containing the MLmodel file according to MLFlow specification.</li> </ul> <p>Model path is not required for <code>kubeai-text</code>, <code>kubeai-speech</code>.</p>"},{"location":"reference/runtimes/modelserve/entities/function/#model-url","title":"Model URL","text":"<p>The model url must follow the pattern:</p> <pre><code>regexp = (\n    r\"^(store://([^/]+)/model/huggingface/.*)\"\n    + r\"|\"\n    + r\"^pvc?://.*$\"\n    + r\"|\"\n    + r\"^s3?://.*$\"\n    + r\"|\"\n    + r\"^ollama?://.*$\"\n    + r\"|\"\n    + r\"^hf?://.*$\"\n)\n</code></pre>"},{"location":"reference/runtimes/modelserve/entities/run/","title":"Run","text":"<p>The <code>Run</code> object is created by calling <code>run()</code> on a Function. Run-level parameters are provided alongside task parameters.</p>"},{"location":"reference/runtimes/modelserve/entities/run/#parameters-shared","title":"Parameters (Shared)","text":"<p>No shared specific parameters for run of this runtime.</p>"},{"location":"reference/runtimes/modelserve/entities/run/#function-kind-specific-parameters","title":"Function Kind-Specific Parameters","text":""},{"location":"reference/runtimes/modelserve/entities/run/#kubeai-text-speech","title":"KubeAI Text &amp; Speech","text":"Name Type Description env dict Environment variables. args list[str] Arguments. cache_profile str Cache profile. files list[KubeaiFile] Files. scaling Scaling Scaling parameters. processors int Number of processors."},{"location":"reference/runtimes/modelserve/entities/run/#files","title":"Files","text":"<p>Files is a list of dict with the following keys:</p> <pre><code>files = [\n    {\n        \"path\": \"file-path\"\n        \"content\": \"file-content\"\n    }\n]\n</code></pre>"},{"location":"reference/runtimes/modelserve/entities/run/#scaling","title":"Scaling","text":"<p>Scaling is a <code>Scaling</code> object that represents the scaling parameters for the run. Its structure is as follows:</p> <pre><code>scaling = {\n    \"replicas\": int,\n    \"min_replicas\": int,\n    \"max_replicas\": int,\n    \"autoscaling_disabled\": bool,\n    \"target_request\": int,\n    \"scale_down_delay_seconds\": int,\n    \"load_balancing\": {\n        \"strategy\": str,  # \"LeastLoad\" or \"PrefixHash\"\n        \"prefix_hash\": {\n            \"mean_load_factor\": int,\n            \"replication\": int,\n            \"prefix_char_length\": int\n        }\n    }\n}\n</code></pre>"},{"location":"reference/runtimes/modelserve/entities/run/#methods","title":"Methods","text":"<p>Once the run is created, you can access its attributes and methods through the <code>run</code> object.</p>"},{"location":"reference/runtimes/modelserve/entities/run/#digitalhub_runtime_modelserve.entities.run.modelserve_run.entity.RunModelserveRun.invoke","title":"<code>invoke</code>","text":"<p>Invoke served model. By default it exposes infer v2 endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model.</p> <code>None</code> <code>method</code> <code>str</code> <p>Method of the request.</p> <code>'POST'</code> <code>url</code> <code>str</code> <p>URL of the request.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments to pass to the request.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response from the request.</p>"},{"location":"reference/runtimes/modelserve/entities/task/","title":"Task","text":"<p>The ModelServe runtime supports a <code>serve</code> task action to deploy ML models on Kubernetes or locally. A <code>Task</code> is created by calling <code>run()</code> on the Function; task parameters are passed through that call and may vary by action.</p>"},{"location":"reference/runtimes/modelserve/entities/task/#parameters-shared","title":"Parameters (Shared)","text":"Name Type Description action str Task action. One of: <code>serve</code>. Required. node_selector list[dict] Node selector. volumes list[dict] List of volumes. resources dict Resource limits/requests. affinity dict Affinity configuration. tolerations list[dict] Tolerations. envs list[dict] Environment variables. secrets list[str] List of secret names. profile str Profile template. replicas int Number of replicas. service_type str Service type."},{"location":"reference/runtimes/modelserve/entities/task/#function-kind-specific-parameters","title":"Function Kind-Specific Parameters","text":""},{"location":"reference/runtimes/modelserve/entities/task/#huggingface-serve","title":"HuggingFace Serve","text":"Name Type Description huggingface_task str Huggingface task type. backend str Backend type. tokenizer_revision str Tokenizer revision. max_length int Huggingface max sequence length for the tokenizer. disable_lower_case bool Do not use lower case for the tokenizer. disable_special_tokens bool The sequences will not be encoded with the special tokens relative to their model. dtype str Data type to load the weights in. trust_remote_code bool Allow loading of models and tokenizers with custom code. tensor_input_names list[str] The tensor input names passed to the model. return_token_type_ids bool Return token type ids. return_probabilities bool Return all probabilities. disable_log_requests bool Disable log requests. max_log_len int Max number of prompt characters or prompt."},{"location":"reference/runtimes/modelserve/entities/task/#task-actions","title":"Task Actions","text":"<p>Supported actions:</p> <ul> <li><code>serve</code> \u2014 deploy a service</li> </ul>"},{"location":"reference/runtimes/modelserve/entities/task/#huggingface-task","title":"HuggingFace Task","text":"<p>You can specify the task type for the Huggingface model. The task type must be one of the following:</p> <ul> <li><code>sequence_classification</code></li> <li><code>token_classification</code></li> <li><code>fill_mask</code></li> <li><code>text_generation</code></li> <li><code>text2text_generation</code></li> <li><code>text_embedding</code></li> </ul>"},{"location":"reference/runtimes/modelserve/entities/task/#backend","title":"Backend","text":"<p>You can specify the backend type for the Huggingface model. The backend type must be one of the following:</p> <ul> <li><code>AUTO</code></li> <li><code>VLLM</code></li> <li><code>HUGGINGFACE</code></li> </ul>"},{"location":"reference/runtimes/modelserve/entities/task/#dtype","title":"Dtype","text":"<p>You can specify the data type to load the weights in. The data type must be one of the following:</p> <ul> <li><code>AUTO</code></li> <li><code>FLOAT32</code></li> <li><code>FLOAT16</code></li> <li><code>BFLOAT16</code></li> <li><code>FLOAT</code></li> <li><code>HALF</code></li> </ul>"},{"location":"reference/runtimes/python/define-function/","title":"Define a Python Function","text":"<p>This section describes how to define a Python function as a handler. A handler is basically a python function declared using the standard <code>def</code> keyword. Handlers can be simple or accept platform-provided objects and inputs. The runtime injects reserved arguments and provides helpers to map inputs and outputs.</p>"},{"location":"reference/runtimes/python/define-function/#function-anatomy","title":"Function Anatomy","text":"<p>Example handler:</p> <pre><code>from digitalhub_runtime_python import handler\n\n@handler(outputs=[\"my-sdk-output\", \"my-primitive-output\"])\ndef func(project, run, context, event, input_1, parameter_1):\n    project.log_artifact(\"my-artifact\", \"artifact\", source=\"some-file.ext\")\n    run.log_metric(\"my-metric\", -14.6)\n    context.logger.info(\"log-some-string\")\n\n    body = event.body\n    # Process the event body\n\n    df = input_1.as_df(sep=\";\")\n    df.head(70)\n\n    parameter_1.pop(\"some-key\")\n\n    return df, 19.45\n</code></pre> <p>Simple handler (no parameters, no return):</p> <pre><code>def func():\n    print(\"hello world\")\n</code></pre> <p>The function you define becomes the entrypoint when referenced as the <code>handler</code> in the run configuration.</p>"},{"location":"reference/runtimes/python/define-function/#reserved-arguments","title":"Reserved arguments","text":"<p>The runtime injects a small set of reserved arguments when it invokes your handler. Commonly injected values are:</p> <ul> <li><code>project</code> \u2014 the current <code>Project</code> object.</li> <li><code>run</code> \u2014 the active <code>Run</code> object.</li> <li><code>context</code> \u2014 the Nuclio runtime context object (see Nuclio Python runtime docs) \u2014 only available in remote execution.</li> <li><code>events</code> \u2014 the Nuclio events helper \u2014 only available in remote execution.</li> </ul> <p>Local execution: Nuclio context and events</p> <p>When running locally, <code>context</code> and <code>events</code> are not provided automatically; if your handler expects them you must pass them explicitly through <code>function.run()</code>.</p>"},{"location":"reference/runtimes/python/define-function/#inputs-and-parameters","title":"Inputs and parameters","text":"<p>Inputs and parameters map function argument names to values provided at run time. They are passed to the run via the <code>inputs</code> and <code>parameters</code> arguments of <code>function.run()</code> and are stored in the <code>Run</code> spec.</p> <ul> <li>Inputs must reference platform entities (for example <code>Dataitem</code>, <code>Artifact</code>, or <code>Model</code>) by their keys.</li> <li>Parameters may be plain Python values (strings, numbers, dicts, lists, etc.).</li> </ul> <p>Example:</p> <pre><code># Function signature: di is a Dataitem, param1 is a string\ndef func(di: Dataitem, param1: str):\n    # do something\n    ...\n\n# Create or obtain the dataitem\nsdk_dataitem = sdk.new_dataitem(...)\n\n# Run the function, mapping the argument name to the dataitem key\nsdk_function.run(inputs={\"di\": sdk_dataitem.key},\n                 parameters={\"param1\": \"some value\"})\n</code></pre> <p>Inputs vs parameters</p> <p>Passing a parameter where an input is expected can produce an error stating the SDK cannot parse an <code>entity_key</code>. If you see that error, double-check which values you provided in <code>inputs</code> vs <code>parameters</code>.</p>"},{"location":"reference/runtimes/python/define-function/#handler-and-outputs","title":"Handler and outputs","text":"<p>Decorating a function with <code>@handler</code> (from <code>digitalhub_runtime_python</code>) allows you to name and collect outputs from the run. The decorator maps returned values to <code>outputs</code> and <code>results</code> on the resulting <code>Run</code> object.</p> <pre><code>from digitalhub_runtime_python import handler\n\n@handler(outputs=[\"data\", \"string\"])\ndef func(di: Dataitem, param1: str):\n    # produce a Dataitem and a primitive\n    return pd.DataFrame, \"some value\"\n\n\nrun = sdk_function.run(inputs={\"di\": sdk_dataitem.key},\n                       parameters={\"param1\": \"some value\"},\n                       ...)\n\n# After the run completes\nrun.output(\"data\")   # returns a Dataitem object\nrun.result(\"string\") # returns \"some value\"\n</code></pre> <p>You can omit the decorator; in that case the SDK will assign default placeholder names to any outputs you return. If you use <code>@handler</code>, map outputs explicitly to collect named results.</p>"},{"location":"reference/runtimes/python/define-function/#init-function","title":"Init function","text":"<p>When executing remotely, the Nuclio wrapper calls an <code>init</code> function (if present) before invoking your handler. The runtime injects the Nuclio <code>context</code> into <code>init</code> at invocation time. Additional parameters may be supplied via <code>init_parameters</code> in <code>function.run()</code>.</p> <pre><code>def init(context, param1, param2):\n    # initialization logic\n    ...\n\n\nrun = sdk_function.run(...,\n                       init_parameters={\"param1\": \"some value\",\n                                        \"param2\": \"some value\"})\n</code></pre> <p>Next section provides an overview of the arguments required to create a <code>Function</code> object and start a run. It also gives the list of methods exposed by the kind-specific <code>Run</code> object.</p>"},{"location":"reference/runtimes/python/examples/","title":"Examples","text":""},{"location":"reference/runtimes/python/examples/#function-creation","title":"Function Creation","text":"<pre><code>import digitalhub as dh\n\nproject = dh.get_or_create_project(\"my_project\")\n\n# Create function from project\nfunction = project.new_function(\n    name=\"python-function\",\n    kind=\"python\",\n    code_src=\"main.py\",\n    handler=\"function\",\n    python_version=\"PYTHON3_10\"\n)\n\n# Or create function from SDK\nfunction = dh.new_function(\n    project=\"my-project\",\n    name=\"python-function\",\n    kind=\"python\",\n    code_src=\"main.py\",\n    handler=\"function\",\n    python_version=\"PYTHON3_10\"\n)\n</code></pre>"},{"location":"reference/runtimes/python/examples/#task-execution","title":"Task Execution","text":"<p>Job execution:</p> <pre><code>run = function.run(\n    action=\"job\",\n    inputs={\"dataitem\": dataitem.key}\n)\n</code></pre> <p>Build image:</p> <pre><code>run = function.run(\n    action=\"build\",\n    instructions=[\"apt-get install -y git\"]\n)\n</code></pre> <p>Serve as service:</p> <pre><code>run = function.run(\n    action=\"serve\",\n    replicas=2,\n    service_type=\"NodePort\"\n)\n</code></pre>"},{"location":"reference/runtimes/python/examples/#service-invocation","title":"Service Invocation","text":"<p>After deploying a service:</p> <pre><code>run = function.run(\"serve\", ...)\n\njson_data = {\n    \"some-func-param\": data\n}\n\nrun.invoke(json=json_data)\n</code></pre>"},{"location":"reference/runtimes/python/examples/#tutorials","title":"Tutorials","text":"<p>Find additional examples in the tutorial repository of the DSLab GitHub organization.</p> <p>See the Custom ML Model tutorial for comprehensive examples of Python runtime usage.</p>"},{"location":"reference/runtimes/python/execution/","title":"Execution Overview","text":"<p>This section explains how to execute a function in the Python runtime. First, we examine the usage pattern, then delve into the parameter structure.</p>"},{"location":"reference/runtimes/python/execution/#usage-pattern","title":"Usage Pattern","text":"<p>To execute a function, follow this pattern:</p> <ol> <li>Use <code>dh.new_function()</code> or <code>project.new_function()</code> to create the function, passing function parameters.</li> <li>Call <code>function.run()</code> with the desired action, passing task parameters and run parameters.</li> </ol> <pre><code># Create function with function parameters\nfunction = dh.new_function(\n    name=\"my-function\",\n    kind=\"python\",\n    code_src=\"handler.py\",\n    handler=\"main\",\n    python_version=\"PYTHON3_10\"\n)\n\n# Execute with task and run parameters\nrun = function.run(\n    action=\"job\",  # Task parameter\n    inputs={\"data\": dataitem.key},  # Run parameter\n    parameters={\"threshold\": 0.5}  # Run parameter\n)\n</code></pre> <p>You can control whether the execution happens locally on your machine or remotely on the platform by setting the <code>local_execution</code> parameter (see Local vs Remote Execution for details).</p>"},{"location":"reference/runtimes/python/execution/#local-vs-remote-execution","title":"Local vs Remote Execution","text":"<p>When executing a function, you can choose between local execution and remote execution by setting the <code>local_execution</code> parameter in the run parameters.</p> <ul> <li> <p>Local Execution (<code>local_execution=True</code>): The function runs directly on your local machine. You need to have the required dependencies of your function installed locally.</p> </li> <li> <p>Remote Execution (<code>local_execution=False</code>, default): The function is executed on a remote server or cluster managed by the platform. Remember to provide the dependencies in the function's <code>requirements</code> parameter or in your <code>requirements.txt</code>.</p> </li> </ul> <p>Note</p> <p>Note that some features, like serving functions, are only available with remote execution.</p>"},{"location":"reference/runtimes/python/execution/#parameter-structure","title":"Parameter Structure","text":"<p>Parameters are organized into three categories, each serving a distinct purpose in the function execution lifecycle and in the specification of execution entities (<code>Function</code>, <code>Task</code>, <code>Run</code>):</p> <ul> <li> <p>Function Parameters: Define the function's <code>spec</code> attributes, such as source code, handler, Python version, and execution environment. These are set when creating the function using <code>dh.new_function()</code> or <code>project.new_function()</code>.</p> </li> <li> <p>Task Parameters: Specify the action type and execution environment configuration. For Python runtimes, actions are <code>job</code>, <code>serve</code>, or <code>build</code>.</p> </li> <li> <p>Run Parameters: Control runtime behavior, such as local vs. remote execution, input mappings, and additional parameters passed to the function handler.</p> </li> </ul>"},{"location":"reference/runtimes/python/execution/#detailed-documentation","title":"Detailed Documentation","text":"<p>For comprehensive details on each parameter category:</p> <ul> <li>Function Parameters \u2014 Complete reference for function creation and configuration.</li> <li>Task Parameters \u2014 Execution modes and runtime settings.</li> <li>Run Parameters \u2014 Input/output mappings and execution options.</li> </ul>"},{"location":"reference/runtimes/python/overview/","title":"Python Runtime","text":"<p>The Python runtime enables you to execute user-defined Python handlers. It registers a <code>Function</code> kind <code>python</code> and supports three actions: <code>job</code>, <code>serve</code>, and <code>build</code>.</p> <ul> <li><code>job</code>: Execute a Python handler as a one-off job</li> <li><code>serve</code>: Deploy a Python handler as a long-lived service</li> <li><code>build</code>: Create a Docker image with all required dependencies for efficient execution</li> </ul>"},{"location":"reference/runtimes/python/overview/#prerequisites","title":"Prerequisites","text":"<p>Supported Python versions:</p> <ul> <li>Python \u2265 3.9, &lt; 3.13</li> </ul> <p>Required package:</p> <ul> <li><code>digitalhub-runtime-python</code></li> </ul> <p>Install from PyPI:</p> <pre><code>pip install digitalhub-runtime-python\n</code></pre>"},{"location":"reference/runtimes/python/overview/#usage-overview","title":"Usage overview","text":"<p>To execute a Python handler on the platform:</p> <ol> <li>Implement the handler as described in handler definition.</li> <li>Create a <code>Function</code> resource that references your handler and declares inputs/outputs and call <code>function.run()</code> to execute the handler.</li> <li>Retrieve eventual outputs from the <code>Run</code>.</li> </ol> <p>See Examples for code samples.</p>"},{"location":"reference/runtimes/python/entities/function/","title":"Function","text":"<p>The Python runtime supports functions of kind <code>python</code>.</p>"},{"location":"reference/runtimes/python/entities/function/#parameters","title":"Parameters","text":"Name Type Description project str Project name. Required only when creating from the library; otherwise MUST NOT be set. name str Name that identifies the object. Required. kind str Function kind. Required. uuid str Object ID in UUID4 format. description str Description of the object. labels list[str] List of labels. embedded bool Whether the object should be embedded in the project. code_src str URI pointing to the source code. code str Source code provided as plain text. base64 str Source code encoded as base64. handler str Function entrypoint. init_function str Init function name for remote (Nuclio) execution. python_version str Python version to use. Required. lang str Source code language (informational). image str Container image used to execute the function. base_image str Base image (name:tag) used to build the execution image. requirements list List of pip requirements to install into the execution image."},{"location":"reference/runtimes/python/entities/function/#function-kinds","title":"Function Kinds","text":"<p>The <code>kind</code> parameter must be:</p> <ul> <li><code>python</code></li> </ul>"},{"location":"reference/runtimes/python/entities/function/#python-versions","title":"Python Versions","text":"<p>The Python runtime supports versions 3.9, 3.10, and 3.11, expressed as:</p> <ul> <li><code>PYTHON3_9</code></li> <li><code>PYTHON3_10</code></li> <li><code>PYTHON3_11</code></li> </ul>"},{"location":"reference/runtimes/python/entities/function/#init-function","title":"Init Function","text":"<p>The init function is the entrypoint used by the Nuclio init wrapper. Specify the init function name via the <code>init_function</code> parameter.</p>"},{"location":"reference/runtimes/python/entities/function/#base-image","title":"Base Image","text":"<p>The base image is the image (name:tag) used as the foundation when building the execution image for the function.</p> <p>Warning</p> <p>Deploying jobs built from certain base images may be restricted by cluster security policies. Confirm allowed base images with your cluster administrator.</p>"},{"location":"reference/runtimes/python/entities/function/#requirements","title":"Requirements","text":"<p>Requirements are a list of strings representing packages to be installed by <code>pip</code> in the image where the function will be executed.</p> <pre><code>requirements = [\"numpy\", \"pandas&gt;1,&lt;3\", \"scikit-learn==1.2.0\"]\n</code></pre>"},{"location":"reference/runtimes/python/entities/run/","title":"Run","text":"<p>The <code>Run</code> object is created via the <code>run()</code> method, similar to the <code>Task</code>. Run parameters are passed alongside task parameters.</p>"},{"location":"reference/runtimes/python/entities/run/#parameters","title":"Parameters","text":"Name Type Description local_execution bool Execute the run locally instead of remotely. inputs dict Mapping of function argument names to entity keys. parameters dict Extra parameters passed to the function. init_parameters dict Parameters supplied to the init function."},{"location":"reference/runtimes/python/entities/run/#methods","title":"Methods","text":"<p>Once the run is created, you can access its attributes and methods through the <code>run</code> object.</p>"},{"location":"reference/runtimes/python/entities/run/#digitalhub_runtime_python.entities.run.python_run.entity.RunPythonRun.output","title":"<code>output</code>","text":"<p>Get run's output by name.</p> <p>Parameters:</p> Name Type Description Default <code>output_name</code> <code>str</code> <p>Key of the result.</p> required <code>as_key</code> <code>bool</code> <p>If True, return result as key.</p> <code>False</code> <code>as_dict</code> <code>bool</code> <p>If True, return result as dictionary.</p> <code>False</code> <p>Returns:</p> Type Description <code>Entity | dict | str | None</code> <p>Result.</p>"},{"location":"reference/runtimes/python/entities/run/#digitalhub_runtime_python.entities.run.python_run.entity.RunPythonRun.outputs","title":"<code>outputs</code>","text":"<p>Get run's outputs.</p> <p>Parameters:</p> Name Type Description Default <code>as_key</code> <code>bool</code> <p>If True, return results as keys.</p> <code>False</code> <code>as_dict</code> <code>bool</code> <p>If True, return results as dictionaries.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict</code> <p>List of output objects.</p>"},{"location":"reference/runtimes/python/entities/run/#digitalhub_runtime_python.entities.run.python_run.entity.RunPythonRun.result","title":"<code>result</code>","text":"<p>Get result by name.</p> <p>Parameters:</p> Name Type Description Default <code>result_name</code> <code>str</code> <p>Name of the result.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The result.</p>"},{"location":"reference/runtimes/python/entities/run/#digitalhub_runtime_python.entities.run.python_run.entity.RunPythonRun.results","title":"<code>results</code>","text":"<p>Get results.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The results.</p>"},{"location":"reference/runtimes/python/entities/run/#digitalhub_runtime_python.entities.run.python_run.entity.RunPythonRun.invoke","title":"<code>invoke</code>","text":"<p>Invoke run.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>Method of the request.</p> <code>'POST'</code> <code>url</code> <code>str</code> <p>URL of the request.</p> <code>None</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments to pass to the request.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response from service.</p>"},{"location":"reference/runtimes/python/entities/run/#digitalhub_runtime_python.entities.run.python_run.entity.RunPythonRun.wait","title":"<code>wait</code>","text":"<p>Wait for run to finish.</p> <p>Parameters:</p> Name Type Description Default <code>log_info</code> <code>bool</code> <p>If True, log information.</p> <code>True</code> <p>Returns:</p> Type Description <code>Run</code> <p>Run object.</p>"},{"location":"reference/runtimes/python/entities/run/#digitalhub_runtime_python.entities.run.python_run.entity.RunPythonRun.inputs","title":"<code>inputs</code>","text":"<p>Get inputs passed in spec as objects or as dictionaries.</p> <p>Parameters:</p> Name Type Description Default <code>as_dict</code> <code>bool</code> <p>If True, return inputs as dictionaries.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict</code> <p>Inputs.</p>"},{"location":"reference/runtimes/python/entities/task/","title":"Task","text":"<p>Tasks of kinds <code>job</code>, <code>serve</code>, and <code>build</code> allow you to execute a Python function, serve it as a service, or build its Docker image. A <code>Task</code> is created via the <code>run()</code> method and is not managed directly by the user. Task parameters are passed directly to the <code>run()</code> method and may vary depending on the task kind.</p>"},{"location":"reference/runtimes/python/entities/task/#parameters","title":"Parameters","text":"Name Type Description action str Task action. One of: <code>job</code>, <code>build</code>, <code>serve</code>. Required. node_selector list[dict] Node selector configuration. volumes list[dict] List of volumes. resources dict Resource limits/requests. affinity dict Affinity configuration. tolerations list[dict] Tolerations. envs list[dict] Environment variables. secrets list[str] List of secret names. profile str Profile template."},{"location":"reference/runtimes/python/entities/task/#action-specific-parameters","title":"Action-Specific Parameters","text":""},{"location":"reference/runtimes/python/entities/task/#serve","title":"Serve","text":"Name Type Description replicas int Number of replicas. service_type str Service type."},{"location":"reference/runtimes/python/entities/task/#build","title":"Build","text":"Name Type Description instructions list[str] Build instructions executed as RUN lines in the generated Dockerfile."},{"location":"reference/runtimes/python/entities/task/#task-actions","title":"Task Actions","text":"<p>Actions must be one of the following:</p> <ul> <li><code>job</code>: Execute function as a one-off task</li> <li><code>build</code>: Create Docker image with dependencies</li> <li><code>serve</code>: Deploy function as a service</li> </ul>"},{"location":"reference/runtimes/python/entities/task/#serving","title":"Serving","text":"<p>Use the <code>serve</code> action to deploy a function as a service on Kubernetes.</p> <p>Warning</p> <p>It may take time for the service to become ready. The platform will notify the client when ready.</p> <p>After the service is ready, call the inference endpoint with <code>run.invoke()</code>. This method accepts the same keyword arguments as <code>requests.request</code>; by default, the <code>url</code> is taken from the <code>run</code> object but you may override it with an explicit <code>url</code> parameter.</p> <pre><code>run = function.run(\"serve\", ...)\n\njson_data = {\n    \"some-func-param\": data\n}\n\nrun.invoke(json=json_data)\n</code></pre>"},{"location":"reference/runtimes/python/entities/task/#instructions","title":"Instructions","text":"<p>List of strings representing instructions to be executed as RUN instructions in the Dockerfile.</p> <pre><code>instructions = [\"apt-get install -y git\"]\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Welcome to the Digitalhub SDK tutorials! These hands-on guides will teach you the platform's capabilities through practical, real-world examples.</p>"},{"location":"tutorials/#how-to-use-these-tutorials","title":"How to Use These Tutorials","text":"<p>Each tutorial is built around an interactive Jupyter notebook that you can import and run in your development environment:</p> <ol> <li>Import the notebook - Each tutorial references a specific <code>.ipynb</code> file from the digitalhub-tutorials repository</li> <li>Execute step by step - Run the notebook cells sequentially to follow along with the tutorial</li> <li>Learn by doing - The notebooks contain working code examples with explanations</li> </ol> <p>All notebooks are designed to be self-contained and include detailed explanations of each step in the process.</p>"},{"location":"tutorials/#data-processing-transformation","title":"\ud83d\udcca Data Processing &amp; Transformation","text":"<p>Learn to work with data in Digitalhub:</p> <ul> <li> <p>ETL Data Processing   Extract, transform, and load traffic data using Digitalhub workflows</p> </li> <li> <p>Database Transformation with DBT   Transform organizational data using DBT.</p> </li> </ul>"},{"location":"tutorials/#machine-learning","title":"\ud83e\udd16 Machine Learning","text":"<p>Build, train, and deploy ML models:</p> <ul> <li> <p>Scikit-Learn Model Training   Complete ML workflow from data preparation to model serving</p> </li> <li> <p>MLflow Model Management   Track experiments and manage model lifecycle with MLflow</p> </li> <li> <p>Custom ML Models with Darts   Time series forecasting using the Darts framework</p> </li> </ul>"},{"location":"tutorials/#ai-large-language-models","title":"\ud83e\udde0 AI &amp; Large Language Models","text":"<p>Work with advanced AI models:</p> <ul> <li>Large Language Models   Deploy and serve LLMs from HuggingFace catalog and custom models</li> </ul>"},{"location":"tutorials/#source-code","title":"\ud83d\udce6 Source Code","text":"<p>All tutorial source code, notebooks, and configurations are available in the digitalhub-tutorials repository.</p>"},{"location":"tutorials/#getting-help","title":"\ud83c\udd98 Getting Help","text":"<ul> <li>Documentation: Check the main SDK documentation for API references</li> <li>Issues: Report problems in the GitHub repository</li> </ul>"},{"location":"tutorials/custom-ml-model/","title":"Custom ML Models with Darts Tutorial","text":""},{"location":"tutorials/custom-ml-model/#overview","title":"Overview","text":"<p>Learn how to develop and deploy custom machine learning applications using the Darts framework for time series analysis within Digitalhub. This tutorial demonstrates building specialized ML workflows for time series forecasting and management.</p>"},{"location":"tutorials/custom-ml-model/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Setting up custom ML projects with specialized frameworks</li> <li>Working with the Darts library for time series analysis</li> <li>Building time series forecasting models</li> <li>Integrating custom ML frameworks with Digitalhub</li> <li>Deploying specialized ML models as services</li> </ul>"},{"location":"tutorials/custom-ml-model/#getting-started","title":"Getting Started","text":"<ol> <li>Import the Jupyter notebook <code>notebook-cml-darts-ci.ipynb</code> into your Coder instance</li> <li>Execute each cell step by step following the instructions</li> </ol>"},{"location":"tutorials/custom-ml-model/#resources","title":"Resources","text":"<ul> <li>\ud83d\udcc1 Source Files: digitalhub-tutorials/s6-custom-ml-model</li> <li>\ud83d\udcc8 Darts Documentation: Official Darts documentation</li> </ul>"},{"location":"tutorials/dbt-transformation/","title":"Database Transformation with DBT Tutorial","text":""},{"location":"tutorials/dbt-transformation/#overview","title":"Overview","text":"<p>Learn how to build database transformation workflows using DBT (Data Build Tool) in Digitalhub. This tutorial demonstrates collecting organizational data, analyzing and transforming it, then exposing the resulting dataset.</p>"},{"location":"tutorials/dbt-transformation/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to set up a DBT project in Digitalhub</li> <li>Database transformation workflows using DBT</li> <li>Data modeling and transformation best practices</li> <li>Working with organizational datasets</li> <li>Managing data pipelines with DBT and Digitalhub</li> </ul>"},{"location":"tutorials/dbt-transformation/#getting-started","title":"Getting Started","text":"<ol> <li>Import the Jupyter notebook <code>notebook-dbt_scenario.ipynb</code> into your Coder instance</li> <li>Execute each cell step by step following the instructions</li> </ol>"},{"location":"tutorials/dbt-transformation/#resources","title":"Resources","text":"<ul> <li>\ud83d\udcc1 Source Files: digitalhub-tutorials/s2-dbt</li> <li>\ud83d\udd27 DBT Documentation: DBT official documentation</li> </ul>"},{"location":"tutorials/etl-data-processing/","title":"ETL Data Processing Tutorial","text":""},{"location":"tutorials/etl-data-processing/#overview","title":"Overview","text":"<p>Learn how to build an Extract, Transform, Load (ETL) workflow using Digitalhub. This tutorial demonstrates collecting traffic data, analyzing and transforming it, then exposing the resulting dataset.</p>"},{"location":"tutorials/etl-data-processing/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to set up an ETL project in Digitalhub</li> <li>Data extraction from external sources</li> <li>Data transformation workflows</li> <li>Dataset exposure and sharing</li> <li>Working with Digitalhub workflows and dataitems</li> </ul>"},{"location":"tutorials/etl-data-processing/#getting-started","title":"Getting Started","text":"<ol> <li>Import the Jupyter notebook <code>notebook-etl-ci.ipynb</code> into your Coder instance</li> <li>Execute each cell step by step following the instructions</li> </ol>"},{"location":"tutorials/etl-data-processing/#resources","title":"Resources","text":"<ul> <li>\ud83d\udcc1 Source Files: digitalhub-tutorials/s1-etl</li> </ul>"},{"location":"tutorials/llm-model/","title":"Large Language Models Tutorial","text":""},{"location":"tutorials/llm-model/#overview","title":"Overview","text":"<p>Learn how to create and serve Large Language Models (LLMs) using Digitalhub. This tutorial demonstrates working with HuggingFace-compatible models, including direct model serving from the HuggingFace catalog and fine-tuned model deployment.</p>"},{"location":"tutorials/llm-model/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Setting up LLM projects in Digitalhub</li> <li>Working with HuggingFace model catalog</li> <li>Serving pre-trained LLM models</li> <li>Deploying fine-tuned models from storage (e.g., S3)</li> <li>GPU resource management for LLM workflows</li> <li>Using cluster-defined profiles for LLM serving</li> </ul>"},{"location":"tutorials/llm-model/#getting-started","title":"Getting Started","text":"<ol> <li>Import the Jupyter notebook <code>notebook-llm-model.ipynb</code> into your Coder instance</li> <li>Execute each cell step by step following the instructions</li> </ol>"},{"location":"tutorials/llm-model/#resources","title":"Resources","text":"<ul> <li>\ud83d\udcc1 Source Files: digitalhub-tutorials/s5-llm</li> <li>\ud83e\udd17 HuggingFace Documentation: Transformers library docs</li> </ul>"},{"location":"tutorials/mlflow-model/","title":"MLflow Model Management Tutorial","text":""},{"location":"tutorials/mlflow-model/#overview","title":"Overview","text":"<p>Learn how to develop and deploy machine learning applications using MLflow for model tracking and management within Digitalhub. This tutorial demonstrates the complete lifecycle of ML models from training to serving.</p>"},{"location":"tutorials/mlflow-model/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Setting up MLflow tracking in Digitalhub</li> <li>Model versioning and experiment tracking</li> <li>Model registry management</li> <li>Automated model deployment</li> <li>Integration between MLflow and Digitalhub workflows</li> </ul>"},{"location":"tutorials/mlflow-model/#getting-started","title":"Getting Started","text":"<ol> <li>Import the Jupyter notebook <code>notebook-mflows-model.ipynb</code> into your Coder instance</li> <li>Execute each cell step by step following the instructions</li> </ol>"},{"location":"tutorials/mlflow-model/#resources","title":"Resources","text":"<ul> <li>\ud83d\udcc1 Source Files: digitalhub-tutorials/s4-mlflow</li> <li>\ud83d\udd27 MLflow Documentation: Official MLflow documentation</li> </ul>"},{"location":"tutorials/scikit-learn-model/","title":"Scikit-Learn Model Training Tutorial","text":""},{"location":"tutorials/scikit-learn-model/#overview","title":"Overview","text":"<p>Learn how to develop and deploy a scikit-learn machine learning application using Digitalhub. This tutorial covers data preparation, model training, and service deployment in a complete ML workflow.</p>"},{"location":"tutorials/scikit-learn-model/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Setting up ML projects in Digitalhub</li> <li>Data preparation for machine learning</li> <li>Training scikit-learn models</li> <li>Model deployment and serving</li> <li>End-to-end ML pipeline management</li> </ul>"},{"location":"tutorials/scikit-learn-model/#getting-started","title":"Getting Started","text":"<ol> <li>Import the Jupyter notebook <code>notebook-scikit-learn.ipynb</code> into your Coder instance</li> <li>Execute each cell step by step following the instructions</li> </ol>"},{"location":"tutorials/scikit-learn-model/#resources","title":"Resources","text":"<ul> <li>\ud83d\udcc1 Source Files: digitalhub-tutorials/s3-scikit-learn</li> <li>\ud83d\udd27 Scikit-learn Documentation: Official scikit-learn docs</li> </ul>"}]}